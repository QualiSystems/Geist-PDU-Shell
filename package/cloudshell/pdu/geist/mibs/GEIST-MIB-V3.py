# PySNMP SMI module. Autogenerated from smidump -f python GEIST-MIB-V3
# by libsmi2pysnmp-0.1.3 at Thu Feb  2 17:24:07 2017,
# Python version sys.version_info(major=2, minor=7, micro=6, releaselevel='final', serial=0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( Bits, Gauge32, Integer32, Integer32, ModuleIdentity, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, enterprises, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Gauge32", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "enterprises")
( DisplayString, ) = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString")

# Objects

geist = ModuleIdentity((1, 3, 6, 1, 4, 1, 21239)).setRevisions(("2013-06-19 00:00",))
if mibBuilder.loadTexts: geist.setOrganization("Geist")
if mibBuilder.loadTexts: geist.setContactInfo("support@geistglobal.com")
if mibBuilder.loadTexts: geist.setDescription("The MIB for Geist Products")
geistV3 = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 2))
deviceInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 2, 1))
productTitle = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productTitle.setDescription("Product name")
productVersion = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productVersion.setDescription("Product version")
productFriendlyName = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productFriendlyName.setDescription("User-assigned name")
productMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productMacAddress.setDescription("Product's unique MAC address")
productUrl = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productUrl.setDescription("Product's main URL access point")
alarmTripType = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 6), Integer().subtype(subtypeSpec=SingleValueConstraint(2,0,1,3,)).subtype(namedValues=NamedValues(("none", 0), ("low", 1), ("high", 2), ("unplugged", 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmTripType.setDescription("Type of alarm trip. 0 = None, 1 = Low, 2 = High, 3 = Unplugged")
productHardware = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productHardware.setDescription("Product's hardware type")
sensorCountsBase = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8))
sensorCounts = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1))
climateCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateCount.setDescription("Number of climate monitors currently plugged in")
powerMonitorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerMonitorCount.setDescription("Number of power monitors currently plugged in")
tempSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorCount.setDescription("Number of temperature sensors currently plugged in")
airflowSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airflowSensorCount.setDescription("Number of airflow sensors currently plugged in")
ctrl3ChDELTACount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTACount.setDescription("Number of DELTA 3 channel controllers currently plugged in")
doorSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorCount.setDescription("Number of door sensors currently plugged in")
waterSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorCount.setDescription("Number of water sensors currently plugged in")
currentSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentSensorCount.setDescription("Number of current sensors currently plugged in")
millivoltSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: millivoltSensorCount.setDescription("Number of millivolt sensors currently plugged in")
power3ChSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: power3ChSensorCount.setDescription("Number of 3 channel power monitors currently plugged in")
outletCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletCount.setDescription("Number of outlets currently plugged in")
vsfcCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcCount.setDescription("Number of fan controller monitors currently plugged in")
ctrl3ChCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChCount.setDescription("Number of 3 channel controllers currently plugged in")
ctrlGrpAmpsCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsCount.setDescription("Number of amperage controllers currently plugged in")
ctrlOutletCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlOutletCount.setDescription("Number of monitored or switched outlets")
dewpointSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewpointSensorCount.setDescription("Number of dewpoint sensors currently plugged in")
digitalSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalSensorCount.setDescription("Number of digital sensors currently plugged in")
dstsSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsSensorCount.setDescription("Number of DSTS controllers currently plugged in")
cpmSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmSensorCount.setDescription("Number of city power sensors currently plugged in")
smokeAlarmSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeAlarmSensorCount.setDescription("Number of smoke alarm sensors currently plugged in")
neg48VdcSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neg48VdcSensorCount.setDescription("Number of -48Vdc sensors currently plugged in")
pos30VdcSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos30VdcSensorCount.setDescription("Number of 30Vdc sensors currently plugged in")
analogSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogSensorCount.setDescription("Number of remote analog inputs currently plugged in")
ctrl3ChIECCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECCount.setDescription("Number of IEC 3 channel controllers currently plugged in")
climateRelayCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayCount.setDescription("Number of climate relay monitors currently plugged in")
ctrlRelayCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlRelayCount.setDescription("Number of relay controllers currently plugged in")
airSpeedSwitchSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airSpeedSwitchSensorCount.setDescription("Number of air speed switch sensors currently plugged in")
powerDMCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMCount.setDescription("Number of DM48 current sensors currently plugged in")
ioExpanderCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderCount.setDescription("Number of IO expander devices currently plugged in")
t3hdSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorCount.setDescription("Number of T3HD sensors currently plugged in")
thdSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorCount.setDescription("Number of THD sensors currently plugged in")
pos60VdcSensorCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos60VdcSensorCount.setDescription("Number of 60Vdc sensors currently plugged in")
ctrl2CirTotCount = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotCount.setDescription("Number of IEC 3 channel controllers currently plugged in")
sc10Count = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 8, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10Count.setDescription("Number of fan controller monitors currently plugged in")
temperaturePrecision = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 9), Integer().subtype(subtypeSpec=SingleValueConstraint(1,0,)).subtype(namedValues=NamedValues(("degree", 0), ("deciDegree", 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperaturePrecision.setDescription("Temperature Precision:\n0 = degree: whole degree (value X 1) \n1 = deci-degree: tenths of a degree (value X 10)\n    ex. 550 = 55.0 degrees")
alarmTrigger = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 11), DisplayString()).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: alarmTrigger.setDescription("Used in a trap var-bind to indicate what triggered \nthe alarm. The alarmTrigger will remain consistent \nfor both trip and clear traps. Possible values include:\n\n    'Low' = Low-trip trigger\n    'High' = High-trip trigger\n    'Unplugged' = Unplugged device trigger")
alarmInstance = MibScalar((1, 3, 6, 1, 4, 1, 21239, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("notifyonly")
if mibBuilder.loadTexts: alarmInstance.setDescription("Provides the row index (instance number) for the alarm\nthat generated a trap. This value is only available when\nincluded in the var-binds of an associated trap. ")
climateTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 2))
if mibBuilder.loadTexts: climateTable.setDescription("Climate sensors (internal sensors for R-Series units)")
climateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1)).setIndexNames((0, "GEIST-MIB-V3", "climateIndex"))
if mibBuilder.loadTexts: climateEntry.setDescription("Entry in the climate table: each entry contains\nan index (climateIndex) and other power strip details")
climateIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: climateIndex.setDescription("Table entry index value")
climateSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateSerial.setDescription("Serial Number")
climateName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateName.setDescription("Friendly Name")
climateAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateAvail.setDescription("Is device currently plugged in?")
climateTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateTempC.setDescription("Current reading for Temperature (C)")
climateTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateTempF.setDescription("Current reading for Temperature (F)")
climateHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateHumidity.setDescription("Current reading for Humidity")
climateLight = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateLight.setDescription("Current reading for Ambient Light")
climateAirflow = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateAirflow.setDescription("Current reading for Airflow")
climateSound = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateSound.setDescription("Current reading for Sound")
climateIO1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateIO1.setDescription("Current reading for Analog Input 1")
climateIO2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateIO2.setDescription("Current reading for Analog Input 2")
climateIO3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateIO3.setDescription("Current reading for Analog Input 3")
climateVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateVolts.setDescription("Current reading for Volts")
climateVoltPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateVoltPeak.setDescription("Current reading for Peak-Volts")
climateDeciAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDeciAmpsA.setDescription("Current reading for Amps (Phase A)")
climateDeciAmpPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDeciAmpPeakA.setDescription("Current reading for Peak-Amps (Phase A)")
climateRealPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRealPowerA.setDescription("Current reading for Real Power (Phase A)")
climateApparentPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateApparentPowerA.setDescription("Current reading for Apparent Power (Phase A)")
climatePowerFactorA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climatePowerFactorA.setDescription("Current reading for Power Factor (Phase A)")
climateDeciAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDeciAmpsB.setDescription("Current reading for Amps (Phase B)")
climateDeciAmpPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDeciAmpPeakB.setDescription("Current reading for Peak-Amps (Phase B)")
climateRealPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRealPowerB.setDescription("Current reading for Real Power (Phase B)")
climateApparentPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateApparentPowerB.setDescription("Current reading for Apparent Power (Phase B)")
climatePowerFactorB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climatePowerFactorB.setDescription("Current reading for Power Factor (Phase B)")
climateDeciAmpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDeciAmpsC.setDescription("Current reading for Amps (Phase C)")
climateDeciAmpPeakC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDeciAmpPeakC.setDescription("Current reading for Peak-Amps (Phase C)")
climateRealPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRealPowerC.setDescription("Current reading for Real Power (Phase C)")
climateApparentPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateApparentPowerC.setDescription("Current reading for Apparent Power (Phase C)")
climatePowerFactorC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climatePowerFactorC.setDescription("Current reading for Power Factor (Phase C)")
climateDewPointC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDewPointC.setDescription("Current reading for Dew Point (C)")
climateDewPointF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateDewPointF.setDescription("Current reading for Dew Point (F)")
powMonTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 3))
if mibBuilder.loadTexts: powMonTable.setDescription("A table of Power Monitors")
powMonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1)).setIndexNames((0, "GEIST-MIB-V3", "powMonIndex"))
if mibBuilder.loadTexts: powMonEntry.setDescription("Entry in the power monitor table: each entry contains\nan index (powMonIndex) and other power monitoring details")
powMonIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: powMonIndex.setDescription("Table entry index value")
powMonSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonSerial.setDescription("Serial Number")
powMonName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonName.setDescription("Friendly Name")
powMonAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonAvail.setDescription("Is device currently plugged in?")
powMonkWattHrs = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonkWattHrs.setDescription("Current reading for kWatt-Hours")
powMonVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonVolts.setDescription("Current reading for Volts")
powMonVoltMax = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonVoltMax.setDescription("Current reading for Volts (Max)")
powMonVoltMin = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonVoltMin.setDescription("Current reading for Volts (Min)")
powMonVoltPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonVoltPeak.setDescription("Current reading for Volts (Peak)")
powMonDeciAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonDeciAmps.setDescription("Current reading for DeciAmps")
powMonRealPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonRealPower.setDescription("Current reading for Real Power")
powMonApparentPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonApparentPower.setDescription("Current reading for Apparent Power")
powMonPowerFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonPowerFactor.setDescription("Current reading for Power Factor")
powMonOutlet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonOutlet1.setDescription("Outlet 1 Trap")
powMonOutlet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonOutlet2.setDescription("Outlet 2 Trap")
powMonOutlet1StatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonOutlet1StatusTime.setDescription("Seconds Since Outlet 1 Last Changed Its Status")
powMonOutlet2StatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powMonOutlet2StatusTime.setDescription("Seconds Since Outlet 2 Last Changed Its Status")
tempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 4))
if mibBuilder.loadTexts: tempSensorTable.setDescription("A table of temperature sensors")
tempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 4, 1)).setIndexNames((0, "GEIST-MIB-V3", "tempSensorIndex"))
if mibBuilder.loadTexts: tempSensorEntry.setDescription("Entry in the temperature sensor table: each entry contains\nan index (tempIndex) and other sensor details")
tempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: tempSensorIndex.setDescription("Table entry index value")
tempSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorSerial.setDescription("Serial Number")
tempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorName.setDescription("Friendly Name")
tempSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorAvail.setDescription("Is device currently plugged in?")
tempSensorTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorTempC.setDescription("Temperature in Celsius")
tempSensorTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tempSensorTempF.setDescription("Temperature in Fahrenheit")
airFlowSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 5))
if mibBuilder.loadTexts: airFlowSensorTable.setDescription("A table of airflow sensors")
airFlowSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1)).setIndexNames((0, "GEIST-MIB-V3", "airFlowSensorIndex"))
if mibBuilder.loadTexts: airFlowSensorEntry.setDescription("Entry in the air flow sensor table: each entry contains\nan index (airFlowSensorIndex) and other sensor details")
airFlowSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: airFlowSensorIndex.setDescription("Table entry index value")
airFlowSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorSerial.setDescription("Serial Number")
airFlowSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorName.setDescription("Friendly Name")
airFlowSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorAvail.setDescription("Is device currently plugged in?")
airFlowSensorTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorTempC.setDescription("Temperature reading in C")
airFlowSensorTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorTempF.setDescription("Temperature reading in F")
airFlowSensorFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorFlow.setDescription("Air flow reading")
airFlowSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorHumidity.setDescription("Humidity reading")
airFlowSensorDewPointC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorDewPointC.setDescription("Current reading for Dew Point (C)")
airFlowSensorDewPointF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airFlowSensorDewPointF.setDescription("Current reading for Dew Point (F)")
ctrl3ChDELTATable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 6))
if mibBuilder.loadTexts: ctrl3ChDELTATable.setDescription("A table of a 3 phase outlet control (DELTA)")
ctrl3ChDELTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1)).setIndexNames((0, "GEIST-MIB-V3", "ctrl3ChDELTAIndex"))
if mibBuilder.loadTexts: ctrl3ChDELTAEntry.setDescription("Entry in the 3 phase delta outlet control table: each entry contains\nan index (ctrl3ChDELTAIndex) and other outlet control monitoring details")
ctrl3ChDELTAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ctrl3ChDELTAIndex.setDescription("Table entry index value")
ctrl3ChDELTASerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTASerial.setDescription("Serial Number")
ctrl3ChDELTAName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAName.setDescription("Friendly Name")
ctrl3ChDELTAAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAAvail.setDescription("Is device currently plugged in?")
ctrl3ChDELTAPowerChCount = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAPowerChCount.setDescription("Number of active power channels")
ctrl3ChDELTADeciAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTADeciAmpsA.setDescription("Current reading for DeciAmps (Line A)")
ctrl3ChDELTADeciAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTADeciAmpsB.setDescription("Current reading for DeciAmps (Line B)")
ctrl3ChDELTADeciAmpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTADeciAmpsC.setDescription("Current reading for DeciAmps (Line C)")
ctrl3ChDELTAkWattHrsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAkWattHrsTotal.setDescription("Current Reading for kWatt-Hours (Total)")
ctrl3ChDELTARealPowerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTARealPowerTotal.setDescription("Current reading for Watts (Total)")
ctrl3ChDELTAkWattHrsAB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAkWattHrsAB.setDescription("Current Reading for kWatt-Hours (Phase AB)")
ctrl3ChDELTAVoltsAB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAVoltsAB.setDescription("Current reading for Volts (Phase AB)")
ctrl3ChDELTAVoltPeakAB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAVoltPeakAB.setDescription("Current reading for Peak-Volts (Phase AB)")
ctrl3ChDELTARealPowerAB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTARealPowerAB.setDescription("Current reading for Real Power (Phase AB)")
ctrl3ChDELTAApparentPowerAB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAApparentPowerAB.setDescription("Current reading for VoltAmps (Phase AB)")
ctrl3ChDELTAPowerFactorAB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAPowerFactorAB.setDescription("Current reading for Power Factor (Phase AB)")
ctrl3ChDELTAkWattHrsBC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAkWattHrsBC.setDescription("Current Reading for kWatt-Hours (Phase BC)")
ctrl3ChDELTAVoltsBC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAVoltsBC.setDescription("Current reading for Volts (Phase BC)")
ctrl3ChDELTAVoltPeakBC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAVoltPeakBC.setDescription("Current reading for Peak-Volts (Phase BC)")
ctrl3ChDELTARealPowerBC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTARealPowerBC.setDescription("Current reading for Real Power (Phase BC)")
ctrl3ChDELTAApparentPowerBC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAApparentPowerBC.setDescription("Current reading for VoltAmps (Phase BC)")
ctrl3ChDELTAPowerFactorBC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAPowerFactorBC.setDescription("Current reading for Power Factor (Phase BC)")
ctrl3ChDELTAkWattHrsCA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAkWattHrsCA.setDescription("Current Reading for kWatt-Hours (Phase CA)")
ctrl3ChDELTAVoltsCA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAVoltsCA.setDescription("Current reading for Volts (Phase CA)")
ctrl3ChDELTAVoltPeakCA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAVoltPeakCA.setDescription("Current reading for Peak-Volts (Phase CA)")
ctrl3ChDELTARealPowerCA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTARealPowerCA.setDescription("Current reading for Real Power (Phase CA)")
ctrl3ChDELTAApparentPowerCA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAApparentPowerCA.setDescription("Current reading for VoltAmps (Phase CA)")
ctrl3ChDELTAPowerFactorCA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 6, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDELTAPowerFactorCA.setDescription("Current reading for Power Factor (Phase CA)")
doorSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 7))
if mibBuilder.loadTexts: doorSensorTable.setDescription("A table of door sensors")
doorSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 7, 1)).setIndexNames((0, "GEIST-MIB-V3", "doorSensorIndex"))
if mibBuilder.loadTexts: doorSensorEntry.setDescription("Entry in the door sensor table: each entry contains\nan index (doorSensorIndex) and other sensor details")
doorSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: doorSensorIndex.setDescription("Table entry index value")
doorSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorSerial.setDescription("Serial Number")
doorSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorName.setDescription("Friendly Name")
doorSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 7, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorAvail.setDescription("Is device currently plugged in?")
doorSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: doorSensorStatus.setDescription("Door sensor status")
waterSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 8))
if mibBuilder.loadTexts: waterSensorTable.setDescription("A table of water sensors")
waterSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 8, 1)).setIndexNames((0, "GEIST-MIB-V3", "waterSensorIndex"))
if mibBuilder.loadTexts: waterSensorEntry.setDescription("Entry in the water sensor table: each entry contains\nan index (waterSensorIndex) and other sensor details")
waterSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: waterSensorIndex.setDescription("Table entry index value")
waterSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorSerial.setDescription("Serial Number")
waterSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorName.setDescription("Friendly Name")
waterSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 8, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorAvail.setDescription("Is device currently plugged in?")
waterSensorDampness = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: waterSensorDampness.setDescription("Dampness of the water sensor")
currentMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 9))
if mibBuilder.loadTexts: currentMonitorTable.setDescription("A table of current monitors")
currentMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 9, 1)).setIndexNames((0, "GEIST-MIB-V3", "currentMonitorIndex"))
if mibBuilder.loadTexts: currentMonitorEntry.setDescription("Entry in the current monitor table: each entry contains\nan index (currentMonitorIndex) and other sensor details")
currentMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: currentMonitorIndex.setDescription("Table entry index value")
currentMonitorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorSerial.setDescription("Serial Number")
currentMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorName.setDescription("Friendly Name")
currentMonitorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 9, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorAvail.setDescription("Is device currently plugged in?")
currentMonitorDeciAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorDeciAmps.setDescription("Current in deciamps")
millivoltMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 10))
if mibBuilder.loadTexts: millivoltMonitorTable.setDescription("A table of millivolt monitors")
millivoltMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 10, 1)).setIndexNames((0, "GEIST-MIB-V3", "millivoltMonitorIndex"))
if mibBuilder.loadTexts: millivoltMonitorEntry.setDescription("Entry in the millivolt monitor table: each entry contains\nan index (millivoltMonitorIndex) and other sensor details")
millivoltMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: millivoltMonitorIndex.setDescription("Table entry index value")
millivoltMonitorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: millivoltMonitorSerial.setDescription("Serial Number")
millivoltMonitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: millivoltMonitorName.setDescription("Friendly Name")
millivoltMonitorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 10, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: millivoltMonitorAvail.setDescription("Is device currently plugged in?")
millivoltMonitorMV = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: millivoltMonitorMV.setDescription("millivolts")
pow3ChTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 11))
if mibBuilder.loadTexts: pow3ChTable.setDescription("A table of Power Monitor 3 Channel")
pow3ChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1)).setIndexNames((0, "GEIST-MIB-V3", "pow3ChIndex"))
if mibBuilder.loadTexts: pow3ChEntry.setDescription("Entry in the power monitor 3 channel table: each entry contains\nan index (pow3ChIndex) and other power monitoring details")
pow3ChIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: pow3ChIndex.setDescription("Table entry index value")
pow3ChSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChSerial.setDescription("Serial Number")
pow3ChName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChName.setDescription("Friendly Name")
pow3ChAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChAvail.setDescription("Is device currently plugged in?")
pow3ChkWattHrsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChkWattHrsA.setDescription("Current reading for kWatt-Hours (Phase A)")
pow3ChVoltsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltsA.setDescription("Current reading for Volts (Phase A)")
pow3ChVoltMaxA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltMaxA.setDescription("Current reading for Max-Volts (Phase A)")
pow3ChVoltMinA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltMinA.setDescription("Current reading for Min-Volts (Phase A)")
pow3ChVoltPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltPeakA.setDescription("Current reading for Peak-Volts (Phase A)")
pow3ChDeciAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChDeciAmpsA.setDescription("Current reading for DeciAmps (Phase A)")
pow3ChRealPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChRealPowerA.setDescription("Current reading for Real Power (Phase A)")
pow3ChApparentPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChApparentPowerA.setDescription("Current reading for Apparent Power (Phase A)")
pow3ChPowerFactorA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChPowerFactorA.setDescription("Current reading for Power Factor (Phase A)")
pow3ChkWattHrsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChkWattHrsB.setDescription("Current reading for kWatt-Hours (Phase B)")
pow3ChVoltsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltsB.setDescription("Current reading for Volts (Phase B)")
pow3ChVoltMaxB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltMaxB.setDescription("Current reading for Max-Volts (Phase B)")
pow3ChVoltMinB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltMinB.setDescription("Current reading for Min-Volts (Phase B)")
pow3ChVoltPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltPeakB.setDescription("Current reading for Peak-Volts (Phase B)")
pow3ChDeciAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChDeciAmpsB.setDescription("Current reading for DeciAmps (Phase B)")
pow3ChRealPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChRealPowerB.setDescription("Current reading for Real Power (Phase B)")
pow3ChApparentPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChApparentPowerB.setDescription("Current reading for Apparent Power (Phase B)")
pow3ChPowerFactorB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChPowerFactorB.setDescription("Current reading for Power Factor (Phase B)")
pow3ChkWattHrsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChkWattHrsC.setDescription("Current reading for kWatt-Hours (Phase C)")
pow3ChVoltsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltsC.setDescription("Current reading for Volts (Phase C)")
pow3ChVoltMaxC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltMaxC.setDescription("Current reading for Max-Volts (Phase C)")
pow3ChVoltMinC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltMinC.setDescription("Current reading for Min-Volts (Phase C)")
pow3ChVoltPeakC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChVoltPeakC.setDescription("Current reading for Peak-Volts (Phase C)")
pow3ChDeciAmpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChDeciAmpsC.setDescription("Current reading for DeciAmps (Phase C)")
pow3ChRealPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChRealPowerC.setDescription("Current reading for Real Power (Phase C)")
pow3ChApparentPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChApparentPowerC.setDescription("Current reading for Apparent Power (Phase C)")
pow3ChPowerFactorC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChPowerFactorC.setDescription("Current reading for Power Factor (Phase C)")
pow3ChkWattHrsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChkWattHrsTotal.setDescription("Current reading for kWatt-Hours (Total)")
pow3ChRealPowerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 11, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pow3ChRealPowerTotal.setDescription("Current reading for Real Power (Total)")
outletTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 12))
if mibBuilder.loadTexts: outletTable.setDescription("A table of outlets")
outletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 12, 1)).setIndexNames((0, "GEIST-MIB-V3", "outletIndex"))
if mibBuilder.loadTexts: outletEntry.setDescription("Entry in the outlet table: each entry contains\nan index (outletIndex) and other sensor details")
outletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: outletIndex.setDescription("Table entry index value")
outletSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletSerial.setDescription("Serial Number")
outletName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletName.setDescription("Friendly Name")
outletAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 12, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outletAvail.setDescription("Is device currently plugged in?")
outlet1Status = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 12, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet1Status.setDescription("Outlet 1 status")
outlet2Status = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 12, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outlet2Status.setDescription("Outlet 2 status")
vsfcTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 13))
if mibBuilder.loadTexts: vsfcTable.setDescription("VSFC sensors (internal sensors for VSFC units)")
vsfcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1)).setIndexNames((0, "GEIST-MIB-V3", "vsfcIndex"))
if mibBuilder.loadTexts: vsfcEntry.setDescription("Entry in the vsfc table: each entry contains\nan index (vsfcIndex) and other details")
vsfcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: vsfcIndex.setDescription("Table entry index value")
vsfcSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcSerial.setDescription("Serial Number")
vsfcName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcName.setDescription("Friendly Name")
vsfcAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcAvail.setDescription("Is device currently plugged in?")
vsfcSetPointC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(18, 38))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcSetPointC.setDescription("Current temperature set point in C")
vsfcSetPointF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(65, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcSetPointF.setDescription("Current temperature set point in F")
vsfcFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcFanSpeed.setDescription("Current reading for Fan Speed")
vsfcIntTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcIntTempC.setDescription("Current internal temperature reading in C")
vsfcIntTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-4, 122))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcIntTempF.setDescription("Current internal temperature reading in F")
vsfcExt1TempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt1TempC.setDescription("Current reading for external temp 1 in C")
vsfcExt1TempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 122))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt1TempF.setDescription("Current reading for external temp 1 in F")
vsfcExt2TempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt2TempC.setDescription("Current reading for external temp 2 in C")
vsfcExt2TempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 122))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt2TempF.setDescription("Current reading for external temp 1 in F")
vsfcExt3TempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt3TempC.setDescription("Current reading for external temp 3 in C")
vsfcExt3TempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 122))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt3TempF.setDescription("Current reading for external temp 1 in F")
vsfcExt4TempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt4TempC.setDescription("Current reading for external temp 4 in C")
vsfcExt4TempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 13, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 122))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vsfcExt4TempF.setDescription("Current reading for external temp 1 in F")
ctrl3ChTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 14))
if mibBuilder.loadTexts: ctrl3ChTable.setDescription("A table of a 3 phase outlet control")
ctrl3ChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1)).setIndexNames((0, "GEIST-MIB-V3", "ctrl3ChIndex"))
if mibBuilder.loadTexts: ctrl3ChEntry.setDescription("Entry in the 3 phase outlet control table: each entry contains\nan index (ctrl3ChIndex) and other outlet control monitoring details")
ctrl3ChIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ctrl3ChIndex.setDescription("Table entry index value")
ctrl3ChSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChSerial.setDescription("Serial Number")
ctrl3ChName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChName.setDescription("Friendly Name")
ctrl3ChAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChAvail.setDescription("Is device currently plugged in?")
ctrl3ChVoltsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChVoltsA.setDescription("Current reading for Volts (Phase A)")
ctrl3ChVoltPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChVoltPeakA.setDescription("Current reading for Peak-Volts (Phase A)")
ctrl3ChDeciAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDeciAmpsA.setDescription("Current reading for DeciAmps (Phase A)")
ctrl3ChDeciAmpsPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDeciAmpsPeakA.setDescription("Current reading for Peak-DeciAmps (Phase A)")
ctrl3ChRealPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChRealPowerA.setDescription("Current reading for Real Power (Phase A)")
ctrl3ChApparentPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChApparentPowerA.setDescription("Current reading for Apparent Power (Phase A)")
ctrl3ChPowerFactorA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChPowerFactorA.setDescription("Current reading for Power Factor (Phase A)")
ctrl3ChVoltsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChVoltsB.setDescription("Current reading for Volts (Phase B)")
ctrl3ChVoltPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChVoltPeakB.setDescription("Current reading for Peak-Volts (Phase B)")
ctrl3ChDeciAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDeciAmpsB.setDescription("Current reading for DeciAmps (Phase B)")
ctrl3ChDeciAmpsPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDeciAmpsPeakB.setDescription("Current reading for Peak-DeciAmps (Phase B)")
ctrl3ChRealPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChRealPowerB.setDescription("Current reading for Real Power (Phase B)")
ctrl3ChApparentPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChApparentPowerB.setDescription("Current reading for Apparent Power (Phase B)")
ctrl3ChPowerFactorB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChPowerFactorB.setDescription("Current reading for Power Factor (Phase B)")
ctrl3ChVoltsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChVoltsC.setDescription("Current reading for Volts (Phase C)")
ctrl3ChVoltPeakC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChVoltPeakC.setDescription("Current reading for Peak-Volts (Phase C)")
ctrl3ChDeciAmpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDeciAmpsC.setDescription("Current reading for DeciAmps (Phase C)")
ctrl3ChDeciAmpsPeakC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChDeciAmpsPeakC.setDescription("Current reading for Peak-DeciAmps (Phase C)")
ctrl3ChRealPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChRealPowerC.setDescription("Current reading for Real Power (Phase C)")
ctrl3ChApparentPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChApparentPowerC.setDescription("Current reading for Apparent Power (Phase C)")
ctrl3ChPowerFactorC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 14, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChPowerFactorC.setDescription("Current reading for Power Factor (Phase C)")
ctrlGrpAmpsTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 15))
if mibBuilder.loadTexts: ctrlGrpAmpsTable.setDescription("A table of Control Group Amp readings")
ctrlGrpAmpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1)).setIndexNames((0, "GEIST-MIB-V3", "ctrlGrpAmpsIndex"))
if mibBuilder.loadTexts: ctrlGrpAmpsEntry.setDescription("Entry in the Control Group Amps table: each entry contains\nan index (ctrlGrpAmpsIndex) and other sensor details")
ctrlGrpAmpsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ctrlGrpAmpsIndex.setDescription("Table entry index value")
ctrlGrpAmpsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsSerial.setDescription("Serial Number")
ctrlGrpAmpsName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsName.setDescription("Friendly Name")
ctrlGrpAmpsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsAvail.setDescription("Is device currently plugged in?")
ctrlGrpAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsA.setDescription("DeciAmps Group A")
ctrlGrpAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsB.setDescription("DeciAmps Group B")
ctrlGrpAmpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsC.setDescription("DeciAmps Group C")
ctrlGrpAmpsD = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsD.setDescription("DeciAmps Group D")
ctrlGrpAmpsE = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsE.setDescription("DeciAmps Group E")
ctrlGrpAmpsF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsF.setDescription("DeciAmps Group F")
ctrlGrpAmpsG = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsG.setDescription("DeciAmps Group G")
ctrlGrpAmpsH = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsH.setDescription("DeciAmps Group H")
ctrlGrpAmpsAVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsAVolts.setDescription("Volts Group A")
ctrlGrpAmpsBVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsBVolts.setDescription("Volts Group B")
ctrlGrpAmpsCVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsCVolts.setDescription("Volts Group C")
ctrlGrpAmpsDVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsDVolts.setDescription("Volts Group D")
ctrlGrpAmpsEVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsEVolts.setDescription("Volts Group E")
ctrlGrpAmpsFVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsFVolts.setDescription("Volts Group F")
ctrlGrpAmpsGVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsGVolts.setDescription("Volts Group G")
ctrlGrpAmpsHVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsHVolts.setDescription("Volts Group H")
ctrlGrpAmpsI = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsI.setDescription("DeciAmps Group I")
ctrlGrpAmpsJ = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsJ.setDescription("DeciAmps Group J")
ctrlGrpAmpsK = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsK.setDescription("DeciAmps Group K")
ctrlGrpAmpsL = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsL.setDescription("DeciAmps Group L")
ctrlGrpAmpsM = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsM.setDescription("DeciAmps Group M")
ctrlGrpAmpsN = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsN.setDescription("DeciAmps Group N")
ctrlGrpAmpsO = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsO.setDescription("DeciAmps Group O")
ctrlGrpAmpsP = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsP.setDescription("DeciAmps Group P")
ctrlGrpAmpsIVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsIVolts.setDescription("Volts Group I")
ctrlGrpAmpsJVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsJVolts.setDescription("Volts Group J")
ctrlGrpAmpsKVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsKVolts.setDescription("Volts Group K")
ctrlGrpAmpsLVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsLVolts.setDescription("Volts Group L")
ctrlGrpAmpsMVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsMVolts.setDescription("Volts Group M")
ctrlGrpAmpsNVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsNVolts.setDescription("Volts Group N")
ctrlGrpAmpsOVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsOVolts.setDescription("Volts Group O")
ctrlGrpAmpsPVolts = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 15, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlGrpAmpsPVolts.setDescription("Volts Group P")
ctrlOutletTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 16))
if mibBuilder.loadTexts: ctrlOutletTable.setDescription("A table of outlet information")
ctrlOutletEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1)).setIndexNames((0, "GEIST-MIB-V3", "ctrlOutletIndex"))
if mibBuilder.loadTexts: ctrlOutletEntry.setDescription("Entry in the control outlet table: each entry contains\nan index (ctrlOutletIndex) and other sensor details")
ctrlOutletIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ctrlOutletIndex.setDescription("Outlet Number")
ctrlOutletName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletName.setDescription("Outlet Friendly Name")
ctrlOutletStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletStatus.setDescription("Current Outlet Status: 0 = Off, 1 = On | Outlet Action Write: 0 = Cancel Pending, 1 = On, 2 = On Delayed, 3 = Off Immediate, 4 = Off Delayed, 5 = Reboot, 6 = Reboot Delayed, 7 = Clear kWh (POA units only)")
ctrlOutletFeedback = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlOutletFeedback.setDescription("Outlet Feedback Value, should be equal to status")
ctrlOutletPending = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletPending.setDescription("Outlet Status Read to change to: 0 = Off, 1 = On | Outlet Action Write: 0 = Cancel Pending, 1 = On, 2 = On Delayed, 3 = Off Immediate, 4 = Off Delayed, 5 = Reboot, 6 = Reboot Delayed, 7 = Clear kWh (POA units only)")
ctrlOutletDeciAmps = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlOutletDeciAmps.setDescription("Outlet DeciAmps reading")
ctrlOutletGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlOutletGroup.setDescription("Outlet Group (A to G)")
ctrlOutletUpDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 8), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletUpDelay.setDescription("Outlet Power Up Delay")
ctrlOutletDwnDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 9), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletDwnDelay.setDescription("Outlet Power Down Delay")
ctrlOutletRbtDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 10), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletRbtDuration.setDescription("Outlet Reboot Duration")
ctrlOutletURL = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletURL.setDescription("Outlet URL")
ctrlOutletPOAAction = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 12), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletPOAAction.setDescription("POA Action: 1 = Off, 2 = On, 3 = Last, 0 = POA not supported on this unit type")
ctrlOutletPOADelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 13), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletPOADelay.setDescription("POA Delay")
ctrlOutletkWattHrs = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlOutletkWattHrs.setDescription("Current Reading for kWatt-Hours")
ctrlOutletPower = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlOutletPower.setDescription("Current reading for Power")
ctrlOutletRbtDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 16), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlOutletRbtDelay.setDescription("Outlet Reboot Delay")
ctrlOutletStatusTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 16, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlOutletStatusTime.setDescription("Seconds Since Outlet Last Changed Its Status")
dewPointSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 17))
if mibBuilder.loadTexts: dewPointSensorTable.setDescription("A table of dew point sensors")
dewPointSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1)).setIndexNames((0, "GEIST-MIB-V3", "dewPointSensorIndex"))
if mibBuilder.loadTexts: dewPointSensorEntry.setDescription("Entry in the dew point sensor table: each entry contains\nan index (dewPointSensorIndex) and other sensor details")
dewPointSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: dewPointSensorIndex.setDescription("Table entry index value")
dewPointSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorSerial.setDescription("Serial Number")
dewPointSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorName.setDescription("Friendly Name")
dewPointSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorAvail.setDescription("Is device currently plugged in?")
dewPointSensorTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorTempC.setDescription("Temperature reading in C")
dewPointSensorTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorTempF.setDescription("Temperature reading in F")
dewPointSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorHumidity.setDescription("Humidity reading")
dewPointSensorDewPointC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorDewPointC.setDescription("Dew point reading in C")
dewPointSensorDewPointF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dewPointSensorDewPointF.setDescription("Dew point reading in F")
digitalSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 18))
if mibBuilder.loadTexts: digitalSensorTable.setDescription("A table of digital sensors")
digitalSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 18, 1)).setIndexNames((0, "GEIST-MIB-V3", "digitalSensorIndex"))
if mibBuilder.loadTexts: digitalSensorEntry.setDescription("Entry in the digital sensor table: each entry contains\nan index (digitalSensorIndex) and other sensor details")
digitalSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: digitalSensorIndex.setDescription("Table entry index value")
digitalSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 18, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalSensorSerial.setDescription("Serial Number")
digitalSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 18, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalSensorName.setDescription("Friendly Name")
digitalSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 18, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalSensorAvail.setDescription("Is device currently plugged in?")
digitalSensorDigital = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 18, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: digitalSensorDigital.setDescription("Digital sensor status")
dstsTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 19))
if mibBuilder.loadTexts: dstsTable.setDescription("Digital Static Transfer Switch status")
dstsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1)).setIndexNames((0, "GEIST-MIB-V3", "dstsIndex"))
if mibBuilder.loadTexts: dstsEntry.setDescription("Entry in the DSTS table: each entry contains\nan index (dstsIndex) and other details")
dstsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: dstsIndex.setDescription("Table entry index value")
dstsSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsSerial.setDescription("Serial Number")
dstsName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsName.setDescription("Friendly Name")
dstsAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsAvail.setDescription("Is device currently plugged in?")
dstsVoltsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsVoltsA.setDescription("RMS Voltage of Side A")
dstsDeciAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsDeciAmpsA.setDescription("RMS Current of Side A in deciamps")
dstsVoltsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsVoltsB.setDescription("RMS Voltage of Side B")
dstsDeciAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsDeciAmpsB.setDescription("RMS Current of Side B in deciamps")
dstsSourceAActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsSourceAActive.setDescription("If 99, source A active")
dstsSourceBActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsSourceBActive.setDescription("If 99, source B active")
dstsPowerStatusA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsPowerStatusA.setDescription("Power Quality of source A")
dstsPowerStatusB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsPowerStatusB.setDescription("Power Quality of Source B")
dstsSourceATempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsSourceATempC.setDescription("Current reading for Source A temp in C")
dstsSourceBTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 19, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-20, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dstsSourceBTempC.setDescription("Current reading for Source B temp in C")
cpmSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 20))
if mibBuilder.loadTexts: cpmSensorTable.setDescription("A table of city power sensors")
cpmSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 20, 1)).setIndexNames((0, "GEIST-MIB-V3", "cpmSensorIndex"))
if mibBuilder.loadTexts: cpmSensorEntry.setDescription("Entry in the city power sensor table: each entry contains\nan index (cpmSensorIndex) and other sensor details")
cpmSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: cpmSensorIndex.setDescription("Table entry index value")
cpmSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmSensorSerial.setDescription("Serial Number")
cpmSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 20, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmSensorName.setDescription("Friendly Name")
cpmSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 20, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmSensorAvail.setDescription("Is device currently plugged in?")
cpmSensorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 20, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpmSensorStatus.setDescription("City Power sensor status")
smokeAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 21))
if mibBuilder.loadTexts: smokeAlarmTable.setDescription("A table of smoke alarm sensors")
smokeAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 21, 1)).setIndexNames((0, "GEIST-MIB-V3", "smokeAlarmIndex"))
if mibBuilder.loadTexts: smokeAlarmEntry.setDescription("Entry in the smoke alarm sensor table: each entry contains\nan index (smokeAlarmIndex) and other sensor details")
smokeAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: smokeAlarmIndex.setDescription("Table entry index value")
smokeAlarmSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeAlarmSerial.setDescription("Serial Number")
smokeAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 21, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeAlarmName.setDescription("Friendly Name")
smokeAlarmAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 21, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeAlarmAvail.setDescription("Is device currently plugged in?")
smokeAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smokeAlarmStatus.setDescription("Smoke alarm status")
neg48VdcSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 22))
if mibBuilder.loadTexts: neg48VdcSensorTable.setDescription("A table of -48Vdc sensors")
neg48VdcSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 22, 1)).setIndexNames((0, "GEIST-MIB-V3", "neg48VdcSensorIndex"))
if mibBuilder.loadTexts: neg48VdcSensorEntry.setDescription("Entry in the -48Vdc sensor table: each entry contains\nan index (neg48VdcSensorIndex) and other sensor details")
neg48VdcSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: neg48VdcSensorIndex.setDescription("Table entry index value")
neg48VdcSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 22, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neg48VdcSensorSerial.setDescription("Serial Number")
neg48VdcSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 22, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neg48VdcSensorName.setDescription("Friendly Name")
neg48VdcSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 22, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neg48VdcSensorAvail.setDescription("Is device currently plugged in?")
neg48VdcSensorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 22, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neg48VdcSensorVoltage.setDescription("-48Vdc Sensor value")
pos30VdcSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 23))
if mibBuilder.loadTexts: pos30VdcSensorTable.setDescription("A table of 30Vdc sensors")
pos30VdcSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 23, 1)).setIndexNames((0, "GEIST-MIB-V3", "pos30VdcSensorIndex"))
if mibBuilder.loadTexts: pos30VdcSensorEntry.setDescription("Entry in the 30Vdc sensor table: each entry contains\nan index (pos30VdcSensorIndex) and other sensor details")
pos30VdcSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: pos30VdcSensorIndex.setDescription("Table entry index value")
pos30VdcSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 23, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos30VdcSensorSerial.setDescription("Serial Number")
pos30VdcSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 23, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos30VdcSensorName.setDescription("Friendly Name")
pos30VdcSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 23, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos30VdcSensorAvail.setDescription("Is device currently plugged in?")
pos30VdcSensorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 23, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos30VdcSensorVoltage.setDescription("30Vdc Sensor value")
analogSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 24))
if mibBuilder.loadTexts: analogSensorTable.setDescription("A table of analog sensors")
analogSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 24, 1)).setIndexNames((0, "GEIST-MIB-V3", "analogSensorIndex"))
if mibBuilder.loadTexts: analogSensorEntry.setDescription("Entry in the analog input table: each entry contains\nan index (analogSensorIndex) and other sensor details")
analogSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: analogSensorIndex.setDescription("Table entry index value")
analogSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 24, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogSensorSerial.setDescription("Serial Number")
analogSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 24, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogSensorName.setDescription("Friendly Name")
analogSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 24, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogSensorAvail.setDescription("Is device currently plugged in?")
analogSensorAnalog = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 24, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: analogSensorAnalog.setDescription("Analog Sensor Value")
ctrl3ChIECTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 25))
if mibBuilder.loadTexts: ctrl3ChIECTable.setDescription("A table of a 3 phase outlet control (IEC)")
ctrl3ChIECEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1)).setIndexNames((0, "GEIST-MIB-V3", "ctrl3ChIECIndex"))
if mibBuilder.loadTexts: ctrl3ChIECEntry.setDescription("Entry in the 3 phase outlet control table: each entry contains\nan index (ctrl3ChIECIndex) and other outlet control monitoring details")
ctrl3ChIECIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ctrl3ChIECIndex.setDescription("Table entry index value")
ctrl3ChIECSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECSerial.setDescription("Serial Number")
ctrl3ChIECName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECName.setDescription("Friendly Name")
ctrl3ChIECAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECAvail.setDescription("Is device currently plugged in?")
ctrl3ChIECkWattHrsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECkWattHrsA.setDescription("Current Reading for kWatt-Hours (Phase A)")
ctrl3ChIECVoltsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECVoltsA.setDescription("Current reading for Volts (Phase A)")
ctrl3ChIECVoltPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECVoltPeakA.setDescription("Current reading for Peak-Volts (Phase A)")
ctrl3ChIECDeciAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECDeciAmpsA.setDescription("Current reading for DeciAmps (Phase A)")
ctrl3ChIECDeciAmpsPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECDeciAmpsPeakA.setDescription("Current reading for Peak-DeciAmps (Phase A)")
ctrl3ChIECRealPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECRealPowerA.setDescription("Current reading for Real Power (Phase A)")
ctrl3ChIECApparentPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECApparentPowerA.setDescription("Current reading for Apparent Power (Phase A)")
ctrl3ChIECPowerFactorA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECPowerFactorA.setDescription("Current reading for Power Factor (Phase A)")
ctrl3ChIECkWattHrsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECkWattHrsB.setDescription("Current Reading for kWatt-Hours (Phase B)")
ctrl3ChIECVoltsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECVoltsB.setDescription("Current reading for Volts (Phase B)")
ctrl3ChIECVoltPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECVoltPeakB.setDescription("Current reading for Peak-Volts (Phase B)")
ctrl3ChIECDeciAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECDeciAmpsB.setDescription("Current reading for DeciAmps (Phase B)")
ctrl3ChIECDeciAmpsPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECDeciAmpsPeakB.setDescription("Current reading for Peak-DeciAmps (Phase B)")
ctrl3ChIECRealPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECRealPowerB.setDescription("Current reading for Real Power (Phase B)")
ctrl3ChIECApparentPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECApparentPowerB.setDescription("Current reading for Apparent Power (Phase B)")
ctrl3ChIECPowerFactorB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECPowerFactorB.setDescription("Current reading for Power Factor (Phase B)")
ctrl3ChIECkWattHrsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECkWattHrsC.setDescription("Current Reading for kWatt-Hours (Phase C)")
ctrl3ChIECVoltsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECVoltsC.setDescription("Current reading for Volts (Phase C)")
ctrl3ChIECVoltPeakC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECVoltPeakC.setDescription("Current reading for Peak-Volts (Phase C)")
ctrl3ChIECDeciAmpsC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECDeciAmpsC.setDescription("Current reading for DeciAmps (Phase C)")
ctrl3ChIECDeciAmpsPeakC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECDeciAmpsPeakC.setDescription("Current reading for Peak-DeciAmps (Phase C)")
ctrl3ChIECRealPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECRealPowerC.setDescription("Current reading for Real Power (Phase C)")
ctrl3ChIECApparentPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECApparentPowerC.setDescription("Current reading for Apparent Power (Phase C)")
ctrl3ChIECPowerFactorC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECPowerFactorC.setDescription("Current reading for Power Factor (Phase C)")
ctrl3ChIECkWattHrsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECkWattHrsTotal.setDescription("Current Reading for kWatt-Hours (Total)")
ctrl3ChIECRealPowerTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 25, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl3ChIECRealPowerTotal.setDescription("Current reading for Watts (Total)")
climateRelayTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 26))
if mibBuilder.loadTexts: climateRelayTable.setDescription("Climate Relay sensors (internal sensors for R-Series Relay units)")
climateRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1)).setIndexNames((0, "GEIST-MIB-V3", "climateRelayIndex"))
if mibBuilder.loadTexts: climateRelayEntry.setDescription("Entry in the climate relay table: each entry contains\nan index (climateRelayIndex) and other power strip details")
climateRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: climateRelayIndex.setDescription("Table entry index value")
climateRelaySerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelaySerial.setDescription("Serial Number")
climateRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayName.setDescription("Friendly Name")
climateRelayAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayAvail.setDescription("Is device currently plugged in?")
climateRelayTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayTempC.setDescription("Current reading for Temperature (C)")
climateRelayTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayTempF.setDescription("Current reading for Temperature (F)")
climateRelayIO1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayIO1.setDescription("Current reading for Analog Input 1")
climateRelayIO2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayIO2.setDescription("Current reading for Analog Input 2")
climateRelayIO3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayIO3.setDescription("Current reading for Analog Input 3")
climateRelayIO4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayIO4.setDescription("Current reading for Analog Input 4")
climateRelayIO5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayIO5.setDescription("Current reading for Analog Input 5")
climateRelayIO6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 26, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: climateRelayIO6.setDescription("Current reading for Analog Input 6")
ctrlRelayTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 27))
if mibBuilder.loadTexts: ctrlRelayTable.setDescription("A table of relay information")
ctrlRelayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 27, 1)).setIndexNames((0, "GEIST-MIB-V3", "ctrlRelayIndex"))
if mibBuilder.loadTexts: ctrlRelayEntry.setDescription("Entry in the control relay table: each entry contains\nan index (ctrlRelayIndex) and other sensor details")
ctrlRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ctrlRelayIndex.setDescription("Relay Number")
ctrlRelayName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 27, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlRelayName.setDescription("Relay Friendly Name")
ctrlRelayState = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 27, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlRelayState.setDescription("Current Relay Status: 0 = Off, 1 = On")
ctrlRelayLatchingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 27, 1, 4), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlRelayLatchingMode.setDescription("Relay latching mode: 0 = Non-latching, 1 = Latching")
ctrlRelayOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 27, 1, 5), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlRelayOverride.setDescription("Relay Override Mode: 0 - None, 1 - On, 2 - Off")
ctrlRelayAcknowledge = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 27, 1, 6), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlRelayAcknowledge.setDescription("Acknowledge write a 1, always reads back 0")
airSpeedSwitchSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 28))
if mibBuilder.loadTexts: airSpeedSwitchSensorTable.setDescription("A table of air speed switch sensors")
airSpeedSwitchSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 28, 1)).setIndexNames((0, "GEIST-MIB-V3", "airSpeedSwitchSensorIndex"))
if mibBuilder.loadTexts: airSpeedSwitchSensorEntry.setDescription("Entry in the air speed switch sensor table: each entry contains\nan index (airSpeedSwitchIndex) and other sensor details")
airSpeedSwitchSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: airSpeedSwitchSensorIndex.setDescription("Table entry index value")
airSpeedSwitchSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 28, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airSpeedSwitchSensorSerial.setDescription("Serial Number")
airSpeedSwitchSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 28, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airSpeedSwitchSensorName.setDescription("Friendly Name")
airSpeedSwitchSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 28, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airSpeedSwitchSensorAvail.setDescription("Is device currently plugged in?")
airSpeedSwitchSensorAirSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 28, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airSpeedSwitchSensorAirSpeed.setDescription("Air Speed Switch Status")
powerDMTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 29))
if mibBuilder.loadTexts: powerDMTable.setDescription("A table of DM48 current monitors")
powerDMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1)).setIndexNames((0, "GEIST-MIB-V3", "powerDMIndex"))
if mibBuilder.loadTexts: powerDMEntry.setDescription("Entry in the DM48 current monitor table: each entry contains\nan index (powerDMIndex) and other sensor details")
powerDMIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: powerDMIndex.setDescription("Table entry index value")
powerDMSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMSerial.setDescription("Serial Number")
powerDMName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMName.setDescription("Friendly Name")
powerDMAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMAvail.setDescription("Is device currently plugged in?")
powerDMUnitInfoTitle = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMUnitInfoTitle.setDescription("Type of Unit")
powerDMUnitInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMUnitInfoVersion.setDescription("Unit Version Number")
powerDMUnitInfoMainCount = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMUnitInfoMainCount.setDescription("Number of Main (Total Amps) Channels on the Unit")
powerDMUnitInfoAuxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 48))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMUnitInfoAuxCount.setDescription("Number of Auxiliary (Outlet) Channels on the Unit")
powerDMChannelName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName1.setDescription("Channel 1 Factory Name")
powerDMChannelName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName2.setDescription("Channel 2 Factory Name")
powerDMChannelName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName3.setDescription("Channel 3 Factory Name")
powerDMChannelName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName4.setDescription("Channel 4 Factory Name")
powerDMChannelName5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName5.setDescription("Channel 5 Factory Name")
powerDMChannelName6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName6.setDescription("Channel 6 Factory Name")
powerDMChannelName7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName7.setDescription("Channel 7 Factory Name")
powerDMChannelName8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName8.setDescription("Channel 8 Factory Name")
powerDMChannelName9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName9.setDescription("Channel 9 Factory Name")
powerDMChannelName10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName10.setDescription("Channel 10 Factory Name")
powerDMChannelName11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName11.setDescription("Channel 11 Factory Name")
powerDMChannelName12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName12.setDescription("Channel 12 Factory Name")
powerDMChannelName13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName13.setDescription("Channel 13 Factory Name")
powerDMChannelName14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName14.setDescription("Channel 14 Factory Name")
powerDMChannelName15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName15.setDescription("Channel 15 Factory Name")
powerDMChannelName16 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName16.setDescription("Channel 16 Factory Name")
powerDMChannelName17 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName17.setDescription("Channel 17 Factory Name")
powerDMChannelName18 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName18.setDescription("Channel 18 Factory Name")
powerDMChannelName19 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName19.setDescription("Channel 19 Factory Name")
powerDMChannelName20 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName20.setDescription("Channel 20 Factory Name")
powerDMChannelName21 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName21.setDescription("Channel 21 Factory Name")
powerDMChannelName22 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName22.setDescription("Channel 22 Factory Name")
powerDMChannelName23 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName23.setDescription("Channel 23 Factory Name")
powerDMChannelName24 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName24.setDescription("Channel 24 Factory Name")
powerDMChannelName25 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName25.setDescription("Channel 25 Factory Name")
powerDMChannelName26 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName26.setDescription("Channel 26 Factory Name")
powerDMChannelName27 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName27.setDescription("Channel 27 Factory Name")
powerDMChannelName28 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName28.setDescription("Channel 28 Factory Name")
powerDMChannelName29 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName29.setDescription("Channel 29 Factory Name")
powerDMChannelName30 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 38), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName30.setDescription("Channel 30 Factory Name")
powerDMChannelName31 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName31.setDescription("Channel 31 Factory Name")
powerDMChannelName32 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName32.setDescription("Channel 32 Factory Name")
powerDMChannelName33 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName33.setDescription("Channel 33 Factory Name")
powerDMChannelName34 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName34.setDescription("Channel 34 Factory Name")
powerDMChannelName35 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 43), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName35.setDescription("Channel 35 Factory Name")
powerDMChannelName36 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName36.setDescription("Channel 36 Factory Name")
powerDMChannelName37 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 45), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName37.setDescription("Channel 37 Factory Name")
powerDMChannelName38 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 46), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName38.setDescription("Channel 38 Factory Name")
powerDMChannelName39 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName39.setDescription("Channel 39 Factory Name")
powerDMChannelName40 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName40.setDescription("Channel 40 Factory Name")
powerDMChannelName41 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName41.setDescription("Channel 41 Factory Name")
powerDMChannelName42 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 50), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName42.setDescription("Channel 42 Factory Name")
powerDMChannelName43 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName43.setDescription("Channel 43 Factory Name")
powerDMChannelName44 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName44.setDescription("Channel 44 Factory Name")
powerDMChannelName45 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName45.setDescription("Channel 45 Factory Name")
powerDMChannelName46 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName46.setDescription("Channel 46 Factory Name")
powerDMChannelName47 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName47.setDescription("Channel 47 Factory Name")
powerDMChannelName48 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 56), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelName48.setDescription("Channel 48 Factory Name")
powerDMChannelFriendly1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 57), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly1.setDescription("Channel 1 Friendly Name")
powerDMChannelFriendly2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 58), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly2.setDescription("Channel 2 Friendly Name")
powerDMChannelFriendly3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 59), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly3.setDescription("Channel 3 Friendly Name")
powerDMChannelFriendly4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 60), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly4.setDescription("Channel 4 Friendly Name")
powerDMChannelFriendly5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 61), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly5.setDescription("Channel 5 Friendly Name")
powerDMChannelFriendly6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 62), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly6.setDescription("Channel 6 Friendly Name")
powerDMChannelFriendly7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 63), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly7.setDescription("Channel 7 Friendly Name")
powerDMChannelFriendly8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 64), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly8.setDescription("Channel 8 Friendly Name")
powerDMChannelFriendly9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 65), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly9.setDescription("Channel 9 Friendly Name")
powerDMChannelFriendly10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 66), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly10.setDescription("Channel 10 Friendly Name")
powerDMChannelFriendly11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 67), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly11.setDescription("Channel 11 Friendly Name")
powerDMChannelFriendly12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 68), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly12.setDescription("Channel 12 Friendly Name")
powerDMChannelFriendly13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 69), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly13.setDescription("Channel 13 Friendly Name")
powerDMChannelFriendly14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly14.setDescription("Channel 14 Friendly Name")
powerDMChannelFriendly15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 71), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly15.setDescription("Channel 15 Friendly Name")
powerDMChannelFriendly16 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 72), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly16.setDescription("Channel 16 Friendly Name")
powerDMChannelFriendly17 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 73), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly17.setDescription("Channel 17 Friendly Name")
powerDMChannelFriendly18 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 74), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly18.setDescription("Channel 18 Friendly Name")
powerDMChannelFriendly19 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 75), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly19.setDescription("Channel 19 Friendly Name")
powerDMChannelFriendly20 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 76), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly20.setDescription("Channel 20 Friendly Name")
powerDMChannelFriendly21 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 77), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly21.setDescription("Channel 21 Friendly Name")
powerDMChannelFriendly22 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 78), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly22.setDescription("Channel 22 Friendly Name")
powerDMChannelFriendly23 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 79), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly23.setDescription("Channel 23 Friendly Name")
powerDMChannelFriendly24 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly24.setDescription("Channel 24 Friendly Name")
powerDMChannelFriendly25 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 81), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly25.setDescription("Channel 25 Friendly Name")
powerDMChannelFriendly26 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 82), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly26.setDescription("Channel 26 Friendly Name")
powerDMChannelFriendly27 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 83), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly27.setDescription("Channel 27 Friendly Name")
powerDMChannelFriendly28 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 84), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly28.setDescription("Channel 28 Friendly Name")
powerDMChannelFriendly29 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 85), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly29.setDescription("Channel 29 Friendly Name")
powerDMChannelFriendly30 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 86), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly30.setDescription("Channel 30 Friendly Name")
powerDMChannelFriendly31 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 87), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly31.setDescription("Channel 31 Friendly Name")
powerDMChannelFriendly32 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 88), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly32.setDescription("Channel 32 Friendly Name")
powerDMChannelFriendly33 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 89), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly33.setDescription("Channel 33 Friendly Name")
powerDMChannelFriendly34 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 90), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly34.setDescription("Channel 34 Friendly Name")
powerDMChannelFriendly35 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 91), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly35.setDescription("Channel 35 Friendly Name")
powerDMChannelFriendly36 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 92), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly36.setDescription("Channel 36 Friendly Name")
powerDMChannelFriendly37 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 93), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly37.setDescription("Channel 37 Friendly Name")
powerDMChannelFriendly38 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 94), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly38.setDescription("Channel 38 Friendly Name")
powerDMChannelFriendly39 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 95), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly39.setDescription("Channel 39 Friendly Name")
powerDMChannelFriendly40 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 96), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly40.setDescription("Channel 40 Friendly Name")
powerDMChannelFriendly41 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 97), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly41.setDescription("Channel 41 Friendly Name")
powerDMChannelFriendly42 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 98), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly42.setDescription("Channel 42 Friendly Name")
powerDMChannelFriendly43 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 99), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly43.setDescription("Channel 43 Friendly Name")
powerDMChannelFriendly44 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 100), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly44.setDescription("Channel 44 Friendly Name")
powerDMChannelFriendly45 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 101), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly45.setDescription("Channel 45 Friendly Name")
powerDMChannelFriendly46 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 102), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly46.setDescription("Channel 46 Friendly Name")
powerDMChannelFriendly47 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 103), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly47.setDescription("Channel 47 Friendly Name")
powerDMChannelFriendly48 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 104), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelFriendly48.setDescription("Channel 48 Friendly Name")
powerDMChannelGroup1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 105), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup1.setDescription("Channel 1 Group")
powerDMChannelGroup2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 106), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup2.setDescription("Channel 2 Group")
powerDMChannelGroup3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 107), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup3.setDescription("Channel 3 Group")
powerDMChannelGroup4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 108), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup4.setDescription("Channel 4 Group")
powerDMChannelGroup5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 109), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup5.setDescription("Channel 5 Group")
powerDMChannelGroup6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 110), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup6.setDescription("Channel 6 Group")
powerDMChannelGroup7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 111), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup7.setDescription("Channel 7 Group")
powerDMChannelGroup8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 112), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup8.setDescription("Channel 8 Group")
powerDMChannelGroup9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 113), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup9.setDescription("Channel 9 Group")
powerDMChannelGroup10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 114), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup10.setDescription("Channel 10 Group")
powerDMChannelGroup11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 115), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup11.setDescription("Channel 11 Group")
powerDMChannelGroup12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 116), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup12.setDescription("Channel 12 Group")
powerDMChannelGroup13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 117), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup13.setDescription("Channel 13 Group")
powerDMChannelGroup14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 118), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup14.setDescription("Channel 14 Group")
powerDMChannelGroup15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 119), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup15.setDescription("Channel 15 Group")
powerDMChannelGroup16 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 120), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup16.setDescription("Channel 16 Group")
powerDMChannelGroup17 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 121), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup17.setDescription("Channel 17 Group")
powerDMChannelGroup18 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 122), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup18.setDescription("Channel 18 Group")
powerDMChannelGroup19 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 123), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup19.setDescription("Channel 19 Group")
powerDMChannelGroup20 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 124), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup20.setDescription("Channel 20 Group")
powerDMChannelGroup21 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 125), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup21.setDescription("Channel 21 Group")
powerDMChannelGroup22 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 126), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup22.setDescription("Channel 22 Group")
powerDMChannelGroup23 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 127), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup23.setDescription("Channel 23 Group")
powerDMChannelGroup24 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 128), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup24.setDescription("Channel 24 Group")
powerDMChannelGroup25 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 129), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup25.setDescription("Channel 25 Group")
powerDMChannelGroup26 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 130), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup26.setDescription("Channel 26 Group")
powerDMChannelGroup27 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 131), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup27.setDescription("Channel 27 Group")
powerDMChannelGroup28 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 132), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup28.setDescription("Channel 28 Group")
powerDMChannelGroup29 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 133), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup29.setDescription("Channel 29 Group")
powerDMChannelGroup30 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 134), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup30.setDescription("Channel 30 Group")
powerDMChannelGroup31 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 135), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup31.setDescription("Channel 31 Group")
powerDMChannelGroup32 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 136), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup32.setDescription("Channel 32 Group")
powerDMChannelGroup33 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 137), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup33.setDescription("Channel 33 Group")
powerDMChannelGroup34 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 138), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup34.setDescription("Channel 34 Group")
powerDMChannelGroup35 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 139), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup35.setDescription("Channel 35 Group")
powerDMChannelGroup36 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 140), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup36.setDescription("Channel 36 Group")
powerDMChannelGroup37 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 141), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup37.setDescription("Channel 37 Group")
powerDMChannelGroup38 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 142), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup38.setDescription("Channel 38 Group")
powerDMChannelGroup39 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 143), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup39.setDescription("Channel 39 Group")
powerDMChannelGroup40 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 144), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup40.setDescription("Channel 40 Group")
powerDMChannelGroup41 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 145), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup41.setDescription("Channel 41 Group")
powerDMChannelGroup42 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 146), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup42.setDescription("Channel 42 Group")
powerDMChannelGroup43 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 147), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup43.setDescription("Channel 43 Group")
powerDMChannelGroup44 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 148), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup44.setDescription("Channel 44 Group")
powerDMChannelGroup45 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 149), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup45.setDescription("Channel 45 Group")
powerDMChannelGroup46 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 150), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup46.setDescription("Channel 46 Group")
powerDMChannelGroup47 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 151), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup47.setDescription("Channel 47 Group")
powerDMChannelGroup48 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 152), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMChannelGroup48.setDescription("Channel 48 Group")
powerDMDeciAmps1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 153), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps1.setDescription("Current in deciamps")
powerDMDeciAmps2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 154), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps2.setDescription("Current in deciamps")
powerDMDeciAmps3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 155), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps3.setDescription("Current in deciamps")
powerDMDeciAmps4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 156), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps4.setDescription("Current in deciamps")
powerDMDeciAmps5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 157), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps5.setDescription("Current in deciamps")
powerDMDeciAmps6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 158), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps6.setDescription("Current in deciamps")
powerDMDeciAmps7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 159), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps7.setDescription("Current in deciamps")
powerDMDeciAmps8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 160), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps8.setDescription("Current in deciamps")
powerDMDeciAmps9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 161), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps9.setDescription("Current in deciamps")
powerDMDeciAmps10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 162), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps10.setDescription("Current in deciamps")
powerDMDeciAmps11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 163), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps11.setDescription("Current in deciamps")
powerDMDeciAmps12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 164), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps12.setDescription("Current in deciamps")
powerDMDeciAmps13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 165), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps13.setDescription("Current in deciamps")
powerDMDeciAmps14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 166), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps14.setDescription("Current in deciamps")
powerDMDeciAmps15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 167), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps15.setDescription("Current in deciamps")
powerDMDeciAmps16 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 168), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps16.setDescription("Current in deciamps")
powerDMDeciAmps17 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 169), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps17.setDescription("Current in deciamps")
powerDMDeciAmps18 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 170), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps18.setDescription("Current in deciamps")
powerDMDeciAmps19 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 171), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps19.setDescription("Current in deciamps")
powerDMDeciAmps20 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 172), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps20.setDescription("Current in deciamps")
powerDMDeciAmps21 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 173), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps21.setDescription("Current in deciamps")
powerDMDeciAmps22 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 174), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps22.setDescription("Current in deciamps")
powerDMDeciAmps23 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 175), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps23.setDescription("Current in deciamps")
powerDMDeciAmps24 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 176), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps24.setDescription("Current in deciamps")
powerDMDeciAmps25 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 177), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps25.setDescription("Current in deciamps")
powerDMDeciAmps26 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 178), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps26.setDescription("Current in deciamps")
powerDMDeciAmps27 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 179), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps27.setDescription("Current in deciamps")
powerDMDeciAmps28 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 180), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps28.setDescription("Current in deciamps")
powerDMDeciAmps29 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 181), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps29.setDescription("Current in deciamps")
powerDMDeciAmps30 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 182), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps30.setDescription("Current in deciamps")
powerDMDeciAmps31 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 183), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps31.setDescription("Current in deciamps")
powerDMDeciAmps32 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 184), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps32.setDescription("Current in deciamps")
powerDMDeciAmps33 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 185), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps33.setDescription("Current in deciamps")
powerDMDeciAmps34 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 186), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps34.setDescription("Current in deciamps")
powerDMDeciAmps35 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 187), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps35.setDescription("Current in deciamps")
powerDMDeciAmps36 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 188), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps36.setDescription("Current in deciamps")
powerDMDeciAmps37 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 189), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps37.setDescription("Current in deciamps")
powerDMDeciAmps38 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 190), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps38.setDescription("Current in deciamps")
powerDMDeciAmps39 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 191), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps39.setDescription("Current in deciamps")
powerDMDeciAmps40 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 192), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps40.setDescription("Current in deciamps")
powerDMDeciAmps41 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 193), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps41.setDescription("Current in deciamps")
powerDMDeciAmps42 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 194), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps42.setDescription("Current in deciamps")
powerDMDeciAmps43 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 195), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps43.setDescription("Current in deciamps")
powerDMDeciAmps44 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 196), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps44.setDescription("Current in deciamps")
powerDMDeciAmps45 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 197), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps45.setDescription("Current in deciamps")
powerDMDeciAmps46 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 198), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps46.setDescription("Current in deciamps")
powerDMDeciAmps47 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 199), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps47.setDescription("Current in deciamps")
powerDMDeciAmps48 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 29, 1, 200), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1209))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerDMDeciAmps48.setDescription("Current in deciamps")
ioExpanderTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 30))
if mibBuilder.loadTexts: ioExpanderTable.setDescription("IO Expander device with relay capability")
ioExpanderEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1)).setIndexNames((0, "GEIST-MIB-V3", "ioExpanderIndex"))
if mibBuilder.loadTexts: ioExpanderEntry.setDescription("Entry in the IO Expander table: each entry contains\nan index (ioExpanderIndex) and other details")
ioExpanderIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ioExpanderIndex.setDescription("Table entry index value")
ioExpanderSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderSerial.setDescription("Serial Number")
ioExpanderName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderName.setDescription("Friendly Name")
ioExpanderAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderAvail.setDescription("Is device currently plugged in?")
ioExpanderFriendlyName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName1.setDescription("IO 1 Friendly Name")
ioExpanderFriendlyName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName2.setDescription("IO 2 Friendly Name")
ioExpanderFriendlyName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName3.setDescription("IO 3 Friendly Name")
ioExpanderFriendlyName4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName4.setDescription("IO 4 Friendly Name")
ioExpanderFriendlyName5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName5.setDescription("IO 5 Friendly Name")
ioExpanderFriendlyName6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName6.setDescription("IO 6 Friendly Name")
ioExpanderFriendlyName7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName7.setDescription("IO 7 Friendly Name")
ioExpanderFriendlyName8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName8.setDescription("IO 8 Friendly Name")
ioExpanderFriendlyName9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName9.setDescription("IO 9 Friendly Name")
ioExpanderFriendlyName10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName10.setDescription("IO 10 Friendly Name")
ioExpanderFriendlyName11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName11.setDescription("IO 11 Friendly Name")
ioExpanderFriendlyName12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName12.setDescription("IO 12 Friendly Name")
ioExpanderFriendlyName13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName13.setDescription("IO 13 Friendly Name")
ioExpanderFriendlyName14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName14.setDescription("IO 14 Friendly Name")
ioExpanderFriendlyName15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName15.setDescription("IO 15 Friendly Name")
ioExpanderFriendlyName16 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName16.setDescription("IO 16 Friendly Name")
ioExpanderFriendlyName17 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName17.setDescription("IO 17 Friendly Name")
ioExpanderFriendlyName18 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName18.setDescription("IO 18 Friendly Name")
ioExpanderFriendlyName19 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName19.setDescription("IO 19 Friendly Name")
ioExpanderFriendlyName20 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName20.setDescription("IO 20 Friendly Name")
ioExpanderFriendlyName21 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 25), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName21.setDescription("IO 21 Friendly Name")
ioExpanderFriendlyName22 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName22.setDescription("IO 22 Friendly Name")
ioExpanderFriendlyName23 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName23.setDescription("IO 23 Friendly Name")
ioExpanderFriendlyName24 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName24.setDescription("IO 24 Friendly Name")
ioExpanderFriendlyName25 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName25.setDescription("IO 25 Friendly Name")
ioExpanderFriendlyName26 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName26.setDescription("IO 26 Friendly Name")
ioExpanderFriendlyName27 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName27.setDescription("IO 27 Friendly Name")
ioExpanderFriendlyName28 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName28.setDescription("IO 28 Friendly Name")
ioExpanderFriendlyName29 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName29.setDescription("IO 29 Friendly Name")
ioExpanderFriendlyName30 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName30.setDescription("IO 30 Friendly Name")
ioExpanderFriendlyName31 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName31.setDescription("IO 31 Friendly Name")
ioExpanderFriendlyName32 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 36), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderFriendlyName32.setDescription("IO 32 Friendly Name")
ioExpanderIO1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO1.setDescription("Current reading for Analog Input 1")
ioExpanderIO2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO2.setDescription("Current reading for Analog Input 2")
ioExpanderIO3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO3.setDescription("Current reading for Analog Input 3")
ioExpanderIO4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO4.setDescription("Current reading for Analog Input 4")
ioExpanderIO5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO5.setDescription("Current reading for Analog Input 5")
ioExpanderIO6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO6.setDescription("Current reading for Analog Input 6")
ioExpanderIO7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO7.setDescription("Current reading for Analog Input 7")
ioExpanderIO8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO8.setDescription("Current reading for Analog Input 8")
ioExpanderIO9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO9.setDescription("Current reading for Analog Input 9")
ioExpanderIO10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO10.setDescription("Current reading for Analog Input 10")
ioExpanderIO11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO11.setDescription("Current reading for Analog Input 11")
ioExpanderIO12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO12.setDescription("Current reading for Analog Input 12")
ioExpanderIO13 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO13.setDescription("Current reading for Analog Input 13")
ioExpanderIO14 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO14.setDescription("Current reading for Analog Input 14")
ioExpanderIO15 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO15.setDescription("Current reading for Analog Input 15")
ioExpanderIO16 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO16.setDescription("Current reading for Analog Input 16")
ioExpanderIO17 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO17.setDescription("Current reading for Analog Input 17")
ioExpanderIO18 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO18.setDescription("Current reading for Analog Input 18")
ioExpanderIO19 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO19.setDescription("Current reading for Analog Input 19")
ioExpanderIO20 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO20.setDescription("Current reading for Analog Input 20")
ioExpanderIO21 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO21.setDescription("Current reading for Analog Input 21")
ioExpanderIO22 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO22.setDescription("Current reading for Analog Input 22")
ioExpanderIO23 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO23.setDescription("Current reading for Analog Input 23")
ioExpanderIO24 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO24.setDescription("Current reading for Analog Input 24")
ioExpanderIO25 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO25.setDescription("Current reading for Analog Input 25")
ioExpanderIO26 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO26.setDescription("Current reading for Analog Input 26")
ioExpanderIO27 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO27.setDescription("Current reading for Analog Input 27")
ioExpanderIO28 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO28.setDescription("Current reading for Analog Input 28")
ioExpanderIO29 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO29.setDescription("Current reading for Analog Input 29")
ioExpanderIO30 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO30.setDescription("Current reading for Analog Input 30")
ioExpanderIO31 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO31.setDescription("Current reading for Analog Input 31")
ioExpanderIO32 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderIO32.setDescription("Current reading for Analog Input 32")
ioExpanderRelayName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 69), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayName1.setDescription("Relay1 Friendly Name")
ioExpanderRelayState1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderRelayState1.setDescription("Relay1 Current Status: 0 = Off, 1 = On")
ioExpanderRelayLatchingMode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 71), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayLatchingMode1.setDescription("Relay1 Latching mode: 0 = Non-latching, 1 = Latching")
ioExpanderRelayOverride1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 72), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayOverride1.setDescription("Relay1 Override Mode: 0 - None, 1 - On, 2 - Off")
ioExpanderRelayAcknowledge1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 73), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayAcknowledge1.setDescription("Relay1 Acknowledge write a 1, always reads back 0")
ioExpanderRelayName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 74), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayName2.setDescription("Relay2 Friendly Name")
ioExpanderRelayState2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderRelayState2.setDescription("Relay2 Current Status: 0 = Off, 1 = On")
ioExpanderRelayLatchingMode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 76), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayLatchingMode2.setDescription("Relay2 Latching mode: 0 = Non-latching, 1 = Latching")
ioExpanderRelayOverride2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 77), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayOverride2.setDescription("Relay2 Override Mode: 0 - None, 1 - On, 2 - Off")
ioExpanderRelayAcknowledge2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 78), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayAcknowledge2.setDescription("Relay2 Acknowledge write a 1, always reads back 0")
ioExpanderRelayName3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 79), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayName3.setDescription("Relay3 Friendly Name")
ioExpanderRelayState3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioExpanderRelayState3.setDescription("Relay3 Current Status: 0 = Off, 1 = On")
ioExpanderRelayLatchingMode3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 81), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayLatchingMode3.setDescription("Relay3 Latching mode: 0 = Non-latching, 1 = Latching")
ioExpanderRelayOverride3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 82), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayOverride3.setDescription("Relay3 Override Mode: 0 - None, 1 - On, 2 - Off")
ioExpanderRelayAcknowledge3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 30, 1, 83), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioExpanderRelayAcknowledge3.setDescription("Relay3 Acknowledge write a 1, always reads back 0")
t3hdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 31))
if mibBuilder.loadTexts: t3hdSensorTable.setDescription("A table of T3HD sensors")
t3hdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1)).setIndexNames((0, "GEIST-MIB-V3", "t3hdSensorIndex"))
if mibBuilder.loadTexts: t3hdSensorEntry.setDescription("Entry in the T3HD sensor table: each entry contains\nan index (t3hdIndex) and other sensor details")
t3hdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: t3hdSensorIndex.setDescription("Table entry index value")
t3hdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorSerial.setDescription("Serial Number")
t3hdSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorName.setDescription("Friendly Name")
t3hdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorAvail.setDescription("Is device currently plugged in?")
t3hdSensorIntName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntName.setDescription("Internal Friendly Name")
t3hdSensorIntTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntTempC.setDescription("Internal Temperature reading in C")
t3hdSensorIntTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntTempF.setDescription("Internal Temperature reading in F")
t3hdSensorIntHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntHumidity.setDescription("Internal Humidity reading")
t3hdSensorIntDewPointC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntDewPointC.setDescription("Internal Dew Point reading in C")
t3hdSensorIntDewPointF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorIntDewPointF.setDescription("Internal Dew Point reading in F")
t3hdSensorExt1Avail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt1Avail.setDescription("External 1 status: 0 = unplugged, 1 = normal operation, 2 = device error")
t3hdSensorExt1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt1Name.setDescription("External 1 Friendly Name")
t3hdSensorExt1TempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt1TempC.setDescription("External 1 Temperature reading in C")
t3hdSensorExt1TempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt1TempF.setDescription("External 1 Temperature reading in F")
t3hdSensorExt2Avail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt2Avail.setDescription("External 2 status: 0 = unplugged, 1 = normal operation, 2 = device error")
t3hdSensorExt2Name = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt2Name.setDescription("External 2 Friendly Name")
t3hdSensorExt2TempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt2TempC.setDescription("External 2 Temperature reading in C")
t3hdSensorExt2TempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 31, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: t3hdSensorExt2TempF.setDescription("External 2 Temperature reading in F")
thdSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 32))
if mibBuilder.loadTexts: thdSensorTable.setDescription("A table of THD sensors")
thdSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1)).setIndexNames((0, "GEIST-MIB-V3", "thdSensorIndex"))
if mibBuilder.loadTexts: thdSensorEntry.setDescription("Entry in the THD sensor table: each entry contains\nan index (thdIndex) and other sensor details")
thdSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: thdSensorIndex.setDescription("Table entry index value")
thdSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorSerial.setDescription("Serial Number")
thdSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorName.setDescription("Friendly Name")
thdSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorAvail.setDescription("Is device currently plugged in?")
thdSensorTempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorTempC.setDescription("Temperature reading in C")
thdSensorTempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorTempF.setDescription("Temperature reading in F")
thdSensorHumidity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorHumidity.setDescription("Humidity reading")
thdSensorDewPointC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorDewPointC.setDescription("Dew Point reading in C")
thdSensorDewPointF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 32, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-58, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thdSensorDewPointF.setDescription("Dew Point reading in F")
pos60VdcSensorTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 33))
if mibBuilder.loadTexts: pos60VdcSensorTable.setDescription("A table of 60Vdc sensors")
pos60VdcSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 33, 1)).setIndexNames((0, "GEIST-MIB-V3", "pos60VdcSensorIndex"))
if mibBuilder.loadTexts: pos60VdcSensorEntry.setDescription("Entry in the 60Vdc sensor table: each entry contains\nan index (pos60VdcSensorIndex) and other sensor details")
pos60VdcSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: pos60VdcSensorIndex.setDescription("Table entry index value")
pos60VdcSensorSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 33, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos60VdcSensorSerial.setDescription("Serial Number")
pos60VdcSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 33, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos60VdcSensorName.setDescription("Friendly Name")
pos60VdcSensorAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 33, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos60VdcSensorAvail.setDescription("Is device currently plugged in?")
pos60VdcSensorVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 33, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-10, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pos60VdcSensorVoltage.setDescription("60Vdc Sensor value")
ctrl2CirTotTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 34))
if mibBuilder.loadTexts: ctrl2CirTotTable.setDescription("A table of a 3 phase outlet control (IEC)")
ctrl2CirTotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1)).setIndexNames((0, "GEIST-MIB-V3", "ctrl2CirTotIndex"))
if mibBuilder.loadTexts: ctrl2CirTotEntry.setDescription("Entry in the 3 phase outlet control table: each entry contains\nan index (ctrl2CirTotIndex) and other outlet control monitoring details")
ctrl2CirTotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: ctrl2CirTotIndex.setDescription("Table entry index value")
ctrl2CirTotSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotSerial.setDescription("Serial Number")
ctrl2CirTotName = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotName.setDescription("Friendly Name")
ctrl2CirTotAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotAvail.setDescription("Is device currently plugged in?")
ctrl2CirTotkWattHrsTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotkWattHrsTot.setDescription("Current Reading for kWatt-Hours (Total)")
ctrl2CirTotVoltsTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotVoltsTot.setDescription("Current reading for Volts (Total)")
ctrl2CirTotVoltPeakTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotVoltPeakTot.setDescription("Current reading for Peak-Volts (Total)")
ctrl2CirTotDeciAmpsTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotDeciAmpsTot.setDescription("Current reading for DeciAmps (Total)")
ctrl2CirTotDeciAmpsPeakTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotDeciAmpsPeakTot.setDescription("Current reading for Peak-DeciAmps (Total)")
ctrl2CirTotRealPowerTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotRealPowerTot.setDescription("Current reading for Real Power (Total)")
ctrl2CirTotApparentPowerTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotApparentPowerTot.setDescription("Current reading for Apparent Power (Total)")
ctrl2CirTotPowerFactorTot = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotPowerFactorTot.setDescription("Current reading for Power Factor (Total)")
ctrl2CirTotkWattHrsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotkWattHrsA.setDescription("Current Reading for kWatt-Hours (Phase A)")
ctrl2CirTotVoltsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotVoltsA.setDescription("Current reading for Volts (Phase A)")
ctrl2CirTotVoltPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotVoltPeakA.setDescription("Current reading for Peak-Volts (Phase A)")
ctrl2CirTotDeciAmpsA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotDeciAmpsA.setDescription("Current reading for DeciAmps (Phase A)")
ctrl2CirTotDeciAmpsPeakA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotDeciAmpsPeakA.setDescription("Current reading for Peak-DeciAmps (Phase A)")
ctrl2CirTotRealPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotRealPowerA.setDescription("Current reading for Real Power (Phase A)")
ctrl2CirTotApparentPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotApparentPowerA.setDescription("Current reading for Apparent Power (Phase A)")
ctrl2CirTotPowerFactorA = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotPowerFactorA.setDescription("Current reading for Power Factor (Phase A)")
ctrl2CirTotkWattHrsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotkWattHrsB.setDescription("Current Reading for kWatt-Hours (Phase B)")
ctrl2CirTotVoltsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotVoltsB.setDescription("Current reading for Volts (Phase B)")
ctrl2CirTotVoltPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotVoltPeakB.setDescription("Current reading for Peak-Volts (Phase B)")
ctrl2CirTotDeciAmpsB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotDeciAmpsB.setDescription("Current reading for DeciAmps (Phase B)")
ctrl2CirTotDeciAmpsPeakB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotDeciAmpsPeakB.setDescription("Current reading for Peak-DeciAmps (Phase B)")
ctrl2CirTotRealPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotRealPowerB.setDescription("Current reading for Real Power (Phase B)")
ctrl2CirTotApparentPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotApparentPowerB.setDescription("Current reading for Apparent Power (Phase B)")
ctrl2CirTotPowerFactorB = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 34, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrl2CirTotPowerFactorB.setDescription("Current reading for Power Factor (Phase B)")
sc10Table = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 35))
if mibBuilder.loadTexts: sc10Table.setDescription("SC10 sensors (internal measurements for SC10 units)")
sc10Entry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1)).setIndexNames((0, "GEIST-MIB-V3", "sc10Index"))
if mibBuilder.loadTexts: sc10Entry.setDescription("Entry in the sc10 table: each entry contains\nan index (sc10Index) and other details")
sc10Index = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: sc10Index.setDescription("Table entry index value")
sc10Serial = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10Serial.setDescription("Serial Number")
sc10Name = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10Name.setDescription("Friendly Name")
sc10Avail = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10Avail.setDescription("Is device currently plugged in?")
sc10ControlMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 5), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("setpoint", 0), ("capacity", 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10ControlMode.setDescription("Control Mode setting indicator")
sc10SetpointC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10SetpointC.setDescription("Current temperature set point in C")
sc10SetpointF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10SetpointF.setDescription("Current temperature set point in F")
sc10TempC = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10TempC.setDescription("Current internal temperature reading in C")
sc10TempF = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 212))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10TempF.setDescription("Current internal temperature reading in F")
sc10Capacity = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 35, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc10Capacity.setDescription("Current capacity for Fan Speed")
alarmSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 2, 101))
alarmCfgTable = MibTable((1, 3, 6, 1, 4, 1, 21239, 2, 101, 1))
if mibBuilder.loadTexts: alarmCfgTable.setDescription("Provides access for alarm configuration. Each row represents an alarm.")
alarmCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21239, 2, 101, 1, 1)).setIndexNames((0, "GEIST-MIB-V3", "alarmCfgIndex"))
if mibBuilder.loadTexts: alarmCfgEntry.setDescription("Entry in the alarm cfg table: each entry contains\nan index (alarmCfgIndex) and other details")
alarmCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 101, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("noaccess")
if mibBuilder.loadTexts: alarmCfgIndex.setDescription("Table entry index value. Provides unique ID for\nalarm, numbered from 1 to 200")
alarmCfgReadingID = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 101, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmCfgReadingID.setDescription("OID of a particular measurement to monitor. This object\nis also used to create or delete a row. To create a new\nrow, set the Sensor ID on a row that doesn't exist. Set\nthe ReadingID to 0.0 to destroy a row.")
alarmCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 101, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmCfgThreshold.setDescription("Depending on TripSelect this value acts as an upper or\nlower boundary for the sensor value. The value is in\nunits of tenths. \nSNMP Threshold = Actual Value * 10\nExample: 45 Threshold = 4.5 Amps")
alarmCfgTripSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 21239, 2, 101, 1, 1, 4), Integer().subtype(subtypeSpec=SingleValueConstraint(0,1,)).subtype(namedValues=NamedValues(("tripBelow", 0), ("tripAbove", 1), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: alarmCfgTripSelect.setDescription("Tells if alarm trips above or below the threshold value")
gstTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 2, 32767))
gstTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0))

# Augmentions

# Notifications

gstTestNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10101)).setObjects(*() )
if mibBuilder.loadTexts: gstTestNOTIFY.setDescription("Test SNMP Trap")
gstClimateTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10205)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateTempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateTempCNOTIFY.setDescription("Climate Temperature Sensor Trap")
gstClimateTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10206)).setObjects(*(("GEIST-MIB-V3", "climateTempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateTempFNOTIFY.setDescription("Climate Temperature Sensor Trap")
gstClimateHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10207)).setObjects(*(("GEIST-MIB-V3", "climateHumidity"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateHumidityNOTIFY.setDescription("Climate Humidity Sensor Trap")
gstClimateLightNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10208)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateLight"), ) )
if mibBuilder.loadTexts: gstClimateLightNOTIFY.setDescription("Climate Light Sensor Trap")
gstClimateAirflowNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10209)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateAirflow"), ) )
if mibBuilder.loadTexts: gstClimateAirflowNOTIFY.setDescription("Climate Air Flow Sensor Trap")
gstClimateSoundNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10210)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateSound"), ) )
if mibBuilder.loadTexts: gstClimateSoundNOTIFY.setDescription("Climate Sound Sensor Trap")
gstClimateIO1NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10211)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateIO1"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateIO1NOTIFY.setDescription("Climate IO1 Sensor Trap")
gstClimateIO2NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10212)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateIO2"), ) )
if mibBuilder.loadTexts: gstClimateIO2NOTIFY.setDescription("Climate IO2 Sensor Trap")
gstClimateIO3NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10213)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateIO3"), ) )
if mibBuilder.loadTexts: gstClimateIO3NOTIFY.setDescription("Climate IO3 Sensor Trap")
gstClimateVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10214)).setObjects(*(("GEIST-MIB-V3", "climateVolts"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateVoltsNOTIFY.setDescription("Climate Volts Trap")
gstClimateVoltPeakNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10215)).setObjects(*(("GEIST-MIB-V3", "climateVoltPeak"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateVoltPeakNOTIFY.setDescription("Climate Volts Peak Trap")
gstClimateDeciAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10216)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpsANOTIFY.setDescription("Climate Amps A Trap")
gstClimateDeciAmpPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10217)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpPeakA"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpPeakANOTIFY.setDescription("Climate Amp Peak A Trap")
gstClimateRealPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10218)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRealPowerA"), ) )
if mibBuilder.loadTexts: gstClimateRealPowerANOTIFY.setDescription("Climate Real Power A Trap")
gstClimateApparentPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10219)).setObjects(*(("GEIST-MIB-V3", "climateApparentPowerA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateApparentPowerANOTIFY.setDescription("Climate Apparent Power A Trap")
gstClimatePowerFactorANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10220)).setObjects(*(("GEIST-MIB-V3", "climatePowerFactorA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimatePowerFactorANOTIFY.setDescription("Climate Power Factor A Trap")
gstClimateDeciAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10221)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpsBNOTIFY.setDescription("Climate Amps B Trap")
gstClimateDeciAmpPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10222)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "climateDeciAmpPeakB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpPeakBNOTIFY.setDescription("Climate Amp Peak B Trap")
gstClimateRealPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10223)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRealPowerB"), ) )
if mibBuilder.loadTexts: gstClimateRealPowerBNOTIFY.setDescription("Climate Real Power B Trap")
gstClimateApparentPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10224)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateApparentPowerB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateApparentPowerBNOTIFY.setDescription("Climate Apparent Power B Trap")
gstClimatePowerFactorBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10225)).setObjects(*(("GEIST-MIB-V3", "climatePowerFactorB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimatePowerFactorBNOTIFY.setDescription("Climate Power Factor B Trap")
gstClimateDeciAmpsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10226)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpsC"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpsCNOTIFY.setDescription("Climate Amps C Trap")
gstClimateDeciAmpPeakCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10227)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "climateDeciAmpPeakC"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpPeakCNOTIFY.setDescription("Climate Amp Peak C Trap")
gstClimateRealPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10228)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRealPowerC"), ) )
if mibBuilder.loadTexts: gstClimateRealPowerCNOTIFY.setDescription("Climate Real Power C Trap")
gstClimateApparentPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10229)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateApparentPowerC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateApparentPowerCNOTIFY.setDescription("Climate Apparent Power C Trap")
gstClimatePowerFactorCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10230)).setObjects(*(("GEIST-MIB-V3", "climatePowerFactorC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimatePowerFactorCNOTIFY.setDescription("Climate Power Factor C Trap")
gstClimateDewPointCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10231)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDewPointC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateDewPointCNOTIFY.setDescription("Climate Dew Point Sensor Trap")
gstClimateDewPointFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10232)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDewPointF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateDewPointFNOTIFY.setDescription("Climate Dew Point Sensor Trap")
gstPowMonkWattHrsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonkWattHrs"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonkWattHrsNOTIFY.setDescription("Kilo Watt Hours Trap")
gstPowMonVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10306)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonVolts"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltsNOTIFY.setDescription("Volts Trap")
gstPowMonVoltMaxNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10307)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonVoltMax"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltMaxNOTIFY.setDescription("Volts Max Trap")
gstPowMonVoltMinNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10308)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powMonVoltMin"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltMinNOTIFY.setDescription("Volts Min Trap")
gstPowMonVoltPeakNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10309)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonVoltPeak"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltPeakNOTIFY.setDescription("Volt Peak Trap")
gstPowMonDeciAmpsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10310)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonDeciAmps"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonDeciAmpsNOTIFY.setDescription("DeciAmps Trap")
gstPowMonRealPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10311)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonRealPower"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonRealPowerNOTIFY.setDescription("Real Power Trap")
gstPowMonApparentPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10312)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powMonApparentPower"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonApparentPowerNOTIFY.setDescription("Apparent Power Trap")
gstPowMonPowerFactorNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10313)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonPowerFactor"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonPowerFactorNOTIFY.setDescription("Power Factor Trap")
gstPowMonOutlet1NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10314)).setObjects(*(("GEIST-MIB-V3", "powMonOutlet1"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet1NOTIFY.setDescription("Outlet 1 Clear Trap")
gstPowMonOutlet2NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10315)).setObjects(*(("GEIST-MIB-V3", "powMonOutlet2"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet2NOTIFY.setDescription("Outlet 2 Clear Trap")
gstPowMonOutlet1StatusTimeNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10316)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powMonOutlet1StatusTime"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet1StatusTimeNOTIFY.setDescription("Outlet1StatusTime Trip Trap")
gstPowMonOutlet2StatusTimeNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10317)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ("GEIST-MIB-V3", "powMonOutlet2StatusTime"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet2StatusTimeNOTIFY.setDescription("Outlet2StatusTime Trip Trap")
gstTempSensorTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "tempSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "tempSensorName"), ) )
if mibBuilder.loadTexts: gstTempSensorTempCNOTIFY.setDescription("Remote Temp Sensor - Temperature Trap")
gstTempSensorTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10406)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "tempSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "tempSensorName"), ) )
if mibBuilder.loadTexts: gstTempSensorTempFNOTIFY.setDescription("Remote Temp Sensor - Temperature Trap")
gstAirFlowSensorTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10505)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "airFlowSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorTempCNOTIFY.setDescription("Remote Air Flow Sensor - Temperature Trap")
gstAirFlowSensorTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10506)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "airFlowSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorTempFNOTIFY.setDescription("Remote Air Flow Sensor - Temperature Trap")
gstAirFlowSensorFlowNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10507)).setObjects(*(("GEIST-MIB-V3", "airFlowSensorFlow"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorFlowNOTIFY.setDescription("Remote Air Flow Sensor - Air Flow Trap")
gstAirFlowSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10508)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorHumidity"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorHumidityNOTIFY.setDescription("Remote Air Flow Sensor - Humidity")
gstAirFlowSensorDewPointCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10509)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "airFlowSensorDewPointC"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorDewPointCNOTIFY.setDescription("Remote Air Flow Sensor - Dew Point Trap")
gstAirFlowSensorDewPointFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10510)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "airFlowSensorDewPointF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorDewPointFNOTIFY.setDescription("Remote Air Flow Sensor - Dew Point Trap")
gstCtrl3ChDELTADeciAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10606)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTADeciAmpsA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTADeciAmpsANOTIFY.setDescription("Deciamps A Trap")
gstCtrl3ChDELTADeciAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10607)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTADeciAmpsB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTADeciAmpsBNOTIFY.setDescription("Deciamps B Trap")
gstCtrl3ChDELTADeciAmpsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10608)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTADeciAmpsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTADeciAmpsCNOTIFY.setDescription("Deciamps C Trap")
gstCtrl3ChDELTAkWattHrsTotalNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10609)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsTotal"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsTotalNOTIFY.setDescription("Kilo Watt Hours Total Trap")
gstCtrl3ChDELTARealPowerTotalNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10610)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTARealPowerTotal"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerTotalNOTIFY.setDescription("Watts Total Trap")
gstCtrl3ChDELTAkWattHrsABNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10611)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsAB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsABNOTIFY.setDescription("Kilo Watt Hours A Trap")
gstCtrl3ChDELTAVoltsABNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10612)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltsAB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltsABNOTIFY.setDescription("Volts AB Trap")
gstCtrl3ChDELTAVoltPeakABNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10613)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTAVoltPeakAB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltPeakABNOTIFY.setDescription("Volts Peak AB Trap")
gstCtrl3ChDELTARealPowerABNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10614)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChDELTARealPowerAB"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerABNOTIFY.setDescription("Real Power AB Trap")
gstCtrl3ChDELTAApparentPowerABNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10615)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "ctrl3ChDELTAApparentPowerAB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAApparentPowerABNOTIFY.setDescription("VoltAmps AB Trap")
gstCtrl3ChDELTAPowerFactorABNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10616)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAPowerFactorAB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAPowerFactorABNOTIFY.setDescription("Power Factor AB Trap")
gstCtrl3ChDELTAkWattHrsBCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10617)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsBC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsBCNOTIFY.setDescription("Kilo Watt Hours BC Trap")
gstCtrl3ChDELTAVoltsBCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10618)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltsBC"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltsBCNOTIFY.setDescription("Volts BC Trap")
gstCtrl3ChDELTAVoltPeakBCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10619)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltPeakBC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltPeakBCNOTIFY.setDescription("Volts Peak BC Trap")
gstCtrl3ChDELTARealPowerBCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10620)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTARealPowerBC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerBCNOTIFY.setDescription("Real Power BC Trap")
gstCtrl3ChDELTAApparentPowerBCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10621)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTAApparentPowerBC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAApparentPowerBCNOTIFY.setDescription("VoltAmps BC Trap")
gstCtrl3ChDELTAPowerFactorBCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10622)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAPowerFactorBC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAPowerFactorBCNOTIFY.setDescription("Power Factor BC Trap")
gstCtrl3ChDELTAkWattHrsCANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10623)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsCA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsCANOTIFY.setDescription("Kilo Watt Hours CA Trap")
gstCtrl3ChDELTAVoltsCANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10624)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltsCA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltsCANOTIFY.setDescription("Volts CA Trap")
gstCtrl3ChDELTAVoltPeakCANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10625)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltPeakCA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltPeakCANOTIFY.setDescription("Volts Peak CA Trap")
gstCtrl3ChDELTARealPowerCANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10626)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTARealPowerCA"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerCANOTIFY.setDescription("Real Power CA Trap")
gstCtrl3ChDELTAApparentPowerCANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10627)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChDELTAApparentPowerCA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAApparentPowerCANOTIFY.setDescription("VoltAmps CA Trap")
gstCtrl3ChDELTAPowerFactorCANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10628)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAPowerFactorCA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAPowerFactorCANOTIFY.setDescription("Power Factor CA Trap")
gstDoorSensorStatusNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10705)).setObjects(*(("GEIST-MIB-V3", "doorSensorName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "doorSensorStatus"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDoorSensorStatusNOTIFY.setDescription("Door sensor Trap")
gstWaterSensorDampnessNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10805)).setObjects(*(("GEIST-MIB-V3", "waterSensorDampness"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "waterSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstWaterSensorDampnessNOTIFY.setDescription("Water sensor Trap")
gstCurrentMonitorDeciAmpsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 10905)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "currentMonitorDeciAmps"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "currentMonitorName"), ) )
if mibBuilder.loadTexts: gstCurrentMonitorDeciAmpsNOTIFY.setDescription("Current Monitor Amps Trap")
gstMillivoltMonitorMVNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11005)).setObjects(*(("GEIST-MIB-V3", "millivoltMonitorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "millivoltMonitorMV"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstMillivoltMonitorMVNOTIFY.setDescription("Millivolt Monitor Trap")
gstPow3ChkWattHrsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11105)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChkWattHrsA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsANOTIFY.setDescription("Kilo Watt Hours A Trap")
gstPow3ChVoltsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11106)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltsA"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltsANOTIFY.setDescription("Volts A Trap")
gstPow3ChVoltMaxANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11107)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "pow3ChVoltMaxA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMaxANOTIFY.setDescription("Volts Max A Trap")
gstPow3ChVoltMinANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11108)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMinA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMinANOTIFY.setDescription("Volts Min A Trap")
gstPow3ChVoltPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11109)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltPeakA"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltPeakANOTIFY.setDescription("Volt Peak A Trap")
gstPow3ChDeciAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11110)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChDeciAmpsA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChDeciAmpsANOTIFY.setDescription("Deciamps A Trap")
gstPow3ChRealPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11111)).setObjects(*(("GEIST-MIB-V3", "pow3ChRealPowerA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerANOTIFY.setDescription("Real Power A Trap")
gstPow3ChApparentPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11112)).setObjects(*(("GEIST-MIB-V3", "pow3ChApparentPowerA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChApparentPowerANOTIFY.setDescription("Apparent Power A Trap")
gstPow3ChPowerFactorANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11113)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChPowerFactorA"), ) )
if mibBuilder.loadTexts: gstPow3ChPowerFactorANOTIFY.setDescription("Power Factor A Trap")
gstPow3ChkWattHrsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11114)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChkWattHrsB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsBNOTIFY.setDescription("Kilo Watt Hours B Trap")
gstPow3ChVoltsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11115)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChVoltsB"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltsBNOTIFY.setDescription("Volts B Trap")
gstPow3ChVoltMaxBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11116)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMaxB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMaxBNOTIFY.setDescription("Volts Max B Trap")
gstPow3ChVoltMinBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11117)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMinB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMinBNOTIFY.setDescription("Volts Min B Trap")
gstPow3ChVoltPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11118)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltPeakB"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltPeakBNOTIFY.setDescription("Volt Peak B Trap")
gstPow3ChDeciAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11119)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChDeciAmpsB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChDeciAmpsBNOTIFY.setDescription("Deciamps B Trap")
gstPow3ChRealPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11120)).setObjects(*(("GEIST-MIB-V3", "pow3ChRealPowerB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerBNOTIFY.setDescription("Real Power B Trap")
gstPow3ChApparentPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11121)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChApparentPowerB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChApparentPowerBNOTIFY.setDescription("Apparent Power B Trap")
gstPow3ChPowerFactorBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11122)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChPowerFactorB"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChPowerFactorBNOTIFY.setDescription("Power Factor B Trap")
gstPow3ChkWattHrsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11123)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChkWattHrsC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsCNOTIFY.setDescription("Kilo Watt Hours C Trap")
gstPow3ChVoltsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11124)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltsC"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltsCNOTIFY.setDescription("Volts C Trap")
gstPow3ChVoltMaxCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11125)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltMaxC"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMaxCNOTIFY.setDescription("Volts Max C Trap")
gstPow3ChVoltMinCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11126)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMinC"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMinCNOTIFY.setDescription("Volts Min C Trap")
gstPow3ChVoltPeakCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11127)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltPeakC"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltPeakCNOTIFY.setDescription("Volt Peak C Trap")
gstPow3ChDeciAmpsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11128)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChDeciAmpsC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChDeciAmpsCNOTIFY.setDescription("Deciamps C Trap")
gstPow3ChRealPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11129)).setObjects(*(("GEIST-MIB-V3", "pow3ChRealPowerC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerCNOTIFY.setDescription("Real Power C Trap")
gstPow3ChApparentPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11130)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChApparentPowerC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChApparentPowerCNOTIFY.setDescription("Apparent Power C Trap")
gstPow3ChPowerFactorCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11131)).setObjects(*(("GEIST-MIB-V3", "pow3ChPowerFactorC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChPowerFactorCNOTIFY.setDescription("Power Factor C Trap")
gstPow3ChkWattHrsTotalNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11132)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChkWattHrsTotal"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsTotalNOTIFY.setDescription("Kilo Watt Hours Total Trap")
gstPow3ChRealPowerTotalNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11133)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChRealPowerTotal"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerTotalNOTIFY.setDescription("Real Power Total Trap")
gstOutlet1StatusNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11205)).setObjects(*(("GEIST-MIB-V3", "outlet1Status"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "outletName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstOutlet1StatusNOTIFY.setDescription("Outlet 1 Status Trap")
gstOutlet2StatusNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11206)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "outletName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "outlet2Status"), ) )
if mibBuilder.loadTexts: gstOutlet2StatusNOTIFY.setDescription("Outlet 2 Status Trap")
gstVsfcSetPointCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcSetPointC"), ) )
if mibBuilder.loadTexts: gstVsfcSetPointCNOTIFY.setDescription("Vsfc Temp Set Point Sensor Trap")
gstVsfcSetPointFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11306)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcSetPointF"), ) )
if mibBuilder.loadTexts: gstVsfcSetPointFNOTIFY.setDescription("Vsfc Temp Set Point Sensor Trap")
gstVsfcFanSpeedNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11307)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "vsfcFanSpeed"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstVsfcFanSpeedNOTIFY.setDescription("Vsfc Fan Speed Sensor Trap")
gstVsfcIntTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11308)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "vsfcIntTempC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcIntTempCNOTIFY.setDescription("Vsfc Internal Temp Sensor Trap")
gstVsfcIntTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11309)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcIntTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcIntTempFNOTIFY.setDescription("Vsfc Internal Temp Sensor Trap")
gstVsfcExt1TempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11310)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt1TempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt1TempCNOTIFY.setDescription("Vsfc External Temp 1 Sensor Trap")
gstVsfcExt1TempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11311)).setObjects(*(("GEIST-MIB-V3", "vsfcExt1TempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt1TempFNOTIFY.setDescription("Vsfc External Temp 1 Sensor Trap")
gstVsfcExt2TempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11312)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "vsfcExt2TempC"), ) )
if mibBuilder.loadTexts: gstVsfcExt2TempCNOTIFY.setDescription("Vsfc External Temp 2 Sensor Trap")
gstVsfcExt2TempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11313)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt2TempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt2TempFNOTIFY.setDescription("Vsfc External Temp 1 Sensor Trap")
gstVsfcExt3TempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11314)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt3TempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt3TempCNOTIFY.setDescription("Vsfc External Temp 3 Sensor Trap")
gstVsfcExt3TempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11315)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt3TempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt3TempFNOTIFY.setDescription("Vsfc External Temp 1 Sensor Trap")
gstVsfcExt4TempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11316)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "vsfcExt4TempC"), ) )
if mibBuilder.loadTexts: gstVsfcExt4TempCNOTIFY.setDescription("Vsfc External Temp 4 Sensor Trap")
gstVsfcExt4TempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11317)).setObjects(*(("GEIST-MIB-V3", "vsfcExt4TempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt4TempFNOTIFY.setDescription("Vsfc External Temp 1 Sensor Trap")
gstCtrl3ChVoltsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltsA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltsANOTIFY.setDescription("Volts A Trap")
gstCtrl3ChVoltPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11406)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltPeakA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltPeakANOTIFY.setDescription("Volts Peak A Trap")
gstCtrl3ChDeciAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11407)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsANOTIFY.setDescription("Deciamps A Trap")
gstCtrl3ChDeciAmpsPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11408)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsPeakA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsPeakANOTIFY.setDescription("Deciamps Peak A Trap")
gstCtrl3ChRealPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11409)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChRealPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChRealPowerANOTIFY.setDescription("Real Power A Trap")
gstCtrl3ChApparentPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11410)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChApparentPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChApparentPowerANOTIFY.setDescription("Apparent Power A Trap")
gstCtrl3ChPowerFactorANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11411)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChPowerFactorA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChPowerFactorANOTIFY.setDescription("Power Factor A Trap")
gstCtrl3ChVoltsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11412)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltsB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltsBNOTIFY.setDescription("Volts B Trap")
gstCtrl3ChVoltPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11413)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltPeakB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltPeakBNOTIFY.setDescription("Volts Peak B Trap")
gstCtrl3ChDeciAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11414)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsBNOTIFY.setDescription("Deciamps B Trap")
gstCtrl3ChDeciAmpsPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11415)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsPeakB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsPeakBNOTIFY.setDescription("Deciamps Peak B Trap")
gstCtrl3ChRealPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11416)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChRealPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChRealPowerBNOTIFY.setDescription("Real Power B Trap")
gstCtrl3ChApparentPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11417)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChApparentPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChApparentPowerBNOTIFY.setDescription("Apparent Power B Trap")
gstCtrl3ChPowerFactorBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11418)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChPowerFactorB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChPowerFactorBNOTIFY.setDescription("Power Factor B Trap")
gstCtrl3ChVoltsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11419)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltsCNOTIFY.setDescription("Volts C Trap")
gstCtrl3ChVoltPeakCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11420)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltPeakC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltPeakCNOTIFY.setDescription("Volts Peak C Trap")
gstCtrl3ChDeciAmpsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11421)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsCNOTIFY.setDescription("Deciamps C Trap")
gstCtrl3ChDeciAmpsPeakCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11422)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsPeakC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsPeakCNOTIFY.setDescription("Deciamps Peak C Trap")
gstCtrl3ChRealPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11423)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChRealPowerC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChRealPowerCNOTIFY.setDescription("Real Power C Trap")
gstCtrl3ChApparentPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11424)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChApparentPowerC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChApparentPowerCNOTIFY.setDescription("Apparent Power C Trap")
gstCtrl3ChPowerFactorCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11425)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChPowerFactorC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChPowerFactorCNOTIFY.setDescription("Power Factor C Trap")
gstCtrlGrpAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11505)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsA"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsANOTIFY.setDescription("Group A DeciAmps Trap")
gstCtrlGrpAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11506)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsB"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsBNOTIFY.setDescription("Group B DeciAmps Trap")
gstCtrlGrpAmpsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11507)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsC"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsCNOTIFY.setDescription("Group C DeciAmps Trap")
gstCtrlGrpAmpsDNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11508)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsD"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsDNOTIFY.setDescription("Group D DeciAmps Trap")
gstCtrlGrpAmpsENOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11509)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsE"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsENOTIFY.setDescription("Group E DeciAmps Trap")
gstCtrlGrpAmpsFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11510)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "ctrlGrpAmpsF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsFNOTIFY.setDescription("Group F DeciAmps Trap")
gstCtrlGrpAmpsGNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11511)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "ctrlGrpAmpsG"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsGNOTIFY.setDescription("Group G DeciAmps Trap")
gstCtrlGrpAmpsHNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11512)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsH"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsHNOTIFY.setDescription("Group H DeciAmps Trap")
gstCtrlGrpAmpsAVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11513)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsAVolts"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsAVoltsNOTIFY.setDescription("AVolts Trip Trap")
gstCtrlGrpAmpsBVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11514)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsBVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsBVoltsNOTIFY.setDescription("BVolts Trip Trap")
gstCtrlGrpAmpsCVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11515)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsCVolts"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsCVoltsNOTIFY.setDescription("CVolts Trip Trap")
gstCtrlGrpAmpsDVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11516)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "ctrlGrpAmpsDVolts"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsDVoltsNOTIFY.setDescription("DVolts Trip Trap")
gstCtrlGrpAmpsEVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11517)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsEVolts"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsEVoltsNOTIFY.setDescription("EVolts Trip Trap")
gstCtrlGrpAmpsFVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11518)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsFVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsFVoltsNOTIFY.setDescription("FVolts Trip Trap")
gstCtrlGrpAmpsGVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11519)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsGVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsGVoltsNOTIFY.setDescription("GVolts Trip Trap")
gstCtrlGrpAmpsHVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11520)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsHVolts"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsHVoltsNOTIFY.setDescription("HVolts Trip Trap")
gstCtrlGrpAmpsINOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11521)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsI"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsINOTIFY.setDescription("Group I DeciAmps Trap")
gstCtrlGrpAmpsJNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11522)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsJ"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsJNOTIFY.setDescription("Group J DeciAmps Trap")
gstCtrlGrpAmpsKNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11523)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsK"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsKNOTIFY.setDescription("Group K DeciAmps Trap")
gstCtrlGrpAmpsLNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11524)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsL"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsLNOTIFY.setDescription("Group L DeciAmps Trap")
gstCtrlGrpAmpsMNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11525)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsM"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsMNOTIFY.setDescription("Group M DeciAmps Trap")
gstCtrlGrpAmpsNNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11526)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrlGrpAmpsN"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsNNOTIFY.setDescription("Group N DeciAmps Trap")
gstCtrlGrpAmpsONOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11527)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrlGrpAmpsO"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsONOTIFY.setDescription("Group O DeciAmps Trap")
gstCtrlGrpAmpsPNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11528)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsP"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsPNOTIFY.setDescription("Group P DeciAmps Trap")
gstCtrlGrpAmpsIVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11529)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsIVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsIVoltsNOTIFY.setDescription("IVolts Trip Trap")
gstCtrlGrpAmpsJVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11530)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsJVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsJVoltsNOTIFY.setDescription("JVolts Trip Trap")
gstCtrlGrpAmpsKVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11531)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsKVolts"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsKVoltsNOTIFY.setDescription("KVolts Trip Trap")
gstCtrlGrpAmpsLVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11532)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrlGrpAmpsLVolts"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsLVoltsNOTIFY.setDescription("LVolts Trip Trap")
gstCtrlGrpAmpsMVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11533)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsMVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsMVoltsNOTIFY.setDescription("MVolts Trip Trap")
gstCtrlGrpAmpsNVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11534)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsNVolts"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsNVoltsNOTIFY.setDescription("NVolts Trip Trap")
gstCtrlGrpAmpsOVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11535)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsOVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsOVoltsNOTIFY.setDescription("OVolts Trip Trap")
gstCtrlGrpAmpsPVoltsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11536)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsPVolts"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsPVoltsNOTIFY.setDescription("PVolts Trip Trap")
gstCtrlOutletPendingNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11605)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletPending"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPendingNOTIFY.setDescription("Pending Trip Trap")
gstCtrlOutletDeciAmpsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11606)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlOutletDeciAmps"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletDeciAmpsNOTIFY.setDescription("Outlet DeciAmps Trap")
gstCtrlOutletGroupNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11607)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlOutletGroup"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletGroupNOTIFY.setDescription("Group Trip Trap")
gstCtrlOutletUpDelayNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11608)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletUpDelay"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletUpDelayNOTIFY.setDescription("UpDelay Trip Trap")
gstCtrlOutletDwnDelayNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11609)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletDwnDelay"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletDwnDelayNOTIFY.setDescription("DwnDelay Trip Trap")
gstCtrlOutletRbtDurationNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11610)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletRbtDuration"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletRbtDurationNOTIFY.setDescription("RbtDuration Trip Trap")
gstCtrlOutletURLNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11611)).setObjects(*(("GEIST-MIB-V3", "ctrlOutletURL"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletURLNOTIFY.setDescription("URL Trip Trap")
gstCtrlOutletPOAActionNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11612)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletPOAAction"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPOAActionNOTIFY.setDescription("POAAction Trip Trap")
gstCtrlOutletPOADelayNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11613)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlOutletPOADelay"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPOADelayNOTIFY.setDescription("POADelay Trip Trap")
gstCtrlOutletkWattHrsNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11614)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlOutletkWattHrs"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletkWattHrsNOTIFY.setDescription("kWattHrs Trip Trap")
gstCtrlOutletPowerNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11615)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlOutletPower"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPowerNOTIFY.setDescription("Power Trip Trap")
gstCtrlOutletRbtDelayNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11616)).setObjects(*(("GEIST-MIB-V3", "ctrlOutletRbtDelay"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletRbtDelayNOTIFY.setDescription("RbtDelay Trip Trap")
gstCtrlOutletStatusTimeNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11617)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlOutletStatusTime"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletStatusTimeNOTIFY.setDescription("StatusTime Trip Trap")
gstDewPointSensorTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11705)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorTempCNOTIFY.setDescription("Remote Dew Point Sensor - Temperature Trap")
gstDewPointSensorTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11706)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorTempFNOTIFY.setDescription("Remote Dew Point Sensor - Temperature Trap")
gstDewPointSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11707)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "dewPointSensorHumidity"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorHumidityNOTIFY.setDescription("Remote Dew Point Sensor - Humidity")
gstDewPointSensorDewPointCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11708)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "dewPointSensorDewPointC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorDewPointCNOTIFY.setDescription("Remote Dew Point Sensor - Dew Point Trap")
gstDewPointSensorDewPointFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11709)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorDewPointF"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorDewPointFNOTIFY.setDescription("Remote Dew Point Sensor - Dew Point Trap")
gstDigitalSensorDigitalNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11805)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "digitalSensorName"), ("GEIST-MIB-V3", "digitalSensorDigital"), ) )
if mibBuilder.loadTexts: gstDigitalSensorDigitalNOTIFY.setDescription("Digital sensor Trap")
gstDstsVoltsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11905)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "dstsVoltsA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsVoltsANOTIFY.setDescription("RMS Voltage of Side A Set Point Sensor Trap")
gstDstsDeciAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11906)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dstsDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstDstsDeciAmpsANOTIFY.setDescription("RMS Current of Side A Set Point Sensor Trap")
gstDstsVoltsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11907)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "dstsVoltsB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsVoltsBNOTIFY.setDescription("RMS Voltage of Side B Set Point Sensor Trap")
gstDstsDeciAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11908)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dstsDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstDstsDeciAmpsBNOTIFY.setDescription("RMS Current of Side B Set Point Sensor Trap")
gstDstsSourceAActiveNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11909)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "dstsSourceAActive"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsSourceAActiveNOTIFY.setDescription("Source A Active Set Point Sensor Trap")
gstDstsSourceBActiveNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11910)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "dstsSourceBActive"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsSourceBActiveNOTIFY.setDescription("Source B Active Set Point Sensor Trap")
gstDstsPowerStatusANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11911)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "dstsPowerStatusA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsPowerStatusANOTIFY.setDescription("Source A Power Qualilty Active Set Point Sensor Trap")
gstDstsPowerStatusBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11912)).setObjects(*(("GEIST-MIB-V3", "dstsPowerStatusB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsPowerStatusBNOTIFY.setDescription("Source B Power Qualilty Active Set Point Sensor Trap")
gstDstsSourceATempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11913)).setObjects(*(("GEIST-MIB-V3", "dstsSourceATempC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstDstsSourceATempCNOTIFY.setDescription("Source A Temp Sensor Trap")
gstDstsSourceBTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 11914)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dstsSourceBTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstDstsSourceBTempCNOTIFY.setDescription("Source B Temp Sensor Trap")
gstCpmSensorStatusNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12005)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "cpmSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "cpmSensorStatus"), ) )
if mibBuilder.loadTexts: gstCpmSensorStatusNOTIFY.setDescription("City Power sensor Trap")
gstSmokeAlarmStatusNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12105)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "smokeAlarmStatus"), ("GEIST-MIB-V3", "smokeAlarmName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSmokeAlarmStatusNOTIFY.setDescription("Smoke alarm Trap")
gstNeg48VdcSensorVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12205)).setObjects(*(("GEIST-MIB-V3", "neg48VdcSensorVoltage"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "neg48VdcSensorName"), ) )
if mibBuilder.loadTexts: gstNeg48VdcSensorVoltageNOTIFY.setDescription("-48Vdc Sensor Trap")
gstPos30VdcSensorVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "pos30VdcSensorName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pos30VdcSensorVoltage"), ) )
if mibBuilder.loadTexts: gstPos30VdcSensorVoltageNOTIFY.setDescription("30Vdc Sensor Trap")
gstAnalogSensorAnalogNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "analogSensorAnalog"), ("GEIST-MIB-V3", "analogSensorName"), ) )
if mibBuilder.loadTexts: gstAnalogSensorAnalogNOTIFY.setDescription("Analog Sensor Trap")
gstCtrl3ChIECkWattHrsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12505)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsANOTIFY.setDescription("Kilo Watt Hours A Trap")
gstCtrl3ChIECVoltsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12506)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChIECVoltsA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltsANOTIFY.setDescription("Volts A Trap")
gstCtrl3ChIECVoltPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12507)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECVoltPeakA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltPeakANOTIFY.setDescription("Volts Peak A Trap")
gstCtrl3ChIECDeciAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12508)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsANOTIFY.setDescription("Deciamps A Trap")
gstCtrl3ChIECDeciAmpsPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12509)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsPeakA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsPeakANOTIFY.setDescription("Deciamps Peak A Trap")
gstCtrl3ChIECRealPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12510)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECRealPowerA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerANOTIFY.setDescription("Real Power A Trap")
gstCtrl3ChIECApparentPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12511)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECApparentPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECApparentPowerANOTIFY.setDescription("Apparent Power A Trap")
gstCtrl3ChIECPowerFactorANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12512)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChIECPowerFactorA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECPowerFactorANOTIFY.setDescription("Power Factor A Trap")
gstCtrl3ChIECkWattHrsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12513)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsBNOTIFY.setDescription("Kilo Watt Hours B Trap")
gstCtrl3ChIECVoltsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12514)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECVoltsB"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltsBNOTIFY.setDescription("Volts B Trap")
gstCtrl3ChIECVoltPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12515)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECVoltPeakB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltPeakBNOTIFY.setDescription("Volts Peak B Trap")
gstCtrl3ChIECDeciAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12516)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsBNOTIFY.setDescription("Deciamps B Trap")
gstCtrl3ChIECDeciAmpsPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12517)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsPeakB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsPeakBNOTIFY.setDescription("Deciamps Peak B Trap")
gstCtrl3ChIECRealPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12518)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChIECRealPowerB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerBNOTIFY.setDescription("Real Power B Trap")
gstCtrl3ChIECApparentPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12519)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECApparentPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECApparentPowerBNOTIFY.setDescription("Apparent Power B Trap")
gstCtrl3ChIECPowerFactorBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12520)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECPowerFactorB"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECPowerFactorBNOTIFY.setDescription("Power Factor B Trap")
gstCtrl3ChIECkWattHrsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12521)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsCNOTIFY.setDescription("Kilo Watt Hours C Trap")
gstCtrl3ChIECVoltsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12522)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChIECVoltsC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltsCNOTIFY.setDescription("Volts C Trap")
gstCtrl3ChIECVoltPeakCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12523)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECVoltPeakC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltPeakCNOTIFY.setDescription("Volts Peak C Trap")
gstCtrl3ChIECDeciAmpsCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12524)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsCNOTIFY.setDescription("Deciamps C Trap")
gstCtrl3ChIECDeciAmpsPeakCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12525)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsPeakC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsPeakCNOTIFY.setDescription("Deciamps Peak C Trap")
gstCtrl3ChIECRealPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12526)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECRealPowerC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerCNOTIFY.setDescription("Real Power C Trap")
gstCtrl3ChIECApparentPowerCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12527)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECApparentPowerC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECApparentPowerCNOTIFY.setDescription("Apparent Power C Trap")
gstCtrl3ChIECPowerFactorCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12528)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChIECPowerFactorC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECPowerFactorCNOTIFY.setDescription("Power Factor C Trap")
gstCtrl3ChIECkWattHrsTotalNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12529)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsTotal"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsTotalNOTIFY.setDescription("Kilo Watt Hours Total Trap")
gstCtrl3ChIECRealPowerTotalNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12530)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECRealPowerTotal"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerTotalNOTIFY.setDescription("Watts Total Trap")
gstClimateRelayTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12605)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateRelayTempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateRelayTempCNOTIFY.setDescription("Climate Relay Temperature Sensor Trap")
gstClimateRelayTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12606)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayTempF"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateRelayTempFNOTIFY.setDescription("Climate Relay Temperature Sensor Trap")
gstClimateRelayIO1NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12607)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRelayIO1"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO1NOTIFY.setDescription("Climate Relay IO1 Sensor Trap")
gstClimateRelayIO2NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12608)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayIO2"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO2NOTIFY.setDescription("Climate Relay IO2 Sensor Trap")
gstClimateRelayIO3NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12609)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayIO3"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO3NOTIFY.setDescription("Climate Relay IO3 Sensor Trap")
gstClimateRelayIO4NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12610)).setObjects(*(("GEIST-MIB-V3", "climateRelayIO4"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO4NOTIFY.setDescription("Climate Relay IO4 Sensor Trap")
gstClimateRelayIO5NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12611)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateRelayIO5"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO5NOTIFY.setDescription("Climate Relay IO5 Sensor Trap")
gstClimateRelayIO6NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12612)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateRelayIO6"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO6NOTIFY.setDescription("Climate Relay IO6 Sensor Trap")
gstAirSpeedSwitchSensorAirSpeedNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 12805)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "airSpeedSwitchSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "airSpeedSwitchSensorAirSpeed"), ) )
if mibBuilder.loadTexts: gstAirSpeedSwitchSensorAirSpeedNOTIFY.setDescription("Air Speed Switch Trap")
gstIoExpanderIO1NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13037)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO1"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO1NOTIFY.setDescription("Climate Relay IO1 Sensor Trap")
gstIoExpanderIO2NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13038)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO2"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO2NOTIFY.setDescription("Climate Relay IO2 Sensor Trap")
gstIoExpanderIO3NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13039)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO3"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO3NOTIFY.setDescription("Climate Relay IO3 Sensor Trap")
gstIoExpanderIO4NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13040)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO4"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO4NOTIFY.setDescription("Climate Relay IO4 Sensor Trap")
gstIoExpanderIO5NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13041)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO5"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO5NOTIFY.setDescription("Climate Relay IO5 Sensor Trap")
gstIoExpanderIO6NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13042)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO6"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO6NOTIFY.setDescription("Climate Relay IO6 Sensor Trap")
gstIoExpanderIO7NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13043)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO7"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO7NOTIFY.setDescription("Climate Relay IO7 Sensor Trap")
gstIoExpanderIO8NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13044)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO8"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO8NOTIFY.setDescription("Climate Relay IO8 Sensor Trap")
gstIoExpanderIO9NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13045)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO9"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO9NOTIFY.setDescription("Climate Relay IO9 Sensor Trap")
gstIoExpanderIO10NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13046)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO10"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO10NOTIFY.setDescription("Climate Relay IO10 Sensor Trap")
gstIoExpanderIO11NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13047)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO11"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO11NOTIFY.setDescription("Climate Relay IO11 Sensor Trap")
gstIoExpanderIO12NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13048)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO12"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO12NOTIFY.setDescription("Climate Relay IO12 Sensor Trap")
gstIoExpanderIO13NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13049)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ioExpanderIO13"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO13NOTIFY.setDescription("Climate Relay IO13 Sensor Trap")
gstIoExpanderIO14NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13050)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO14"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO14NOTIFY.setDescription("Climate Relay IO14 Sensor Trap")
gstIoExpanderIO15NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13051)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO15"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO15NOTIFY.setDescription("Climate Relay IO15 Sensor Trap")
gstIoExpanderIO16NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13052)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO16"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO16NOTIFY.setDescription("Climate Relay IO16 Sensor Trap")
gstIoExpanderIO17NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13053)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO17"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO17NOTIFY.setDescription("Climate Relay IO17 Sensor Trap")
gstIoExpanderIO18NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13054)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO18"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO18NOTIFY.setDescription("Climate Relay IO18 Sensor Trap")
gstIoExpanderIO19NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13055)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO19"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO19NOTIFY.setDescription("Climate Relay IO19 Sensor Trap")
gstIoExpanderIO20NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13056)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO20"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO20NOTIFY.setDescription("Climate Relay IO20 Sensor Trap")
gstIoExpanderIO21NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13057)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO21"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO21NOTIFY.setDescription("Climate Relay IO21 Sensor Trap")
gstIoExpanderIO22NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13058)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO22"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO22NOTIFY.setDescription("Climate Relay IO22 Sensor Trap")
gstIoExpanderIO23NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13059)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO23"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO23NOTIFY.setDescription("Climate Relay IO23 Sensor Trap")
gstIoExpanderIO24NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13060)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO24"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO24NOTIFY.setDescription("Climate Relay IO24 Sensor Trap")
gstIoExpanderIO25NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13061)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO25"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO25NOTIFY.setDescription("Climate Relay IO25 Sensor Trap")
gstIoExpanderIO26NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13062)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO26"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO26NOTIFY.setDescription("Climate Relay IO26 Sensor Trap")
gstIoExpanderIO27NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13063)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO27"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO27NOTIFY.setDescription("Climate Relay IO27 Sensor Trap")
gstIoExpanderIO28NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13064)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO28"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO28NOTIFY.setDescription("Climate Relay IO28 Sensor Trap")
gstIoExpanderIO29NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13065)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO29"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO29NOTIFY.setDescription("Climate Relay IO29 Sensor Trap")
gstIoExpanderIO30NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13066)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO30"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO30NOTIFY.setDescription("Climate Relay IO30 Sensor Trap")
gstIoExpanderIO31NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13067)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO31"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO31NOTIFY.setDescription("Climate Relay IO31 Sensor Trap")
gstIoExpanderIO32NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13068)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO32"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO32NOTIFY.setDescription("Climate Relay IO32 Sensor Trap")
gstT3hdSensorIntTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13106)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorIntTempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntTempCNOTIFY.setDescription("T3HD - Internal Temperature C Trap")
gstT3hdSensorIntTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13107)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorIntTempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntTempFNOTIFY.setDescription("T3HD - Internal Temperature F Trap")
gstT3hdSensorIntHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13108)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorIntHumidity"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntHumidityNOTIFY.setDescription("T3HD - Internal Humidity Trap")
gstT3hdSensorIntDewPointCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13109)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "t3hdSensorIntDewPointC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntDewPointCNOTIFY.setDescription("T3HD - Internal Dew Point C Trap")
gstT3hdSensorIntDewPointFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13110)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorIntDewPointF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntDewPointFNOTIFY.setDescription("T3HD - Internal Dew Point F Trap")
gstT3hdSensorExt1TempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13113)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorExt1TempC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt1TempCNOTIFY.setDescription("T3HD - External 1 Temperature C Trap")
gstT3hdSensorExt1TempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13114)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorExt1TempF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt1TempFNOTIFY.setDescription("T3HD - External 1 Temperature F Trap")
gstT3hdSensorExt2TempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13117)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorExt2TempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt2TempCNOTIFY.setDescription("T3HD - External 2 Temperature C Trap")
gstT3hdSensorExt2TempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13118)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorExt2TempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt2TempFNOTIFY.setDescription("T3HD - External 2 Temperature F Trap")
gstThdSensorTempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13205)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorTempCNOTIFY.setDescription("THD - Temperature C Trap")
gstThdSensorTempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13206)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorTempFNOTIFY.setDescription("THD - Temperature F Trap")
gstThdSensorHumidityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13207)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "thdSensorHumidity"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstThdSensorHumidityNOTIFY.setDescription("THD - Humidity Trap")
gstThdSensorDewPointCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13208)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorDewPointC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorDewPointCNOTIFY.setDescription("THD - Dew Point C Trap")
gstThdSensorDewPointFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13209)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorDewPointF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorDewPointFNOTIFY.setDescription("THD - Dew Point F Trap")
gstPos60VdcSensorVoltageNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pos60VdcSensorName"), ("GEIST-MIB-V3", "pos60VdcSensorVoltage"), ) )
if mibBuilder.loadTexts: gstPos60VdcSensorVoltageNOTIFY.setDescription("60Vdc Sensor Trap")
gstCtrl2CirTotkWattHrsTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotkWattHrsTot"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotkWattHrsTotNOTIFY.setDescription("Kilo Watt Hours Total Trap")
gstCtrl2CirTotVoltsTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13406)).setObjects(*(("GEIST-MIB-V3", "ctrl2CirTotVoltsTot"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltsTotNOTIFY.setDescription("Volts A Trap")
gstCtrl2CirTotVoltPeakTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13407)).setObjects(*(("GEIST-MIB-V3", "ctrl2CirTotVoltPeakTot"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltPeakTotNOTIFY.setDescription("Volts Peak Total Trap")
gstCtrl2CirTotDeciAmpsTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13408)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsTot"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsTotNOTIFY.setDescription("Deciamps Total Trap")
gstCtrl2CirTotDeciAmpsPeakTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13409)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsPeakTot"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsPeakTotNOTIFY.setDescription("Deciamps Peak Total Trap")
gstCtrl2CirTotRealPowerTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13410)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotRealPowerTot"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotRealPowerTotNOTIFY.setDescription("Real Power Total Trap")
gstCtrl2CirTotApparentPowerTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13411)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotApparentPowerTot"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotApparentPowerTotNOTIFY.setDescription("Apparent Power Total Trap")
gstCtrl2CirTotPowerFactorTotNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13412)).setObjects(*(("GEIST-MIB-V3", "ctrl2CirTotPowerFactorTot"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotPowerFactorTotNOTIFY.setDescription("Power Factor Total Trap")
gstCtrl2CirTotkWattHrsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13413)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotkWattHrsA"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotkWattHrsANOTIFY.setDescription("Kilo Watt Hours A Trap")
gstCtrl2CirTotVoltsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13414)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotVoltsA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltsANOTIFY.setDescription("Volts A Trap")
gstCtrl2CirTotVoltPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13415)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotVoltPeakA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltPeakANOTIFY.setDescription("Volts Peak A Trap")
gstCtrl2CirTotDeciAmpsANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13416)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsANOTIFY.setDescription("Deciamps A Trap")
gstCtrl2CirTotDeciAmpsPeakANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13417)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsPeakA"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsPeakANOTIFY.setDescription("Deciamps Peak A Trap")
gstCtrl2CirTotRealPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13418)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotRealPowerA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotRealPowerANOTIFY.setDescription("Real Power A Trap")
gstCtrl2CirTotApparentPowerANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13419)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotApparentPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotApparentPowerANOTIFY.setDescription("Apparent Power A Trap")
gstCtrl2CirTotPowerFactorANOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13420)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotPowerFactorA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotPowerFactorANOTIFY.setDescription("Power Factor A Trap")
gstCtrl2CirTotkWattHrsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13421)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotkWattHrsB"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotkWattHrsBNOTIFY.setDescription("Kilo Watt Hours B Trap")
gstCtrl2CirTotVoltsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13422)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotVoltsB"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltsBNOTIFY.setDescription("Volts B Trap")
gstCtrl2CirTotVoltPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13423)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotVoltPeakB"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltPeakBNOTIFY.setDescription("Volts Peak B Trap")
gstCtrl2CirTotDeciAmpsBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13424)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsBNOTIFY.setDescription("Deciamps B Trap")
gstCtrl2CirTotDeciAmpsPeakBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13425)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsPeakB"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsPeakBNOTIFY.setDescription("Deciamps Peak B Trap")
gstCtrl2CirTotRealPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13426)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotRealPowerB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotRealPowerBNOTIFY.setDescription("Real Power B Trap")
gstCtrl2CirTotApparentPowerBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13427)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotApparentPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotApparentPowerBNOTIFY.setDescription("Apparent Power B Trap")
gstCtrl2CirTotPowerFactorBNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13428)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotPowerFactorB"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotPowerFactorBNOTIFY.setDescription("Power Factor B Trap")
gstSc10ControlModeNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13505)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "sc10ControlMode"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSc10ControlModeNOTIFY.setDescription("SC10 Control Mode Sensor Trap")
gstSc10SetpointCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13506)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "sc10SetpointC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSc10SetpointCNOTIFY.setDescription("SC10 Temp Set Point Sensor Trap")
gstSc10SetpointFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13507)).setObjects(*(("GEIST-MIB-V3", "sc10SetpointF"), ("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSc10SetpointFNOTIFY.setDescription("SC10 Temp Set Point Sensor Trap")
gstSc10TempCNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13508)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "sc10TempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstSc10TempCNOTIFY.setDescription("SC10 Internal Temp Sensor Trap")
gstSc10TempFNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13509)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "sc10TempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstSc10TempFNOTIFY.setDescription("SC10 Internal Temp Sensor Trap")
gstSc10CapacityNOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 13510)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "sc10Capacity"), ) )
if mibBuilder.loadTexts: gstSc10CapacityNOTIFY.setDescription("SC10 Fan Speed Sensor Trap")
gstClimateTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20205)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateTempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateTempCCLEAR.setDescription("Climate Temperature Sensor Clear Trap")
gstClimateTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20206)).setObjects(*(("GEIST-MIB-V3", "climateTempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateTempFCLEAR.setDescription("Climate Temperature Sensor Clear Trap")
gstClimateHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20207)).setObjects(*(("GEIST-MIB-V3", "climateHumidity"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateHumidityCLEAR.setDescription("Climate Humidity Sensor Clear Trap")
gstClimateLightCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20208)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateLight"), ) )
if mibBuilder.loadTexts: gstClimateLightCLEAR.setDescription("Climate Light Sensor Clear Trap")
gstClimateAirflowCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20209)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateAirflow"), ) )
if mibBuilder.loadTexts: gstClimateAirflowCLEAR.setDescription("Climate Air Flow Sensor Clear Trap")
gstClimateSoundCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20210)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateSound"), ) )
if mibBuilder.loadTexts: gstClimateSoundCLEAR.setDescription("Climate Sound Sensor Clear Trap")
gstClimateIO1CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20211)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateIO1"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateIO1CLEAR.setDescription("Climate IO1 Sensor Clear Trap")
gstClimateIO2CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20212)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateIO2"), ) )
if mibBuilder.loadTexts: gstClimateIO2CLEAR.setDescription("Climate IO2 Sensor Clear Trap")
gstClimateIO3CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20213)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateIO3"), ) )
if mibBuilder.loadTexts: gstClimateIO3CLEAR.setDescription("Climate IO3 Sensor Clear Trap")
gstClimateVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20214)).setObjects(*(("GEIST-MIB-V3", "climateVolts"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateVoltsCLEAR.setDescription("Climate Volts Clear Trap")
gstClimateVoltPeakCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20215)).setObjects(*(("GEIST-MIB-V3", "climateVoltPeak"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateVoltPeakCLEAR.setDescription("Climate Volts Peak Clear Trap")
gstClimateDeciAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20216)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpsACLEAR.setDescription("Climate Amps A Clear Trap")
gstClimateDeciAmpPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20217)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpPeakA"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpPeakACLEAR.setDescription("Climate Amp Peak A Clear Trap")
gstClimateRealPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20218)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRealPowerA"), ) )
if mibBuilder.loadTexts: gstClimateRealPowerACLEAR.setDescription("Climate Real Power A Clear Trap")
gstClimateApparentPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20219)).setObjects(*(("GEIST-MIB-V3", "climateApparentPowerA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateApparentPowerACLEAR.setDescription("Climate Apparent Power A Clear Trap")
gstClimatePowerFactorACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20220)).setObjects(*(("GEIST-MIB-V3", "climatePowerFactorA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimatePowerFactorACLEAR.setDescription("Climate Power Factor A Clear Trap")
gstClimateDeciAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20221)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpsBCLEAR.setDescription("Climate Amps B Clear Trap")
gstClimateDeciAmpPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20222)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "climateDeciAmpPeakB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpPeakBCLEAR.setDescription("Climate Amp Peak B Clear Trap")
gstClimateRealPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20223)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRealPowerB"), ) )
if mibBuilder.loadTexts: gstClimateRealPowerBCLEAR.setDescription("Climate Real Power B Clear Trap")
gstClimateApparentPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20224)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateApparentPowerB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateApparentPowerBCLEAR.setDescription("Climate Apparent Power B Clear Trap")
gstClimatePowerFactorBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20225)).setObjects(*(("GEIST-MIB-V3", "climatePowerFactorB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimatePowerFactorBCLEAR.setDescription("Climate Power Factor B Clear Trap")
gstClimateDeciAmpsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20226)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDeciAmpsC"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpsCCLEAR.setDescription("Climate Amps C Clear Trap")
gstClimateDeciAmpPeakCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20227)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "climateDeciAmpPeakC"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateDeciAmpPeakCCLEAR.setDescription("Climate Amp Peak C Clear Trap")
gstClimateRealPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20228)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRealPowerC"), ) )
if mibBuilder.loadTexts: gstClimateRealPowerCCLEAR.setDescription("Climate Real Power C Clear Trap")
gstClimateApparentPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20229)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateApparentPowerC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateApparentPowerCCLEAR.setDescription("Climate Apparent Power C Clear Trap")
gstClimatePowerFactorCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20230)).setObjects(*(("GEIST-MIB-V3", "climatePowerFactorC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimatePowerFactorCCLEAR.setDescription("Climate Power Factor C Clear Trap")
gstClimateDewPointCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20231)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDewPointC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateDewPointCCLEAR.setDescription("Climate Dew Point Sensor Clear Trap")
gstClimateDewPointFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20232)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateDewPointF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateDewPointFCLEAR.setDescription("Climate Dew Point Sensor Clear Trap")
gstPowMonkWattHrsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonkWattHrs"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonkWattHrsCLEAR.setDescription("Kilo Watt Hours Clear Trap")
gstPowMonVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20306)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonVolts"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltsCLEAR.setDescription("Volts Clear Trap")
gstPowMonVoltMaxCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20307)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonVoltMax"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltMaxCLEAR.setDescription("Volts Max Clear Trap")
gstPowMonVoltMinCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20308)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powMonVoltMin"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltMinCLEAR.setDescription("Volts Min Clear Trap")
gstPowMonVoltPeakCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20309)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonVoltPeak"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonVoltPeakCLEAR.setDescription("Volt Peak Clear Trap")
gstPowMonDeciAmpsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20310)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonDeciAmps"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonDeciAmpsCLEAR.setDescription("DeciAmps Clear Trap")
gstPowMonRealPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20311)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonRealPower"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonRealPowerCLEAR.setDescription("Real Power Clear Trap")
gstPowMonApparentPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20312)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powMonApparentPower"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonApparentPowerCLEAR.setDescription("Apparent Power Clear Trap")
gstPowMonPowerFactorCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20313)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonPowerFactor"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonPowerFactorCLEAR.setDescription("Power Factor Clear Trap")
gstPowMonOutlet1CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20314)).setObjects(*(("GEIST-MIB-V3", "powMonOutlet1"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet1CLEAR.setDescription("Outlet1 Clear Trap")
gstPowMonOutlet2CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20315)).setObjects(*(("GEIST-MIB-V3", "powMonOutlet2"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet2CLEAR.setDescription("Outlet2 Clear Trap")
gstPowMonOutlet1StatusTimeCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20316)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powMonOutlet1StatusTime"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet1StatusTimeCLEAR.setDescription("Outlet1StatusTime Clear Trap")
gstPowMonOutlet2StatusTimeCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20317)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powMonName"), ("GEIST-MIB-V3", "powMonOutlet2StatusTime"), ) )
if mibBuilder.loadTexts: gstPowMonOutlet2StatusTimeCLEAR.setDescription("Outlet2StatusTime Clear Trap")
gstTempSensorTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "tempSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "tempSensorName"), ) )
if mibBuilder.loadTexts: gstTempSensorTempCCLEAR.setDescription("Remote Temp Sensor - Temperature Clear Trap")
gstTempSensorTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20406)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "tempSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "tempSensorName"), ) )
if mibBuilder.loadTexts: gstTempSensorTempFCLEAR.setDescription("Remote Temp Sensor - Temperature Clear Trap")
gstAirFlowSensorTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20505)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "airFlowSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorTempCCLEAR.setDescription("Remote Air Flow Sensor - Temperature Clear Trap")
gstAirFlowSensorTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20506)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "airFlowSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorTempFCLEAR.setDescription("Remote Air Flow Sensor - Temperature Clear Trap")
gstAirFlowSensorFlowCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20507)).setObjects(*(("GEIST-MIB-V3", "airFlowSensorFlow"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorFlowCLEAR.setDescription("Remote Air Flow Sensor - Air Flow Clear Trap")
gstAirFlowSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20508)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorHumidity"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorHumidityCLEAR.setDescription("Remote Air Flow Sensor - Humidity Clear Trap")
gstAirFlowSensorDewPointCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20509)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "airFlowSensorDewPointC"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorDewPointCCLEAR.setDescription("Remote Air Flow Sensor - Dew Point Clear Trap")
gstAirFlowSensorDewPointFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20510)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "airFlowSensorDewPointF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "airFlowSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstAirFlowSensorDewPointFCLEAR.setDescription("Remote Air Flow Sensor - Dew Point Clear Trap")
gstCtrl3ChDELTADeciAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20606)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTADeciAmpsA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTADeciAmpsACLEAR.setDescription("Deciamps A Clear Trap")
gstCtrl3ChDELTADeciAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20607)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTADeciAmpsB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTADeciAmpsBCLEAR.setDescription("Deciamps B Clear Trap")
gstCtrl3ChDELTADeciAmpsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20608)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTADeciAmpsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTADeciAmpsCCLEAR.setDescription("Deciamps C Clear Trap")
gstCtrl3ChDELTAkWattHrsTotalCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20609)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsTotal"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsTotalCLEAR.setDescription("Kilo Watt Hours Total Clear Trap")
gstCtrl3ChDELTARealPowerTotalCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20610)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTARealPowerTotal"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerTotalCLEAR.setDescription("Watts Total Clear Trap")
gstCtrl3ChDELTAkWattHrsABCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20611)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsAB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsABCLEAR.setDescription("Kilo Watt Hours A Clear Trap")
gstCtrl3ChDELTAVoltsABCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20612)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltsAB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltsABCLEAR.setDescription("Volts AB Clear Trap")
gstCtrl3ChDELTAVoltPeakABCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20613)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTAVoltPeakAB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltPeakABCLEAR.setDescription("Volts Peak AB Clear Trap")
gstCtrl3ChDELTARealPowerABCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20614)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChDELTARealPowerAB"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerABCLEAR.setDescription("Real Power AB Clear Trap")
gstCtrl3ChDELTAApparentPowerABCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20615)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "ctrl3ChDELTAApparentPowerAB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAApparentPowerABCLEAR.setDescription("VoltAmps AB Clear Trap")
gstCtrl3ChDELTAPowerFactorABCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20616)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAPowerFactorAB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAPowerFactorABCLEAR.setDescription("Power Factor AB Clear Trap")
gstCtrl3ChDELTAkWattHrsBCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20617)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsBC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsBCCLEAR.setDescription("Kilo Watt Hours BC Clear Trap")
gstCtrl3ChDELTAVoltsBCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20618)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltsBC"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltsBCCLEAR.setDescription("Volts BC Clear Trap")
gstCtrl3ChDELTAVoltPeakBCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20619)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltPeakBC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltPeakBCCLEAR.setDescription("Volts Peak BC Clear Trap")
gstCtrl3ChDELTARealPowerBCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20620)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTARealPowerBC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerBCCLEAR.setDescription("Real Power BC Clear Trap")
gstCtrl3ChDELTAApparentPowerBCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20621)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTAApparentPowerBC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAApparentPowerBCCLEAR.setDescription("VoltAmps BC Clear Trap")
gstCtrl3ChDELTAPowerFactorBCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20622)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAPowerFactorBC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAPowerFactorBCCLEAR.setDescription("Power Factor BC Clear Trap")
gstCtrl3ChDELTAkWattHrsCACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20623)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAkWattHrsCA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAkWattHrsCACLEAR.setDescription("Kilo Watt Hours CA Clear Trap")
gstCtrl3ChDELTAVoltsCACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20624)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltsCA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltsCACLEAR.setDescription("Volts CA Clear Trap")
gstCtrl3ChDELTAVoltPeakCACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20625)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChDELTAVoltPeakCA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAVoltPeakCACLEAR.setDescription("Volts Peak CA Clear Trap")
gstCtrl3ChDELTARealPowerCACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20626)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDELTARealPowerCA"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTARealPowerCACLEAR.setDescription("Real Power CA Clear Trap")
gstCtrl3ChDELTAApparentPowerCACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20627)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChDELTAApparentPowerCA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAApparentPowerCACLEAR.setDescription("VoltAmps CA Clear Trap")
gstCtrl3ChDELTAPowerFactorCACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20628)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChDELTAName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChDELTAPowerFactorCA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDELTAPowerFactorCACLEAR.setDescription("Power Factor CA Clear Trap")
gstDoorSensorStatusCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20705)).setObjects(*(("GEIST-MIB-V3", "doorSensorName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "doorSensorStatus"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDoorSensorStatusCLEAR.setDescription("Door sensor Clear Trap")
gstWaterSensorDampnessCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20805)).setObjects(*(("GEIST-MIB-V3", "waterSensorDampness"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "waterSensorName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstWaterSensorDampnessCLEAR.setDescription("Water sensor Clear Trap")
gstCurrentMonitorDeciAmpsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 20905)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "currentMonitorDeciAmps"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "currentMonitorName"), ) )
if mibBuilder.loadTexts: gstCurrentMonitorDeciAmpsCLEAR.setDescription("Current Monitor Amps Clear Trap")
gstMillivoltMonitorMVCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21005)).setObjects(*(("GEIST-MIB-V3", "millivoltMonitorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "millivoltMonitorMV"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstMillivoltMonitorMVCLEAR.setDescription("Millivolt Monitor Clear Trap")
gstPow3ChkWattHrsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21105)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChkWattHrsA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsACLEAR.setDescription("Kilo Watt Hours A Clear Trap")
gstPow3ChVoltsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21106)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltsA"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltsACLEAR.setDescription("Volts A Clear Trap")
gstPow3ChVoltMaxACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21107)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "pow3ChVoltMaxA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMaxACLEAR.setDescription("Volts Max A Clear Trap")
gstPow3ChVoltMinACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21108)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMinA"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMinACLEAR.setDescription("Volts Min A Clear Trap")
gstPow3ChVoltPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21109)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltPeakA"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltPeakACLEAR.setDescription("Volt Peak A Clear Trap")
gstPow3ChDeciAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21110)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChDeciAmpsA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChDeciAmpsACLEAR.setDescription("Deciamps A Clear Trap")
gstPow3ChRealPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21111)).setObjects(*(("GEIST-MIB-V3", "pow3ChRealPowerA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerACLEAR.setDescription("Real Power A Clear Trap")
gstPow3ChApparentPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21112)).setObjects(*(("GEIST-MIB-V3", "pow3ChApparentPowerA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChApparentPowerACLEAR.setDescription("Apparent Power A Clear Trap")
gstPow3ChPowerFactorACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21113)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChPowerFactorA"), ) )
if mibBuilder.loadTexts: gstPow3ChPowerFactorACLEAR.setDescription("Power Factor A Clear Trap")
gstPow3ChkWattHrsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21114)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChkWattHrsB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsBCLEAR.setDescription("Kilo Watt Hours B Clear Trap")
gstPow3ChVoltsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21115)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChVoltsB"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltsBCLEAR.setDescription("Volts B Clear Trap")
gstPow3ChVoltMaxBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21116)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMaxB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMaxBCLEAR.setDescription("Volts Max B Clear Trap")
gstPow3ChVoltMinBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21117)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMinB"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMinBCLEAR.setDescription("Volts Min B Clear Trap")
gstPow3ChVoltPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21118)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltPeakB"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltPeakBCLEAR.setDescription("Volt Peak B Clear Trap")
gstPow3ChDeciAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21119)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChDeciAmpsB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChDeciAmpsBCLEAR.setDescription("Deciamps B Clear Trap")
gstPow3ChRealPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21120)).setObjects(*(("GEIST-MIB-V3", "pow3ChRealPowerB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerBCLEAR.setDescription("Real Power B Clear Trap")
gstPow3ChApparentPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21121)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChApparentPowerB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChApparentPowerBCLEAR.setDescription("Apparent Power B Clear Trap")
gstPow3ChPowerFactorBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21122)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChPowerFactorB"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChPowerFactorBCLEAR.setDescription("Power Factor B Clear Trap")
gstPow3ChkWattHrsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21123)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChkWattHrsC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsCCLEAR.setDescription("Kilo Watt Hours C Clear Trap")
gstPow3ChVoltsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21124)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltsC"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltsCCLEAR.setDescription("Volts C Clear Trap")
gstPow3ChVoltMaxCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21125)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltMaxC"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMaxCCLEAR.setDescription("Volts Max C Clear Trap")
gstPow3ChVoltMinCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21126)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChVoltMinC"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltMinCCLEAR.setDescription("Volts Min C Clear Trap")
gstPow3ChVoltPeakCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21127)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pow3ChVoltPeakC"), ) )
if mibBuilder.loadTexts: gstPow3ChVoltPeakCCLEAR.setDescription("Volt Peak C Clear Trap")
gstPow3ChDeciAmpsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21128)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChDeciAmpsC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChDeciAmpsCCLEAR.setDescription("Deciamps C Clear Trap")
gstPow3ChRealPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21129)).setObjects(*(("GEIST-MIB-V3", "pow3ChRealPowerC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerCCLEAR.setDescription("Real Power C Clear Trap")
gstPow3ChApparentPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21130)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "pow3ChApparentPowerC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChApparentPowerCCLEAR.setDescription("Apparent Power C Clear Trap")
gstPow3ChPowerFactorCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21131)).setObjects(*(("GEIST-MIB-V3", "pow3ChPowerFactorC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChPowerFactorCCLEAR.setDescription("Power Factor C Clear Trap")
gstPow3ChkWattHrsTotalCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21132)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChkWattHrsTotal"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChkWattHrsTotalCLEAR.setDescription("Kilo Watt Hours Total Clear Trap")
gstPow3ChRealPowerTotalCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21133)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "pow3ChName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "pow3ChRealPowerTotal"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstPow3ChRealPowerTotalCLEAR.setDescription("Real Power Total Clear Trap")
gstOutlet1StatusCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21205)).setObjects(*(("GEIST-MIB-V3", "outlet1Status"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "outletName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstOutlet1StatusCLEAR.setDescription("Outlet 1 Status Clear Trap")
gstOutlet2StatusCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21206)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "outletName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "outlet2Status"), ) )
if mibBuilder.loadTexts: gstOutlet2StatusCLEAR.setDescription("Outlet 2 Status Clear Trap")
gstVsfcSetPointCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcSetPointC"), ) )
if mibBuilder.loadTexts: gstVsfcSetPointCCLEAR.setDescription("Vsfc Temp Set Point Sensor Clear")
gstVsfcSetPointFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21306)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcSetPointF"), ) )
if mibBuilder.loadTexts: gstVsfcSetPointFCLEAR.setDescription("Vsfc Temp Set Point Sensor Clear")
gstVsfcFanSpeedCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21307)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "vsfcFanSpeed"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstVsfcFanSpeedCLEAR.setDescription("Vsfc Fan Speed Sensor Clear")
gstVsfcIntTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21308)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "vsfcIntTempC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcIntTempCCLEAR.setDescription("Vsfc Internal Temp Sensor Clear")
gstVsfcIntTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21309)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcIntTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcIntTempFCLEAR.setDescription("Vsfc Internal Temp Sensor Clear")
gstVsfcExt1TempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21310)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt1TempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt1TempCCLEAR.setDescription("Vsfc External Temp 1 Sensor Clear")
gstVsfcExt1TempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21311)).setObjects(*(("GEIST-MIB-V3", "vsfcExt1TempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt1TempFCLEAR.setDescription("Vsfc External Temp 1 Sensor Clear")
gstVsfcExt2TempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21312)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "vsfcExt2TempC"), ) )
if mibBuilder.loadTexts: gstVsfcExt2TempCCLEAR.setDescription("Vsfc External Temp 2 Sensor Clear")
gstVsfcExt2TempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21313)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt2TempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt2TempFCLEAR.setDescription("Vsfc External Temp 1 Sensor Clear")
gstVsfcExt3TempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21314)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt3TempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt3TempCCLEAR.setDescription("Vsfc External Temp 3 Sensor Clear")
gstVsfcExt3TempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21315)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "vsfcExt3TempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt3TempFCLEAR.setDescription("Vsfc External Temp 1 Sensor Clear")
gstVsfcExt4TempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21316)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "vsfcExt4TempC"), ) )
if mibBuilder.loadTexts: gstVsfcExt4TempCCLEAR.setDescription("Vsfc External Temp 4 Sensor Clear")
gstVsfcExt4TempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21317)).setObjects(*(("GEIST-MIB-V3", "vsfcExt4TempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "vsfcName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstVsfcExt4TempFCLEAR.setDescription("Vsfc External Temp 1 Sensor Clear")
gstCtrl3ChVoltsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltsA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltsACLEAR.setDescription("Volts A Clear Trap")
gstCtrl3ChVoltPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21406)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltPeakA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltPeakACLEAR.setDescription("Volts Peak A Clear Trap")
gstCtrl3ChDeciAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21407)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsACLEAR.setDescription("Deciamps A Clear Trap")
gstCtrl3ChDeciAmpsPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21408)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsPeakA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsPeakACLEAR.setDescription("Deciamps Peak A Clear Trap")
gstCtrl3ChRealPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21409)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChRealPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChRealPowerACLEAR.setDescription("Real Power A Clear Trap")
gstCtrl3ChApparentPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21410)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChApparentPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChApparentPowerACLEAR.setDescription("Apparent Power A Clear Trap")
gstCtrl3ChPowerFactorACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21411)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChPowerFactorA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChPowerFactorACLEAR.setDescription("Power Factor A Clear Trap")
gstCtrl3ChVoltsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21412)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltsB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltsBCLEAR.setDescription("Volts B Clear Trap")
gstCtrl3ChVoltPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21413)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltPeakB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltPeakBCLEAR.setDescription("Volts Peak B Clear Trap")
gstCtrl3ChDeciAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21414)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsBCLEAR.setDescription("Deciamps B Clear Trap")
gstCtrl3ChDeciAmpsPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21415)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsPeakB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsPeakBCLEAR.setDescription("Deciamps Peak B Clear Trap")
gstCtrl3ChRealPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21416)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChRealPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChRealPowerBCLEAR.setDescription("Real Power B Clear Trap")
gstCtrl3ChApparentPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21417)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChApparentPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChApparentPowerBCLEAR.setDescription("Apparent Power B Clear Trap")
gstCtrl3ChPowerFactorBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21418)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChPowerFactorB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChPowerFactorBCLEAR.setDescription("Power Factor B Clear Trap")
gstCtrl3ChVoltsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21419)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltsCCLEAR.setDescription("Volts C Clear Trap")
gstCtrl3ChVoltPeakCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21420)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChVoltPeakC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChVoltPeakCCLEAR.setDescription("Volts Peak C Clear Trap")
gstCtrl3ChDeciAmpsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21421)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsCCLEAR.setDescription("Deciamps C Clear Trap")
gstCtrl3ChDeciAmpsPeakCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21422)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChDeciAmpsPeakC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChDeciAmpsPeakCCLEAR.setDescription("Deciamps Peak C Clear Trap")
gstCtrl3ChRealPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21423)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChRealPowerC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChRealPowerCCLEAR.setDescription("Real Power C Clear Trap")
gstCtrl3ChApparentPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21424)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChApparentPowerC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChApparentPowerCCLEAR.setDescription("Apparent Power C Clear Trap")
gstCtrl3ChPowerFactorCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21425)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChPowerFactorC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrl3ChPowerFactorCCLEAR.setDescription("Power Factor C Clear Trap")
gstCtrlGrpAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21505)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsA"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsACLEAR.setDescription("Group A DeciAmps Clear Trap")
gstCtrlGrpAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21506)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsB"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsBCLEAR.setDescription("Group B DeciAmps Clear Trap")
gstCtrlGrpAmpsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21507)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsC"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsCCLEAR.setDescription("Group C DeciAmps Clear Trap")
gstCtrlGrpAmpsDCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21508)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsD"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsDCLEAR.setDescription("Group D DeciAmps Clear Trap")
gstCtrlGrpAmpsECLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21509)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsE"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsECLEAR.setDescription("Group E DeciAmps Clear Trap")
gstCtrlGrpAmpsFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21510)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "ctrlGrpAmpsF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsFCLEAR.setDescription("Group F DeciAmps Clear Trap")
gstCtrlGrpAmpsGCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21511)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "ctrlGrpAmpsG"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsGCLEAR.setDescription("Group G DeciAmps Clear Trap")
gstCtrlGrpAmpsHCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21512)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsH"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsHCLEAR.setDescription("Group H DeciAmps Clear Trap")
gstCtrlGrpAmpsAVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21513)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsAVolts"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsAVoltsCLEAR.setDescription("AVolts Clear Trap")
gstCtrlGrpAmpsBVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21514)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsBVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsBVoltsCLEAR.setDescription("BVolts Clear Trap")
gstCtrlGrpAmpsCVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21515)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsCVolts"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsCVoltsCLEAR.setDescription("CVolts Clear Trap")
gstCtrlGrpAmpsDVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21516)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "ctrlGrpAmpsDVolts"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsDVoltsCLEAR.setDescription("DVolts Clear Trap")
gstCtrlGrpAmpsEVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21517)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsEVolts"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsEVoltsCLEAR.setDescription("EVolts Clear Trap")
gstCtrlGrpAmpsFVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21518)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsFVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsFVoltsCLEAR.setDescription("FVolts Clear Trap")
gstCtrlGrpAmpsGVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21519)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsGVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsGVoltsCLEAR.setDescription("GVolts Clear Trap")
gstCtrlGrpAmpsHVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21520)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsHVolts"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsHVoltsCLEAR.setDescription("HVolts Clear Trap")
gstCtrlGrpAmpsICLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21521)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsI"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsICLEAR.setDescription("Group I DeciAmps Clear Trap")
gstCtrlGrpAmpsJCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21522)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsJ"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsJCLEAR.setDescription("Group J DeciAmps Clear Trap")
gstCtrlGrpAmpsKCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21523)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsK"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsKCLEAR.setDescription("Group K DeciAmps Clear Trap")
gstCtrlGrpAmpsLCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21524)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsL"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsLCLEAR.setDescription("Group L DeciAmps Clear Trap")
gstCtrlGrpAmpsMCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21525)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsM"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsMCLEAR.setDescription("Group M DeciAmps Clear Trap")
gstCtrlGrpAmpsNCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21526)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrlGrpAmpsN"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsNCLEAR.setDescription("Group N DeciAmps Clear Trap")
gstCtrlGrpAmpsOCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21527)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrlGrpAmpsO"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsOCLEAR.setDescription("Group O DeciAmps Clear Trap")
gstCtrlGrpAmpsPCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21528)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsP"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsPCLEAR.setDescription("Group P DeciAmps Clear Trap")
gstCtrlGrpAmpsIVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21529)).setObjects(*(("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsIVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsIVoltsCLEAR.setDescription("IVolts Clear Trap")
gstCtrlGrpAmpsJVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21530)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsJVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsJVoltsCLEAR.setDescription("JVolts Clear Trap")
gstCtrlGrpAmpsKVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21531)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlGrpAmpsKVolts"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsKVoltsCLEAR.setDescription("KVolts Clear Trap")
gstCtrlGrpAmpsLVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21532)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrlGrpAmpsLVolts"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsLVoltsCLEAR.setDescription("LVolts Clear Trap")
gstCtrlGrpAmpsMVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21533)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsMVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsMVoltsCLEAR.setDescription("MVolts Clear Trap")
gstCtrlGrpAmpsNVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21534)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsNVolts"), ("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsNVoltsCLEAR.setDescription("NVolts Clear Trap")
gstCtrlGrpAmpsOVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21535)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlGrpAmpsOVolts"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsOVoltsCLEAR.setDescription("OVolts Clear Trap")
gstCtrlGrpAmpsPVoltsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21536)).setObjects(*(("GEIST-MIB-V3", "ctrlGrpAmpsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlGrpAmpsPVolts"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstCtrlGrpAmpsPVoltsCLEAR.setDescription("PVolts Clear Trap")
gstCtrlOutletPendingCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21605)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletPending"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPendingCLEAR.setDescription("Pending Clear Trap")
gstCtrlOutletDeciAmpsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21606)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlOutletDeciAmps"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletDeciAmpsCLEAR.setDescription("Outlet DeciAmps Clear Trap")
gstCtrlOutletGroupCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21607)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlOutletGroup"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletGroupCLEAR.setDescription("Group Clear Trap")
gstCtrlOutletUpDelayCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21608)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletUpDelay"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletUpDelayCLEAR.setDescription("UpDelay Clear Trap")
gstCtrlOutletDwnDelayCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21609)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletDwnDelay"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletDwnDelayCLEAR.setDescription("DwnDelay Clear Trap")
gstCtrlOutletRbtDurationCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21610)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletRbtDuration"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletRbtDurationCLEAR.setDescription("RbtDuration Clear Trap")
gstCtrlOutletURLCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21611)).setObjects(*(("GEIST-MIB-V3", "ctrlOutletURL"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletURLCLEAR.setDescription("URL Clear Trap")
gstCtrlOutletPOAActionCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21612)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletPOAAction"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPOAActionCLEAR.setDescription("POAAction Clear Trap")
gstCtrlOutletPOADelayCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21613)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlOutletPOADelay"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPOADelayCLEAR.setDescription("POADelay Clear Trap")
gstCtrlOutletkWattHrsCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21614)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlOutletkWattHrs"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletkWattHrsCLEAR.setDescription("kWattHrs Clear Trap")
gstCtrlOutletPowerCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21615)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrlOutletPower"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletPowerCLEAR.setDescription("Power Clear Trap")
gstCtrlOutletRbtDelayCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21616)).setObjects(*(("GEIST-MIB-V3", "ctrlOutletRbtDelay"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletRbtDelayCLEAR.setDescription("RbtDelay Clear Trap")
gstCtrlOutletStatusTimeCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21617)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrlOutletStatusTime"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrlOutletStatus"), ) )
if mibBuilder.loadTexts: gstCtrlOutletStatusTimeCLEAR.setDescription("StatusTime Clear Trap")
gstDewPointSensorTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21705)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorTempCCLEAR.setDescription("Remote Dew Point Sensor - Temperature Clear Trap")
gstDewPointSensorTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21706)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorTempFCLEAR.setDescription("Remote Dew Point Sensor - Temperature Clear Trap")
gstDewPointSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21707)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "dewPointSensorHumidity"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorHumidityCLEAR.setDescription("Remote Dew Point Sensor - Humidity Clear Trap")
gstDewPointSensorDewPointCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21708)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "dewPointSensorDewPointC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorDewPointCCLEAR.setDescription("Remote Dew Point Sensor - Dew Point Clear Trap")
gstDewPointSensorDewPointFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21709)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dewPointSensorDewPointF"), ("GEIST-MIB-V3", "temperaturePrecision"), ("GEIST-MIB-V3", "dewPointSensorName"), ) )
if mibBuilder.loadTexts: gstDewPointSensorDewPointFCLEAR.setDescription("Remote Dew Point Sensor - Dew Point Clear Trap")
gstDigitalSensorDigitalCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21805)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "digitalSensorName"), ("GEIST-MIB-V3", "digitalSensorDigital"), ) )
if mibBuilder.loadTexts: gstDigitalSensorDigitalCLEAR.setDescription("Digital sensor Clear Trap")
gstDstsVoltsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21905)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "dstsVoltsA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsVoltsACLEAR.setDescription("RMS Voltage of Side A Set Point Sensor Clear")
gstDstsDeciAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21906)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dstsDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstDstsDeciAmpsACLEAR.setDescription("RMS Current of Side A Set Point Sensor Clear")
gstDstsVoltsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21907)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "dstsVoltsB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsVoltsBCLEAR.setDescription("RMS Voltage of Side B Set Point Sensor Clear")
gstDstsDeciAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21908)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dstsDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstDstsDeciAmpsBCLEAR.setDescription("RMS Current of Side B Set Point Sensor Clear")
gstDstsSourceAActiveCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21909)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "dstsSourceAActive"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsSourceAActiveCLEAR.setDescription("Source A Active Set Point Sensor Clear")
gstDstsSourceBActiveCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21910)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "dstsSourceBActive"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsSourceBActiveCLEAR.setDescription("Source B Active Set Point Sensor Clear")
gstDstsPowerStatusACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21911)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "dstsPowerStatusA"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsPowerStatusACLEAR.setDescription("Source A Power Qualilty Active Set Point Sensor Clear")
gstDstsPowerStatusBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21912)).setObjects(*(("GEIST-MIB-V3", "dstsPowerStatusB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstDstsPowerStatusBCLEAR.setDescription("Source B Power Qualilty Active Set Point Sensor Clear")
gstDstsSourceATempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21913)).setObjects(*(("GEIST-MIB-V3", "dstsSourceATempC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstDstsSourceATempCCLEAR.setDescription("Source A Temp Sensor Clear")
gstDstsSourceBTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 21914)).setObjects(*(("GEIST-MIB-V3", "dstsName"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "dstsSourceBTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstDstsSourceBTempCCLEAR.setDescription("Source B Temp Sensor Clear")
gstCpmSensorStatusCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22005)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "cpmSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "cpmSensorStatus"), ) )
if mibBuilder.loadTexts: gstCpmSensorStatusCLEAR.setDescription("City Power sensor Clear Trap")
gstSmokeAlarmStatusCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22105)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "smokeAlarmStatus"), ("GEIST-MIB-V3", "smokeAlarmName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSmokeAlarmStatusCLEAR.setDescription("Smoke alarm Clear Trap")
gstNeg48VdcSensorVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22205)).setObjects(*(("GEIST-MIB-V3", "neg48VdcSensorVoltage"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "neg48VdcSensorName"), ) )
if mibBuilder.loadTexts: gstNeg48VdcSensorVoltageCLEAR.setDescription("-48Vdc Sensor Clear Trap")
gstPos30VdcSensorVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "pos30VdcSensorName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pos30VdcSensorVoltage"), ) )
if mibBuilder.loadTexts: gstPos30VdcSensorVoltageCLEAR.setDescription("30Vdc Sensor Clear Trap")
gstAnalogSensorAnalogCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "analogSensorAnalog"), ("GEIST-MIB-V3", "analogSensorName"), ) )
if mibBuilder.loadTexts: gstAnalogSensorAnalogCLEAR.setDescription("Analog Sensor Clear Trap")
gstCtrl3ChIECkWattHrsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22505)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsACLEAR.setDescription("Kilo Watt Hours A Clear Trap")
gstCtrl3ChIECVoltsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22506)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChIECVoltsA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltsACLEAR.setDescription("Volts A Clear Trap")
gstCtrl3ChIECVoltPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22507)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECVoltPeakA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltPeakACLEAR.setDescription("Volts Peak A Clear Trap")
gstCtrl3ChIECDeciAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22508)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsACLEAR.setDescription("Deciamps A Clear Trap")
gstCtrl3ChIECDeciAmpsPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22509)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsPeakA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsPeakACLEAR.setDescription("Deciamps Peak A Clear Trap")
gstCtrl3ChIECRealPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22510)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECRealPowerA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerACLEAR.setDescription("Real Power A Clear Trap")
gstCtrl3ChIECApparentPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22511)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECApparentPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECApparentPowerACLEAR.setDescription("Apparent Power A Clear Trap")
gstCtrl3ChIECPowerFactorACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22512)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl3ChIECPowerFactorA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECPowerFactorACLEAR.setDescription("Power Factor A Clear Trap")
gstCtrl3ChIECkWattHrsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22513)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsBCLEAR.setDescription("Kilo Watt Hours B Clear Trap")
gstCtrl3ChIECVoltsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22514)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECVoltsB"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltsBCLEAR.setDescription("Volts B Clear Trap")
gstCtrl3ChIECVoltPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22515)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECVoltPeakB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltPeakBCLEAR.setDescription("Volts Peak B Clear Trap")
gstCtrl3ChIECDeciAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22516)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsBCLEAR.setDescription("Deciamps B Clear Trap")
gstCtrl3ChIECDeciAmpsPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22517)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsPeakB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsPeakBCLEAR.setDescription("Deciamps Peak B Clear Trap")
gstCtrl3ChIECRealPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22518)).setObjects(*(("GEIST-MIB-V3", "ctrl3ChIECRealPowerB"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerBCLEAR.setDescription("Real Power B Clear Trap")
gstCtrl3ChIECApparentPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22519)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECApparentPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECApparentPowerBCLEAR.setDescription("Apparent Power B Clear Trap")
gstCtrl3ChIECPowerFactorBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22520)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECPowerFactorB"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECPowerFactorBCLEAR.setDescription("Power Factor B Clear Trap")
gstCtrl3ChIECkWattHrsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22521)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsCCLEAR.setDescription("Kilo Watt Hours C Clear Trap")
gstCtrl3ChIECVoltsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22522)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChIECVoltsC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltsCCLEAR.setDescription("Volts C Clear Trap")
gstCtrl3ChIECVoltPeakCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22523)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECVoltPeakC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECVoltPeakCCLEAR.setDescription("Volts Peak C Clear Trap")
gstCtrl3ChIECDeciAmpsCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22524)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsCCLEAR.setDescription("Deciamps C Clear Trap")
gstCtrl3ChIECDeciAmpsPeakCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22525)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECDeciAmpsPeakC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECDeciAmpsPeakCCLEAR.setDescription("Deciamps Peak C Clear Trap")
gstCtrl3ChIECRealPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22526)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl3ChIECRealPowerC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerCCLEAR.setDescription("Real Power C Clear Trap")
gstCtrl3ChIECApparentPowerCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22527)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECApparentPowerC"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECApparentPowerCCLEAR.setDescription("Apparent Power C Clear Trap")
gstCtrl3ChIECPowerFactorCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22528)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChIECPowerFactorC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECPowerFactorCCLEAR.setDescription("Power Factor C Clear Trap")
gstCtrl3ChIECkWattHrsTotalCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22529)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl3ChIECkWattHrsTotal"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECkWattHrsTotalCLEAR.setDescription("Kilo Watt Hours Total Clear Trap")
gstCtrl3ChIECRealPowerTotalCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22530)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl3ChIECName"), ("GEIST-MIB-V3", "ctrl3ChIECRealPowerTotal"), ) )
if mibBuilder.loadTexts: gstCtrl3ChIECRealPowerTotalCLEAR.setDescription("Watts Total Clear Trap")
gstClimateRelayTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22605)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateRelayTempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateRelayTempCCLEAR.setDescription("Climate Relay Temperature Sensor Clear Trap")
gstClimateRelayTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22606)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayTempF"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstClimateRelayTempFCLEAR.setDescription("Climate Relay Temperature Sensor Clear Trap")
gstClimateRelayIO1CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22607)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "climateRelayIO1"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO1CLEAR.setDescription("Climate Relay IO1 Sensor Clear Trap")
gstClimateRelayIO2CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22608)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayIO2"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO2CLEAR.setDescription("Climate Relay IO2 Sensor Clear Trap")
gstClimateRelayIO3CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22609)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayIO3"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO3CLEAR.setDescription("Climate Relay IO3 Sensor Clear Trap")
gstClimateRelayIO4CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22610)).setObjects(*(("GEIST-MIB-V3", "climateRelayIO4"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO4CLEAR.setDescription("Climate Relay IO4 Sensor Clear Trap")
gstClimateRelayIO5CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22611)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateRelayIO5"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO5CLEAR.setDescription("Climate Relay IO5 Sensor Clear Trap")
gstClimateRelayIO6CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22612)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "climateRelayIO6"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "climateRelayName"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstClimateRelayIO6CLEAR.setDescription("Climate Relay IO6 Sensor Clear Trap")
gstAirSpeedSwitchSensorAirSpeedCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 22805)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "airSpeedSwitchSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "airSpeedSwitchSensorAirSpeed"), ) )
if mibBuilder.loadTexts: gstAirSpeedSwitchSensorAirSpeedCLEAR.setDescription("Air Speed Switch Clear Trap")
gstIoExpanderIO1CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23037)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO1"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO1CLEAR.setDescription("Climate Relay IO1 Sensor Clear Trap")
gstIoExpanderIO2CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23038)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO2"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO2CLEAR.setDescription("Climate Relay IO2 Sensor Clear Trap")
gstIoExpanderIO3CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23039)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO3"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO3CLEAR.setDescription("Climate Relay IO3 Sensor Clear Trap")
gstIoExpanderIO4CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23040)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO4"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO4CLEAR.setDescription("Climate Relay IO4 Sensor Clear Trap")
gstIoExpanderIO5CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23041)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO5"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO5CLEAR.setDescription("Climate Relay IO5 Sensor Clear Trap")
gstIoExpanderIO6CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23042)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO6"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO6CLEAR.setDescription("Climate Relay IO6 Sensor Clear Trap")
gstIoExpanderIO7CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23043)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO7"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO7CLEAR.setDescription("Climate Relay IO7 Sensor Clear Trap")
gstIoExpanderIO8CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23044)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO8"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO8CLEAR.setDescription("Climate Relay IO8 Sensor Clear Trap")
gstIoExpanderIO9CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23045)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO9"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO9CLEAR.setDescription("Climate Relay IO9 Sensor Clear Trap")
gstIoExpanderIO10CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23046)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO10"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO10CLEAR.setDescription("Climate Relay IO10 Sensor Clear Trap")
gstIoExpanderIO11CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23047)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO11"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO11CLEAR.setDescription("Climate Relay IO11 Sensor Clear Trap")
gstIoExpanderIO12CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23048)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO12"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO12CLEAR.setDescription("Climate Relay IO12 Sensor Clear Trap")
gstIoExpanderIO13CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23049)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ioExpanderIO13"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO13CLEAR.setDescription("Climate Relay IO13 Sensor Clear Trap")
gstIoExpanderIO14CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23050)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO14"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO14CLEAR.setDescription("Climate Relay IO14 Sensor Clear Trap")
gstIoExpanderIO15CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23051)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO15"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO15CLEAR.setDescription("Climate Relay IO15 Sensor Clear Trap")
gstIoExpanderIO16CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23052)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO16"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO16CLEAR.setDescription("Climate Relay IO16 Sensor Clear Trap")
gstIoExpanderIO17CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23053)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO17"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO17CLEAR.setDescription("Climate Relay IO17 Sensor Clear Trap")
gstIoExpanderIO18CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23054)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO18"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO18CLEAR.setDescription("Climate Relay IO18 Sensor Clear Trap")
gstIoExpanderIO19CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23055)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO19"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO19CLEAR.setDescription("Climate Relay IO19 Sensor Clear Trap")
gstIoExpanderIO20CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23056)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO20"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO20CLEAR.setDescription("Climate Relay IO20 Sensor Clear Trap")
gstIoExpanderIO21CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23057)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO21"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO21CLEAR.setDescription("Climate Relay IO21 Sensor Clear Trap")
gstIoExpanderIO22CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23058)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO22"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO22CLEAR.setDescription("Climate Relay IO22 Sensor Clear Trap")
gstIoExpanderIO23CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23059)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO23"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO23CLEAR.setDescription("Climate Relay IO23 Sensor Clear Trap")
gstIoExpanderIO24CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23060)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO24"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO24CLEAR.setDescription("Climate Relay IO24 Sensor Clear Trap")
gstIoExpanderIO25CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23061)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO25"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO25CLEAR.setDescription("Climate Relay IO25 Sensor Clear Trap")
gstIoExpanderIO26CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23062)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO26"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO26CLEAR.setDescription("Climate Relay IO26 Sensor Clear Trap")
gstIoExpanderIO27CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23063)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ioExpanderIO27"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO27CLEAR.setDescription("Climate Relay IO27 Sensor Clear Trap")
gstIoExpanderIO28CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23064)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO28"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO28CLEAR.setDescription("Climate Relay IO28 Sensor Clear Trap")
gstIoExpanderIO29CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23065)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO29"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO29CLEAR.setDescription("Climate Relay IO29 Sensor Clear Trap")
gstIoExpanderIO30CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23066)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO30"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO30CLEAR.setDescription("Climate Relay IO30 Sensor Clear Trap")
gstIoExpanderIO31CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23067)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderName"), ("GEIST-MIB-V3", "ioExpanderIO31"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO31CLEAR.setDescription("Climate Relay IO31 Sensor Clear Trap")
gstIoExpanderIO32CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23068)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ioExpanderIO32"), ("GEIST-MIB-V3", "ioExpanderName"), ) )
if mibBuilder.loadTexts: gstIoExpanderIO32CLEAR.setDescription("Climate Relay IO32 Sensor Clear Trap")
gstT3hdSensorIntTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23106)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorIntTempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntTempCCLEAR.setDescription("T3HD - Internal Temperature C Clear Trap")
gstT3hdSensorIntTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23107)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorIntTempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntTempFCLEAR.setDescription("T3HD - Internal Temperature F Clear Trap")
gstT3hdSensorIntHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23108)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorIntHumidity"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntHumidityCLEAR.setDescription("T3HD - Internal Humidity Clear Trap")
gstT3hdSensorIntDewPointCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23109)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "t3hdSensorIntDewPointC"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntDewPointCCLEAR.setDescription("T3HD - Internal Dew Point C Clear Trap")
gstT3hdSensorIntDewPointFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23110)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorIntDewPointF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorIntDewPointFCLEAR.setDescription("T3HD - Internal Dew Point F Clear Trap")
gstT3hdSensorExt1TempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23113)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorExt1TempC"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt1TempCCLEAR.setDescription("T3HD - External 1 Temperature C Clear Trap")
gstT3hdSensorExt1TempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23114)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorExt1TempF"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt1TempFCLEAR.setDescription("T3HD - External 1 Temperature F Clear Trap")
gstT3hdSensorExt2TempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23117)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "t3hdSensorExt2TempC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt2TempCCLEAR.setDescription("T3HD - External 2 Temperature C Clear Trap")
gstT3hdSensorExt2TempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23118)).setObjects(*(("GEIST-MIB-V3", "t3hdSensorExt2TempF"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "t3hdSensorName"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstT3hdSensorExt2TempFCLEAR.setDescription("T3HD - External 2 Temperature F Clear Trap")
gstThdSensorTempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23205)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorTempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorTempCCLEAR.setDescription("THD - Temperature C Clear Trap")
gstThdSensorTempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23206)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorTempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorTempFCLEAR.setDescription("THD - Temperature F Clear Trap")
gstThdSensorHumidityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23207)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "thdSensorHumidity"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstThdSensorHumidityCLEAR.setDescription("THD - Humidity Clear Trap")
gstThdSensorDewPointCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23208)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorDewPointC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorDewPointCCLEAR.setDescription("THD - Dew Point C Clear Trap")
gstThdSensorDewPointFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23209)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "thdSensorName"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "thdSensorDewPointF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstThdSensorDewPointFCLEAR.setDescription("THD - Dew Point F Clear Trap")
gstPos60VdcSensorVoltageCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23305)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "pos60VdcSensorName"), ("GEIST-MIB-V3", "pos60VdcSensorVoltage"), ) )
if mibBuilder.loadTexts: gstPos60VdcSensorVoltageCLEAR.setDescription("60Vdc Sensor Clear Trap")
gstCtrl2CirTotkWattHrsTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23405)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotkWattHrsTot"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotkWattHrsTotCLEAR.setDescription("Kilo Watt Hours Total Clear Trap")
gstCtrl2CirTotVoltsTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23406)).setObjects(*(("GEIST-MIB-V3", "ctrl2CirTotVoltsTot"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltsTotCLEAR.setDescription("Volts Total Clear Trap")
gstCtrl2CirTotVoltPeakTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23407)).setObjects(*(("GEIST-MIB-V3", "ctrl2CirTotVoltPeakTot"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltPeakTotCLEAR.setDescription("Volts Peak Total Clear Trap")
gstCtrl2CirTotDeciAmpsTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23408)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsTot"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsTotCLEAR.setDescription("Deciamps Total Clear Trap")
gstCtrl2CirTotDeciAmpsPeakTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23409)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsPeakTot"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsPeakTotCLEAR.setDescription("Deciamps Peak Total Clear Trap")
gstCtrl2CirTotRealPowerTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23410)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotRealPowerTot"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotRealPowerTotCLEAR.setDescription("Real Power Total Clear Trap")
gstCtrl2CirTotApparentPowerTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23411)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotApparentPowerTot"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotApparentPowerTotCLEAR.setDescription("Apparent Power Total Clear Trap")
gstCtrl2CirTotPowerFactorTotCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23412)).setObjects(*(("GEIST-MIB-V3", "ctrl2CirTotPowerFactorTot"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotPowerFactorTotCLEAR.setDescription("Power Factor Total Clear Trap")
gstCtrl2CirTotkWattHrsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23413)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotkWattHrsA"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotkWattHrsACLEAR.setDescription("Kilo Watt Hours A Clear Trap")
gstCtrl2CirTotVoltsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23414)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotVoltsA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltsACLEAR.setDescription("Volts A Clear Trap")
gstCtrl2CirTotVoltPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23415)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotVoltPeakA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltPeakACLEAR.setDescription("Volts Peak A Clear Trap")
gstCtrl2CirTotDeciAmpsACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23416)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsA"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsACLEAR.setDescription("Deciamps A Clear Trap")
gstCtrl2CirTotDeciAmpsPeakACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23417)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsPeakA"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsPeakACLEAR.setDescription("Deciamps Peak A Clear Trap")
gstCtrl2CirTotRealPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23418)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotRealPowerA"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotRealPowerACLEAR.setDescription("Real Power A Clear Trap")
gstCtrl2CirTotApparentPowerACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23419)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotApparentPowerA"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotApparentPowerACLEAR.setDescription("Apparent Power A Clear Trap")
gstCtrl2CirTotPowerFactorACLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23420)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "ctrl2CirTotPowerFactorA"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotPowerFactorACLEAR.setDescription("Power Factor A Clear Trap")
gstCtrl2CirTotkWattHrsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23421)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotkWattHrsB"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotkWattHrsBCLEAR.setDescription("Kilo Watt Hours B Clear Trap")
gstCtrl2CirTotVoltsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23422)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotVoltsB"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltsBCLEAR.setDescription("Volts B Clear Trap")
gstCtrl2CirTotVoltPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23423)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotVoltPeakB"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotVoltPeakBCLEAR.setDescription("Volts Peak B Clear Trap")
gstCtrl2CirTotDeciAmpsBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23424)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsB"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsBCLEAR.setDescription("Deciamps B Clear Trap")
gstCtrl2CirTotDeciAmpsPeakBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23425)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotDeciAmpsPeakB"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotDeciAmpsPeakBCLEAR.setDescription("Deciamps Peak B Clear Trap")
gstCtrl2CirTotRealPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23426)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "ctrl2CirTotRealPowerB"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotRealPowerBCLEAR.setDescription("Real Power B Clear Trap")
gstCtrl2CirTotApparentPowerBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23427)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ("GEIST-MIB-V3", "ctrl2CirTotApparentPowerB"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotApparentPowerBCLEAR.setDescription("Apparent Power B Clear Trap")
gstCtrl2CirTotPowerFactorBCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23428)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "ctrl2CirTotPowerFactorB"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "ctrl2CirTotName"), ) )
if mibBuilder.loadTexts: gstCtrl2CirTotPowerFactorBCLEAR.setDescription("Power Factor B Clear Trap")
gstSc10ControlModeCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23505)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "sc10ControlMode"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSc10ControlModeCLEAR.setDescription("SC10 Control Mode Sensor Clear")
gstSc10SetpointCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23506)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "sc10SetpointC"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSc10SetpointCCLEAR.setDescription("SC10 Temp Set Point Sensor Clear")
gstSc10SetpointFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23507)).setObjects(*(("GEIST-MIB-V3", "sc10SetpointF"), ("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ) )
if mibBuilder.loadTexts: gstSc10SetpointFCLEAR.setDescription("SC10 Temp Set Point Sensor Clear")
gstSc10TempCCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23508)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "sc10TempC"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstSc10TempCCLEAR.setDescription("SC10 Internal Temp Sensor Clear")
gstSc10TempFCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23509)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "sc10TempF"), ("GEIST-MIB-V3", "temperaturePrecision"), ) )
if mibBuilder.loadTexts: gstSc10TempFCLEAR.setDescription("SC10 Internal Temp Sensor Clear")
gstSc10CapacityCLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 23510)).setObjects(*(("GEIST-MIB-V3", "sc10Name"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "sc10Capacity"), ) )
if mibBuilder.loadTexts: gstSc10CapacityCLEAR.setDescription("SC10 Fan Speed Sensor Clear")
gstPowerDMDeciAmps1NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129153)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps1"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps1NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps2NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129154)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps2"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps2NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps3NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129155)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps3"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps3NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps4NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129156)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps4"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps4NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps5NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129157)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMDeciAmps5"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps5NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps6NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129158)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps6"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps6NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps7NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129159)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps7"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps7NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps8NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129160)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps8"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps8NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps9NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129161)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps9"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps9NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps10NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129162)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps10"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps10NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps11NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129163)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps11"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps11NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps12NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129164)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps12"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps12NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps13NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129165)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps13"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps13NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps14NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129166)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps14"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps14NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps15NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129167)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps15"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps15NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps16NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129168)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps16"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps16NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps17NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129169)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMDeciAmps17"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps17NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps18NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129170)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps18"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps18NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps19NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129171)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps19"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps19NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps20NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129172)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps20"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps20NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps21NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129173)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps21"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps21NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps22NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129174)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps22"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps22NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps23NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129175)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps23"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps23NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps24NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129176)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps24"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps24NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps25NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129177)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps25"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps25NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps26NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129178)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps26"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps26NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps27NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129179)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps27"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps27NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps28NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129180)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps28"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps28NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps29NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129181)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps29"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps29NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps30NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129182)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps30"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps30NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps31NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129183)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps31"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps31NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps32NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129184)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps32"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps32NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps33NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129185)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps33"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps33NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps34NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129186)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps34"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps34NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps35NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129187)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps35"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps35NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps36NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129188)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps36"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps36NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps37NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129189)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps37"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps37NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps38NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129190)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps38"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps38NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps39NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129191)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps39"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps39NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps40NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129192)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps40"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps40NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps41NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129193)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps41"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps41NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps42NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129194)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps42"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps42NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps43NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129195)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps43"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps43NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps44NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129196)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps44"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps44NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps45NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129197)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps45"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps45NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps46NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129198)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps46"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps46NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps47NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129199)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps47"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps47NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps48NOTIFY = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 129200)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps48"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps48NOTIFY.setDescription("DM48 Current Monitor Amps Trap")
gstPowerDMDeciAmps1CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139153)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps1"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps1CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps2CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139154)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps2"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps2CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps3CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139155)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps3"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps3CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps4CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139156)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps4"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps4CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps5CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139157)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMDeciAmps5"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps5CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps6CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139158)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps6"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps6CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps7CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139159)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps7"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps7CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps8CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139160)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps8"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps8CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps9CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139161)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps9"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps9CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps10CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139162)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps10"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps10CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps11CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139163)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps11"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps11CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps12CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139164)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps12"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps12CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps13CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139165)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps13"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps13CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps14CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139166)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps14"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps14CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps15CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139167)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps15"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps15CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps16CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139168)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps16"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps16CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps17CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139169)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMDeciAmps17"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps17CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps18CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139170)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps18"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps18CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps19CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139171)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps19"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps19CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps20CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139172)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps20"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps20CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps21CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139173)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps21"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps21CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps22CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139174)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps22"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps22CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps23CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139175)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps23"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps23CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps24CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139176)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps24"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps24CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps25CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139177)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps25"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps25CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps26CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139178)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps26"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps26CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps27CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139179)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps27"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps27CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps28CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139180)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps28"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps28CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps29CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139181)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps29"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps29CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps30CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139182)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "powerDMDeciAmps30"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps30CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps31CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139183)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps31"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps31CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps32CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139184)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps32"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps32CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps33CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139185)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "powerDMDeciAmps33"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps33CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps34CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139186)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps34"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps34CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps35CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139187)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps35"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps35CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps36CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139188)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps36"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps36CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps37CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139189)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps37"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps37CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps38CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139190)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps38"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps38CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps39CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139191)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps39"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps39CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps40CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139192)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps40"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps40CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps41CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139193)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "powerDMDeciAmps41"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps41CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps42CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139194)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps42"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ("GEIST-MIB-V3", "alarmTrigger"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps42CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps43CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139195)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps43"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps43CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps44CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139196)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps44"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps44CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps45CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139197)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps45"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps45CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps46CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139198)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps46"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps46CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps47CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139199)).setObjects(*(("GEIST-MIB-V3", "powerDMDeciAmps47"), ("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps47CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")
gstPowerDMDeciAmps48CLEAR = NotificationType((1, 3, 6, 1, 4, 1, 21239, 2, 32767, 0, 139200)).setObjects(*(("GEIST-MIB-V3", "alarmTrigger"), ("GEIST-MIB-V3", "alarmTripType"), ("GEIST-MIB-V3", "productFriendlyName"), ("GEIST-MIB-V3", "powerDMDeciAmps48"), ("GEIST-MIB-V3", "alarmInstance"), ("GEIST-MIB-V3", "powerDMName"), ) )
if mibBuilder.loadTexts: gstPowerDMDeciAmps48CLEAR.setDescription("DM48 Current Monitor Amps Clear Trap")

# Exports

# Module identity
mibBuilder.exportSymbols("GEIST-MIB-V3", PYSNMP_MODULE_ID=geist)

# Objects
mibBuilder.exportSymbols("GEIST-MIB-V3", geist=geist, geistV3=geistV3, deviceInfo=deviceInfo, productTitle=productTitle, productVersion=productVersion, productFriendlyName=productFriendlyName, productMacAddress=productMacAddress, productUrl=productUrl, alarmTripType=alarmTripType, productHardware=productHardware, sensorCountsBase=sensorCountsBase, sensorCounts=sensorCounts, climateCount=climateCount, powerMonitorCount=powerMonitorCount, tempSensorCount=tempSensorCount, airflowSensorCount=airflowSensorCount, ctrl3ChDELTACount=ctrl3ChDELTACount, doorSensorCount=doorSensorCount, waterSensorCount=waterSensorCount, currentSensorCount=currentSensorCount, millivoltSensorCount=millivoltSensorCount, power3ChSensorCount=power3ChSensorCount, outletCount=outletCount, vsfcCount=vsfcCount, ctrl3ChCount=ctrl3ChCount, ctrlGrpAmpsCount=ctrlGrpAmpsCount, ctrlOutletCount=ctrlOutletCount, dewpointSensorCount=dewpointSensorCount, digitalSensorCount=digitalSensorCount, dstsSensorCount=dstsSensorCount, cpmSensorCount=cpmSensorCount, smokeAlarmSensorCount=smokeAlarmSensorCount, neg48VdcSensorCount=neg48VdcSensorCount, pos30VdcSensorCount=pos30VdcSensorCount, analogSensorCount=analogSensorCount, ctrl3ChIECCount=ctrl3ChIECCount, climateRelayCount=climateRelayCount, ctrlRelayCount=ctrlRelayCount, airSpeedSwitchSensorCount=airSpeedSwitchSensorCount, powerDMCount=powerDMCount, ioExpanderCount=ioExpanderCount, t3hdSensorCount=t3hdSensorCount, thdSensorCount=thdSensorCount, pos60VdcSensorCount=pos60VdcSensorCount, ctrl2CirTotCount=ctrl2CirTotCount, sc10Count=sc10Count, temperaturePrecision=temperaturePrecision, alarmTrigger=alarmTrigger, alarmInstance=alarmInstance, climateTable=climateTable, climateEntry=climateEntry, climateIndex=climateIndex, climateSerial=climateSerial, climateName=climateName, climateAvail=climateAvail, climateTempC=climateTempC, climateTempF=climateTempF, climateHumidity=climateHumidity, climateLight=climateLight, climateAirflow=climateAirflow, climateSound=climateSound, climateIO1=climateIO1, climateIO2=climateIO2, climateIO3=climateIO3, climateVolts=climateVolts, climateVoltPeak=climateVoltPeak, climateDeciAmpsA=climateDeciAmpsA, climateDeciAmpPeakA=climateDeciAmpPeakA, climateRealPowerA=climateRealPowerA, climateApparentPowerA=climateApparentPowerA, climatePowerFactorA=climatePowerFactorA, climateDeciAmpsB=climateDeciAmpsB, climateDeciAmpPeakB=climateDeciAmpPeakB, climateRealPowerB=climateRealPowerB, climateApparentPowerB=climateApparentPowerB, climatePowerFactorB=climatePowerFactorB, climateDeciAmpsC=climateDeciAmpsC, climateDeciAmpPeakC=climateDeciAmpPeakC, climateRealPowerC=climateRealPowerC, climateApparentPowerC=climateApparentPowerC, climatePowerFactorC=climatePowerFactorC, climateDewPointC=climateDewPointC, climateDewPointF=climateDewPointF, powMonTable=powMonTable, powMonEntry=powMonEntry, powMonIndex=powMonIndex, powMonSerial=powMonSerial, powMonName=powMonName, powMonAvail=powMonAvail, powMonkWattHrs=powMonkWattHrs, powMonVolts=powMonVolts, powMonVoltMax=powMonVoltMax, powMonVoltMin=powMonVoltMin, powMonVoltPeak=powMonVoltPeak, powMonDeciAmps=powMonDeciAmps, powMonRealPower=powMonRealPower, powMonApparentPower=powMonApparentPower, powMonPowerFactor=powMonPowerFactor, powMonOutlet1=powMonOutlet1, powMonOutlet2=powMonOutlet2, powMonOutlet1StatusTime=powMonOutlet1StatusTime, powMonOutlet2StatusTime=powMonOutlet2StatusTime, tempSensorTable=tempSensorTable, tempSensorEntry=tempSensorEntry, tempSensorIndex=tempSensorIndex, tempSensorSerial=tempSensorSerial, tempSensorName=tempSensorName, tempSensorAvail=tempSensorAvail, tempSensorTempC=tempSensorTempC, tempSensorTempF=tempSensorTempF, airFlowSensorTable=airFlowSensorTable, airFlowSensorEntry=airFlowSensorEntry, airFlowSensorIndex=airFlowSensorIndex, airFlowSensorSerial=airFlowSensorSerial, airFlowSensorName=airFlowSensorName, airFlowSensorAvail=airFlowSensorAvail, airFlowSensorTempC=airFlowSensorTempC, airFlowSensorTempF=airFlowSensorTempF, airFlowSensorFlow=airFlowSensorFlow, airFlowSensorHumidity=airFlowSensorHumidity, airFlowSensorDewPointC=airFlowSensorDewPointC, airFlowSensorDewPointF=airFlowSensorDewPointF, ctrl3ChDELTATable=ctrl3ChDELTATable, ctrl3ChDELTAEntry=ctrl3ChDELTAEntry, ctrl3ChDELTAIndex=ctrl3ChDELTAIndex, ctrl3ChDELTASerial=ctrl3ChDELTASerial)
mibBuilder.exportSymbols("GEIST-MIB-V3", ctrl3ChDELTAName=ctrl3ChDELTAName, ctrl3ChDELTAAvail=ctrl3ChDELTAAvail, ctrl3ChDELTAPowerChCount=ctrl3ChDELTAPowerChCount, ctrl3ChDELTADeciAmpsA=ctrl3ChDELTADeciAmpsA, ctrl3ChDELTADeciAmpsB=ctrl3ChDELTADeciAmpsB, ctrl3ChDELTADeciAmpsC=ctrl3ChDELTADeciAmpsC, ctrl3ChDELTAkWattHrsTotal=ctrl3ChDELTAkWattHrsTotal, ctrl3ChDELTARealPowerTotal=ctrl3ChDELTARealPowerTotal, ctrl3ChDELTAkWattHrsAB=ctrl3ChDELTAkWattHrsAB, ctrl3ChDELTAVoltsAB=ctrl3ChDELTAVoltsAB, ctrl3ChDELTAVoltPeakAB=ctrl3ChDELTAVoltPeakAB, ctrl3ChDELTARealPowerAB=ctrl3ChDELTARealPowerAB, ctrl3ChDELTAApparentPowerAB=ctrl3ChDELTAApparentPowerAB, ctrl3ChDELTAPowerFactorAB=ctrl3ChDELTAPowerFactorAB, ctrl3ChDELTAkWattHrsBC=ctrl3ChDELTAkWattHrsBC, ctrl3ChDELTAVoltsBC=ctrl3ChDELTAVoltsBC, ctrl3ChDELTAVoltPeakBC=ctrl3ChDELTAVoltPeakBC, ctrl3ChDELTARealPowerBC=ctrl3ChDELTARealPowerBC, ctrl3ChDELTAApparentPowerBC=ctrl3ChDELTAApparentPowerBC, ctrl3ChDELTAPowerFactorBC=ctrl3ChDELTAPowerFactorBC, ctrl3ChDELTAkWattHrsCA=ctrl3ChDELTAkWattHrsCA, ctrl3ChDELTAVoltsCA=ctrl3ChDELTAVoltsCA, ctrl3ChDELTAVoltPeakCA=ctrl3ChDELTAVoltPeakCA, ctrl3ChDELTARealPowerCA=ctrl3ChDELTARealPowerCA, ctrl3ChDELTAApparentPowerCA=ctrl3ChDELTAApparentPowerCA, ctrl3ChDELTAPowerFactorCA=ctrl3ChDELTAPowerFactorCA, doorSensorTable=doorSensorTable, doorSensorEntry=doorSensorEntry, doorSensorIndex=doorSensorIndex, doorSensorSerial=doorSensorSerial, doorSensorName=doorSensorName, doorSensorAvail=doorSensorAvail, doorSensorStatus=doorSensorStatus, waterSensorTable=waterSensorTable, waterSensorEntry=waterSensorEntry, waterSensorIndex=waterSensorIndex, waterSensorSerial=waterSensorSerial, waterSensorName=waterSensorName, waterSensorAvail=waterSensorAvail, waterSensorDampness=waterSensorDampness, currentMonitorTable=currentMonitorTable, currentMonitorEntry=currentMonitorEntry, currentMonitorIndex=currentMonitorIndex, currentMonitorSerial=currentMonitorSerial, currentMonitorName=currentMonitorName, currentMonitorAvail=currentMonitorAvail, currentMonitorDeciAmps=currentMonitorDeciAmps, millivoltMonitorTable=millivoltMonitorTable, millivoltMonitorEntry=millivoltMonitorEntry, millivoltMonitorIndex=millivoltMonitorIndex, millivoltMonitorSerial=millivoltMonitorSerial, millivoltMonitorName=millivoltMonitorName, millivoltMonitorAvail=millivoltMonitorAvail, millivoltMonitorMV=millivoltMonitorMV, pow3ChTable=pow3ChTable, pow3ChEntry=pow3ChEntry, pow3ChIndex=pow3ChIndex, pow3ChSerial=pow3ChSerial, pow3ChName=pow3ChName, pow3ChAvail=pow3ChAvail, pow3ChkWattHrsA=pow3ChkWattHrsA, pow3ChVoltsA=pow3ChVoltsA, pow3ChVoltMaxA=pow3ChVoltMaxA, pow3ChVoltMinA=pow3ChVoltMinA, pow3ChVoltPeakA=pow3ChVoltPeakA, pow3ChDeciAmpsA=pow3ChDeciAmpsA, pow3ChRealPowerA=pow3ChRealPowerA, pow3ChApparentPowerA=pow3ChApparentPowerA, pow3ChPowerFactorA=pow3ChPowerFactorA, pow3ChkWattHrsB=pow3ChkWattHrsB, pow3ChVoltsB=pow3ChVoltsB, pow3ChVoltMaxB=pow3ChVoltMaxB, pow3ChVoltMinB=pow3ChVoltMinB, pow3ChVoltPeakB=pow3ChVoltPeakB, pow3ChDeciAmpsB=pow3ChDeciAmpsB, pow3ChRealPowerB=pow3ChRealPowerB, pow3ChApparentPowerB=pow3ChApparentPowerB, pow3ChPowerFactorB=pow3ChPowerFactorB, pow3ChkWattHrsC=pow3ChkWattHrsC, pow3ChVoltsC=pow3ChVoltsC, pow3ChVoltMaxC=pow3ChVoltMaxC, pow3ChVoltMinC=pow3ChVoltMinC, pow3ChVoltPeakC=pow3ChVoltPeakC, pow3ChDeciAmpsC=pow3ChDeciAmpsC, pow3ChRealPowerC=pow3ChRealPowerC, pow3ChApparentPowerC=pow3ChApparentPowerC, pow3ChPowerFactorC=pow3ChPowerFactorC, pow3ChkWattHrsTotal=pow3ChkWattHrsTotal, pow3ChRealPowerTotal=pow3ChRealPowerTotal, outletTable=outletTable, outletEntry=outletEntry, outletIndex=outletIndex, outletSerial=outletSerial, outletName=outletName, outletAvail=outletAvail, outlet1Status=outlet1Status, outlet2Status=outlet2Status, vsfcTable=vsfcTable, vsfcEntry=vsfcEntry, vsfcIndex=vsfcIndex, vsfcSerial=vsfcSerial, vsfcName=vsfcName, vsfcAvail=vsfcAvail, vsfcSetPointC=vsfcSetPointC, vsfcSetPointF=vsfcSetPointF, vsfcFanSpeed=vsfcFanSpeed, vsfcIntTempC=vsfcIntTempC, vsfcIntTempF=vsfcIntTempF, vsfcExt1TempC=vsfcExt1TempC, vsfcExt1TempF=vsfcExt1TempF, vsfcExt2TempC=vsfcExt2TempC, vsfcExt2TempF=vsfcExt2TempF, vsfcExt3TempC=vsfcExt3TempC, vsfcExt3TempF=vsfcExt3TempF, vsfcExt4TempC=vsfcExt4TempC, vsfcExt4TempF=vsfcExt4TempF, ctrl3ChTable=ctrl3ChTable, ctrl3ChEntry=ctrl3ChEntry, ctrl3ChIndex=ctrl3ChIndex, ctrl3ChSerial=ctrl3ChSerial, ctrl3ChName=ctrl3ChName, ctrl3ChAvail=ctrl3ChAvail, ctrl3ChVoltsA=ctrl3ChVoltsA, ctrl3ChVoltPeakA=ctrl3ChVoltPeakA, ctrl3ChDeciAmpsA=ctrl3ChDeciAmpsA, ctrl3ChDeciAmpsPeakA=ctrl3ChDeciAmpsPeakA, ctrl3ChRealPowerA=ctrl3ChRealPowerA)
mibBuilder.exportSymbols("GEIST-MIB-V3", ctrl3ChApparentPowerA=ctrl3ChApparentPowerA, ctrl3ChPowerFactorA=ctrl3ChPowerFactorA, ctrl3ChVoltsB=ctrl3ChVoltsB, ctrl3ChVoltPeakB=ctrl3ChVoltPeakB, ctrl3ChDeciAmpsB=ctrl3ChDeciAmpsB, ctrl3ChDeciAmpsPeakB=ctrl3ChDeciAmpsPeakB, ctrl3ChRealPowerB=ctrl3ChRealPowerB, ctrl3ChApparentPowerB=ctrl3ChApparentPowerB, ctrl3ChPowerFactorB=ctrl3ChPowerFactorB, ctrl3ChVoltsC=ctrl3ChVoltsC, ctrl3ChVoltPeakC=ctrl3ChVoltPeakC, ctrl3ChDeciAmpsC=ctrl3ChDeciAmpsC, ctrl3ChDeciAmpsPeakC=ctrl3ChDeciAmpsPeakC, ctrl3ChRealPowerC=ctrl3ChRealPowerC, ctrl3ChApparentPowerC=ctrl3ChApparentPowerC, ctrl3ChPowerFactorC=ctrl3ChPowerFactorC, ctrlGrpAmpsTable=ctrlGrpAmpsTable, ctrlGrpAmpsEntry=ctrlGrpAmpsEntry, ctrlGrpAmpsIndex=ctrlGrpAmpsIndex, ctrlGrpAmpsSerial=ctrlGrpAmpsSerial, ctrlGrpAmpsName=ctrlGrpAmpsName, ctrlGrpAmpsAvail=ctrlGrpAmpsAvail, ctrlGrpAmpsA=ctrlGrpAmpsA, ctrlGrpAmpsB=ctrlGrpAmpsB, ctrlGrpAmpsC=ctrlGrpAmpsC, ctrlGrpAmpsD=ctrlGrpAmpsD, ctrlGrpAmpsE=ctrlGrpAmpsE, ctrlGrpAmpsF=ctrlGrpAmpsF, ctrlGrpAmpsG=ctrlGrpAmpsG, ctrlGrpAmpsH=ctrlGrpAmpsH, ctrlGrpAmpsAVolts=ctrlGrpAmpsAVolts, ctrlGrpAmpsBVolts=ctrlGrpAmpsBVolts, ctrlGrpAmpsCVolts=ctrlGrpAmpsCVolts, ctrlGrpAmpsDVolts=ctrlGrpAmpsDVolts, ctrlGrpAmpsEVolts=ctrlGrpAmpsEVolts, ctrlGrpAmpsFVolts=ctrlGrpAmpsFVolts, ctrlGrpAmpsGVolts=ctrlGrpAmpsGVolts, ctrlGrpAmpsHVolts=ctrlGrpAmpsHVolts, ctrlGrpAmpsI=ctrlGrpAmpsI, ctrlGrpAmpsJ=ctrlGrpAmpsJ, ctrlGrpAmpsK=ctrlGrpAmpsK, ctrlGrpAmpsL=ctrlGrpAmpsL, ctrlGrpAmpsM=ctrlGrpAmpsM, ctrlGrpAmpsN=ctrlGrpAmpsN, ctrlGrpAmpsO=ctrlGrpAmpsO, ctrlGrpAmpsP=ctrlGrpAmpsP, ctrlGrpAmpsIVolts=ctrlGrpAmpsIVolts, ctrlGrpAmpsJVolts=ctrlGrpAmpsJVolts, ctrlGrpAmpsKVolts=ctrlGrpAmpsKVolts, ctrlGrpAmpsLVolts=ctrlGrpAmpsLVolts, ctrlGrpAmpsMVolts=ctrlGrpAmpsMVolts, ctrlGrpAmpsNVolts=ctrlGrpAmpsNVolts, ctrlGrpAmpsOVolts=ctrlGrpAmpsOVolts, ctrlGrpAmpsPVolts=ctrlGrpAmpsPVolts, ctrlOutletTable=ctrlOutletTable, ctrlOutletEntry=ctrlOutletEntry, ctrlOutletIndex=ctrlOutletIndex, ctrlOutletName=ctrlOutletName, ctrlOutletStatus=ctrlOutletStatus, ctrlOutletFeedback=ctrlOutletFeedback, ctrlOutletPending=ctrlOutletPending, ctrlOutletDeciAmps=ctrlOutletDeciAmps, ctrlOutletGroup=ctrlOutletGroup, ctrlOutletUpDelay=ctrlOutletUpDelay, ctrlOutletDwnDelay=ctrlOutletDwnDelay, ctrlOutletRbtDuration=ctrlOutletRbtDuration, ctrlOutletURL=ctrlOutletURL, ctrlOutletPOAAction=ctrlOutletPOAAction, ctrlOutletPOADelay=ctrlOutletPOADelay, ctrlOutletkWattHrs=ctrlOutletkWattHrs, ctrlOutletPower=ctrlOutletPower, ctrlOutletRbtDelay=ctrlOutletRbtDelay, ctrlOutletStatusTime=ctrlOutletStatusTime, dewPointSensorTable=dewPointSensorTable, dewPointSensorEntry=dewPointSensorEntry, dewPointSensorIndex=dewPointSensorIndex, dewPointSensorSerial=dewPointSensorSerial, dewPointSensorName=dewPointSensorName, dewPointSensorAvail=dewPointSensorAvail, dewPointSensorTempC=dewPointSensorTempC, dewPointSensorTempF=dewPointSensorTempF, dewPointSensorHumidity=dewPointSensorHumidity, dewPointSensorDewPointC=dewPointSensorDewPointC, dewPointSensorDewPointF=dewPointSensorDewPointF, digitalSensorTable=digitalSensorTable, digitalSensorEntry=digitalSensorEntry, digitalSensorIndex=digitalSensorIndex, digitalSensorSerial=digitalSensorSerial, digitalSensorName=digitalSensorName, digitalSensorAvail=digitalSensorAvail, digitalSensorDigital=digitalSensorDigital, dstsTable=dstsTable, dstsEntry=dstsEntry, dstsIndex=dstsIndex, dstsSerial=dstsSerial, dstsName=dstsName, dstsAvail=dstsAvail, dstsVoltsA=dstsVoltsA, dstsDeciAmpsA=dstsDeciAmpsA, dstsVoltsB=dstsVoltsB, dstsDeciAmpsB=dstsDeciAmpsB, dstsSourceAActive=dstsSourceAActive, dstsSourceBActive=dstsSourceBActive, dstsPowerStatusA=dstsPowerStatusA, dstsPowerStatusB=dstsPowerStatusB, dstsSourceATempC=dstsSourceATempC, dstsSourceBTempC=dstsSourceBTempC, cpmSensorTable=cpmSensorTable, cpmSensorEntry=cpmSensorEntry, cpmSensorIndex=cpmSensorIndex, cpmSensorSerial=cpmSensorSerial, cpmSensorName=cpmSensorName, cpmSensorAvail=cpmSensorAvail, cpmSensorStatus=cpmSensorStatus, smokeAlarmTable=smokeAlarmTable, smokeAlarmEntry=smokeAlarmEntry, smokeAlarmIndex=smokeAlarmIndex, smokeAlarmSerial=smokeAlarmSerial, smokeAlarmName=smokeAlarmName, smokeAlarmAvail=smokeAlarmAvail, smokeAlarmStatus=smokeAlarmStatus, neg48VdcSensorTable=neg48VdcSensorTable, neg48VdcSensorEntry=neg48VdcSensorEntry, neg48VdcSensorIndex=neg48VdcSensorIndex, neg48VdcSensorSerial=neg48VdcSensorSerial, neg48VdcSensorName=neg48VdcSensorName, neg48VdcSensorAvail=neg48VdcSensorAvail)
mibBuilder.exportSymbols("GEIST-MIB-V3", neg48VdcSensorVoltage=neg48VdcSensorVoltage, pos30VdcSensorTable=pos30VdcSensorTable, pos30VdcSensorEntry=pos30VdcSensorEntry, pos30VdcSensorIndex=pos30VdcSensorIndex, pos30VdcSensorSerial=pos30VdcSensorSerial, pos30VdcSensorName=pos30VdcSensorName, pos30VdcSensorAvail=pos30VdcSensorAvail, pos30VdcSensorVoltage=pos30VdcSensorVoltage, analogSensorTable=analogSensorTable, analogSensorEntry=analogSensorEntry, analogSensorIndex=analogSensorIndex, analogSensorSerial=analogSensorSerial, analogSensorName=analogSensorName, analogSensorAvail=analogSensorAvail, analogSensorAnalog=analogSensorAnalog, ctrl3ChIECTable=ctrl3ChIECTable, ctrl3ChIECEntry=ctrl3ChIECEntry, ctrl3ChIECIndex=ctrl3ChIECIndex, ctrl3ChIECSerial=ctrl3ChIECSerial, ctrl3ChIECName=ctrl3ChIECName, ctrl3ChIECAvail=ctrl3ChIECAvail, ctrl3ChIECkWattHrsA=ctrl3ChIECkWattHrsA, ctrl3ChIECVoltsA=ctrl3ChIECVoltsA, ctrl3ChIECVoltPeakA=ctrl3ChIECVoltPeakA, ctrl3ChIECDeciAmpsA=ctrl3ChIECDeciAmpsA, ctrl3ChIECDeciAmpsPeakA=ctrl3ChIECDeciAmpsPeakA, ctrl3ChIECRealPowerA=ctrl3ChIECRealPowerA, ctrl3ChIECApparentPowerA=ctrl3ChIECApparentPowerA, ctrl3ChIECPowerFactorA=ctrl3ChIECPowerFactorA, ctrl3ChIECkWattHrsB=ctrl3ChIECkWattHrsB, ctrl3ChIECVoltsB=ctrl3ChIECVoltsB, ctrl3ChIECVoltPeakB=ctrl3ChIECVoltPeakB, ctrl3ChIECDeciAmpsB=ctrl3ChIECDeciAmpsB, ctrl3ChIECDeciAmpsPeakB=ctrl3ChIECDeciAmpsPeakB, ctrl3ChIECRealPowerB=ctrl3ChIECRealPowerB, ctrl3ChIECApparentPowerB=ctrl3ChIECApparentPowerB, ctrl3ChIECPowerFactorB=ctrl3ChIECPowerFactorB, ctrl3ChIECkWattHrsC=ctrl3ChIECkWattHrsC, ctrl3ChIECVoltsC=ctrl3ChIECVoltsC, ctrl3ChIECVoltPeakC=ctrl3ChIECVoltPeakC, ctrl3ChIECDeciAmpsC=ctrl3ChIECDeciAmpsC, ctrl3ChIECDeciAmpsPeakC=ctrl3ChIECDeciAmpsPeakC, ctrl3ChIECRealPowerC=ctrl3ChIECRealPowerC, ctrl3ChIECApparentPowerC=ctrl3ChIECApparentPowerC, ctrl3ChIECPowerFactorC=ctrl3ChIECPowerFactorC, ctrl3ChIECkWattHrsTotal=ctrl3ChIECkWattHrsTotal, ctrl3ChIECRealPowerTotal=ctrl3ChIECRealPowerTotal, climateRelayTable=climateRelayTable, climateRelayEntry=climateRelayEntry, climateRelayIndex=climateRelayIndex, climateRelaySerial=climateRelaySerial, climateRelayName=climateRelayName, climateRelayAvail=climateRelayAvail, climateRelayTempC=climateRelayTempC, climateRelayTempF=climateRelayTempF, climateRelayIO1=climateRelayIO1, climateRelayIO2=climateRelayIO2, climateRelayIO3=climateRelayIO3, climateRelayIO4=climateRelayIO4, climateRelayIO5=climateRelayIO5, climateRelayIO6=climateRelayIO6, ctrlRelayTable=ctrlRelayTable, ctrlRelayEntry=ctrlRelayEntry, ctrlRelayIndex=ctrlRelayIndex, ctrlRelayName=ctrlRelayName, ctrlRelayState=ctrlRelayState, ctrlRelayLatchingMode=ctrlRelayLatchingMode, ctrlRelayOverride=ctrlRelayOverride, ctrlRelayAcknowledge=ctrlRelayAcknowledge, airSpeedSwitchSensorTable=airSpeedSwitchSensorTable, airSpeedSwitchSensorEntry=airSpeedSwitchSensorEntry, airSpeedSwitchSensorIndex=airSpeedSwitchSensorIndex, airSpeedSwitchSensorSerial=airSpeedSwitchSensorSerial, airSpeedSwitchSensorName=airSpeedSwitchSensorName, airSpeedSwitchSensorAvail=airSpeedSwitchSensorAvail, airSpeedSwitchSensorAirSpeed=airSpeedSwitchSensorAirSpeed, powerDMTable=powerDMTable, powerDMEntry=powerDMEntry, powerDMIndex=powerDMIndex, powerDMSerial=powerDMSerial, powerDMName=powerDMName, powerDMAvail=powerDMAvail, powerDMUnitInfoTitle=powerDMUnitInfoTitle, powerDMUnitInfoVersion=powerDMUnitInfoVersion, powerDMUnitInfoMainCount=powerDMUnitInfoMainCount, powerDMUnitInfoAuxCount=powerDMUnitInfoAuxCount, powerDMChannelName1=powerDMChannelName1, powerDMChannelName2=powerDMChannelName2, powerDMChannelName3=powerDMChannelName3, powerDMChannelName4=powerDMChannelName4, powerDMChannelName5=powerDMChannelName5, powerDMChannelName6=powerDMChannelName6, powerDMChannelName7=powerDMChannelName7, powerDMChannelName8=powerDMChannelName8, powerDMChannelName9=powerDMChannelName9, powerDMChannelName10=powerDMChannelName10, powerDMChannelName11=powerDMChannelName11, powerDMChannelName12=powerDMChannelName12, powerDMChannelName13=powerDMChannelName13, powerDMChannelName14=powerDMChannelName14, powerDMChannelName15=powerDMChannelName15, powerDMChannelName16=powerDMChannelName16, powerDMChannelName17=powerDMChannelName17, powerDMChannelName18=powerDMChannelName18, powerDMChannelName19=powerDMChannelName19, powerDMChannelName20=powerDMChannelName20, powerDMChannelName21=powerDMChannelName21, powerDMChannelName22=powerDMChannelName22, powerDMChannelName23=powerDMChannelName23, powerDMChannelName24=powerDMChannelName24, powerDMChannelName25=powerDMChannelName25, powerDMChannelName26=powerDMChannelName26, powerDMChannelName27=powerDMChannelName27, powerDMChannelName28=powerDMChannelName28, powerDMChannelName29=powerDMChannelName29, powerDMChannelName30=powerDMChannelName30, powerDMChannelName31=powerDMChannelName31, powerDMChannelName32=powerDMChannelName32, powerDMChannelName33=powerDMChannelName33, powerDMChannelName34=powerDMChannelName34, powerDMChannelName35=powerDMChannelName35, powerDMChannelName36=powerDMChannelName36, powerDMChannelName37=powerDMChannelName37, powerDMChannelName38=powerDMChannelName38, powerDMChannelName39=powerDMChannelName39, powerDMChannelName40=powerDMChannelName40, powerDMChannelName41=powerDMChannelName41)
mibBuilder.exportSymbols("GEIST-MIB-V3", powerDMChannelName42=powerDMChannelName42, powerDMChannelName43=powerDMChannelName43, powerDMChannelName44=powerDMChannelName44, powerDMChannelName45=powerDMChannelName45, powerDMChannelName46=powerDMChannelName46, powerDMChannelName47=powerDMChannelName47, powerDMChannelName48=powerDMChannelName48, powerDMChannelFriendly1=powerDMChannelFriendly1, powerDMChannelFriendly2=powerDMChannelFriendly2, powerDMChannelFriendly3=powerDMChannelFriendly3, powerDMChannelFriendly4=powerDMChannelFriendly4, powerDMChannelFriendly5=powerDMChannelFriendly5, powerDMChannelFriendly6=powerDMChannelFriendly6, powerDMChannelFriendly7=powerDMChannelFriendly7, powerDMChannelFriendly8=powerDMChannelFriendly8, powerDMChannelFriendly9=powerDMChannelFriendly9, powerDMChannelFriendly10=powerDMChannelFriendly10, powerDMChannelFriendly11=powerDMChannelFriendly11, powerDMChannelFriendly12=powerDMChannelFriendly12, powerDMChannelFriendly13=powerDMChannelFriendly13, powerDMChannelFriendly14=powerDMChannelFriendly14, powerDMChannelFriendly15=powerDMChannelFriendly15, powerDMChannelFriendly16=powerDMChannelFriendly16, powerDMChannelFriendly17=powerDMChannelFriendly17, powerDMChannelFriendly18=powerDMChannelFriendly18, powerDMChannelFriendly19=powerDMChannelFriendly19, powerDMChannelFriendly20=powerDMChannelFriendly20, powerDMChannelFriendly21=powerDMChannelFriendly21, powerDMChannelFriendly22=powerDMChannelFriendly22, powerDMChannelFriendly23=powerDMChannelFriendly23, powerDMChannelFriendly24=powerDMChannelFriendly24, powerDMChannelFriendly25=powerDMChannelFriendly25, powerDMChannelFriendly26=powerDMChannelFriendly26, powerDMChannelFriendly27=powerDMChannelFriendly27, powerDMChannelFriendly28=powerDMChannelFriendly28, powerDMChannelFriendly29=powerDMChannelFriendly29, powerDMChannelFriendly30=powerDMChannelFriendly30, powerDMChannelFriendly31=powerDMChannelFriendly31, powerDMChannelFriendly32=powerDMChannelFriendly32, powerDMChannelFriendly33=powerDMChannelFriendly33, powerDMChannelFriendly34=powerDMChannelFriendly34, powerDMChannelFriendly35=powerDMChannelFriendly35, powerDMChannelFriendly36=powerDMChannelFriendly36, powerDMChannelFriendly37=powerDMChannelFriendly37, powerDMChannelFriendly38=powerDMChannelFriendly38, powerDMChannelFriendly39=powerDMChannelFriendly39, powerDMChannelFriendly40=powerDMChannelFriendly40, powerDMChannelFriendly41=powerDMChannelFriendly41, powerDMChannelFriendly42=powerDMChannelFriendly42, powerDMChannelFriendly43=powerDMChannelFriendly43, powerDMChannelFriendly44=powerDMChannelFriendly44, powerDMChannelFriendly45=powerDMChannelFriendly45, powerDMChannelFriendly46=powerDMChannelFriendly46, powerDMChannelFriendly47=powerDMChannelFriendly47, powerDMChannelFriendly48=powerDMChannelFriendly48, powerDMChannelGroup1=powerDMChannelGroup1, powerDMChannelGroup2=powerDMChannelGroup2, powerDMChannelGroup3=powerDMChannelGroup3, powerDMChannelGroup4=powerDMChannelGroup4, powerDMChannelGroup5=powerDMChannelGroup5, powerDMChannelGroup6=powerDMChannelGroup6, powerDMChannelGroup7=powerDMChannelGroup7, powerDMChannelGroup8=powerDMChannelGroup8, powerDMChannelGroup9=powerDMChannelGroup9, powerDMChannelGroup10=powerDMChannelGroup10, powerDMChannelGroup11=powerDMChannelGroup11, powerDMChannelGroup12=powerDMChannelGroup12, powerDMChannelGroup13=powerDMChannelGroup13, powerDMChannelGroup14=powerDMChannelGroup14, powerDMChannelGroup15=powerDMChannelGroup15, powerDMChannelGroup16=powerDMChannelGroup16, powerDMChannelGroup17=powerDMChannelGroup17, powerDMChannelGroup18=powerDMChannelGroup18, powerDMChannelGroup19=powerDMChannelGroup19, powerDMChannelGroup20=powerDMChannelGroup20, powerDMChannelGroup21=powerDMChannelGroup21, powerDMChannelGroup22=powerDMChannelGroup22, powerDMChannelGroup23=powerDMChannelGroup23, powerDMChannelGroup24=powerDMChannelGroup24, powerDMChannelGroup25=powerDMChannelGroup25, powerDMChannelGroup26=powerDMChannelGroup26, powerDMChannelGroup27=powerDMChannelGroup27, powerDMChannelGroup28=powerDMChannelGroup28, powerDMChannelGroup29=powerDMChannelGroup29, powerDMChannelGroup30=powerDMChannelGroup30, powerDMChannelGroup31=powerDMChannelGroup31, powerDMChannelGroup32=powerDMChannelGroup32, powerDMChannelGroup33=powerDMChannelGroup33, powerDMChannelGroup34=powerDMChannelGroup34, powerDMChannelGroup35=powerDMChannelGroup35, powerDMChannelGroup36=powerDMChannelGroup36, powerDMChannelGroup37=powerDMChannelGroup37, powerDMChannelGroup38=powerDMChannelGroup38, powerDMChannelGroup39=powerDMChannelGroup39, powerDMChannelGroup40=powerDMChannelGroup40, powerDMChannelGroup41=powerDMChannelGroup41, powerDMChannelGroup42=powerDMChannelGroup42, powerDMChannelGroup43=powerDMChannelGroup43, powerDMChannelGroup44=powerDMChannelGroup44, powerDMChannelGroup45=powerDMChannelGroup45, powerDMChannelGroup46=powerDMChannelGroup46, powerDMChannelGroup47=powerDMChannelGroup47, powerDMChannelGroup48=powerDMChannelGroup48, powerDMDeciAmps1=powerDMDeciAmps1, powerDMDeciAmps2=powerDMDeciAmps2, powerDMDeciAmps3=powerDMDeciAmps3, powerDMDeciAmps4=powerDMDeciAmps4, powerDMDeciAmps5=powerDMDeciAmps5, powerDMDeciAmps6=powerDMDeciAmps6, powerDMDeciAmps7=powerDMDeciAmps7, powerDMDeciAmps8=powerDMDeciAmps8, powerDMDeciAmps9=powerDMDeciAmps9, powerDMDeciAmps10=powerDMDeciAmps10, powerDMDeciAmps11=powerDMDeciAmps11, powerDMDeciAmps12=powerDMDeciAmps12, powerDMDeciAmps13=powerDMDeciAmps13, powerDMDeciAmps14=powerDMDeciAmps14, powerDMDeciAmps15=powerDMDeciAmps15, powerDMDeciAmps16=powerDMDeciAmps16, powerDMDeciAmps17=powerDMDeciAmps17, powerDMDeciAmps18=powerDMDeciAmps18, powerDMDeciAmps19=powerDMDeciAmps19, powerDMDeciAmps20=powerDMDeciAmps20, powerDMDeciAmps21=powerDMDeciAmps21, powerDMDeciAmps22=powerDMDeciAmps22, powerDMDeciAmps23=powerDMDeciAmps23, powerDMDeciAmps24=powerDMDeciAmps24)
mibBuilder.exportSymbols("GEIST-MIB-V3", powerDMDeciAmps25=powerDMDeciAmps25, powerDMDeciAmps26=powerDMDeciAmps26, powerDMDeciAmps27=powerDMDeciAmps27, powerDMDeciAmps28=powerDMDeciAmps28, powerDMDeciAmps29=powerDMDeciAmps29, powerDMDeciAmps30=powerDMDeciAmps30, powerDMDeciAmps31=powerDMDeciAmps31, powerDMDeciAmps32=powerDMDeciAmps32, powerDMDeciAmps33=powerDMDeciAmps33, powerDMDeciAmps34=powerDMDeciAmps34, powerDMDeciAmps35=powerDMDeciAmps35, powerDMDeciAmps36=powerDMDeciAmps36, powerDMDeciAmps37=powerDMDeciAmps37, powerDMDeciAmps38=powerDMDeciAmps38, powerDMDeciAmps39=powerDMDeciAmps39, powerDMDeciAmps40=powerDMDeciAmps40, powerDMDeciAmps41=powerDMDeciAmps41, powerDMDeciAmps42=powerDMDeciAmps42, powerDMDeciAmps43=powerDMDeciAmps43, powerDMDeciAmps44=powerDMDeciAmps44, powerDMDeciAmps45=powerDMDeciAmps45, powerDMDeciAmps46=powerDMDeciAmps46, powerDMDeciAmps47=powerDMDeciAmps47, powerDMDeciAmps48=powerDMDeciAmps48, ioExpanderTable=ioExpanderTable, ioExpanderEntry=ioExpanderEntry, ioExpanderIndex=ioExpanderIndex, ioExpanderSerial=ioExpanderSerial, ioExpanderName=ioExpanderName, ioExpanderAvail=ioExpanderAvail, ioExpanderFriendlyName1=ioExpanderFriendlyName1, ioExpanderFriendlyName2=ioExpanderFriendlyName2, ioExpanderFriendlyName3=ioExpanderFriendlyName3, ioExpanderFriendlyName4=ioExpanderFriendlyName4, ioExpanderFriendlyName5=ioExpanderFriendlyName5, ioExpanderFriendlyName6=ioExpanderFriendlyName6, ioExpanderFriendlyName7=ioExpanderFriendlyName7, ioExpanderFriendlyName8=ioExpanderFriendlyName8, ioExpanderFriendlyName9=ioExpanderFriendlyName9, ioExpanderFriendlyName10=ioExpanderFriendlyName10, ioExpanderFriendlyName11=ioExpanderFriendlyName11, ioExpanderFriendlyName12=ioExpanderFriendlyName12, ioExpanderFriendlyName13=ioExpanderFriendlyName13, ioExpanderFriendlyName14=ioExpanderFriendlyName14, ioExpanderFriendlyName15=ioExpanderFriendlyName15, ioExpanderFriendlyName16=ioExpanderFriendlyName16, ioExpanderFriendlyName17=ioExpanderFriendlyName17, ioExpanderFriendlyName18=ioExpanderFriendlyName18, ioExpanderFriendlyName19=ioExpanderFriendlyName19, ioExpanderFriendlyName20=ioExpanderFriendlyName20, ioExpanderFriendlyName21=ioExpanderFriendlyName21, ioExpanderFriendlyName22=ioExpanderFriendlyName22, ioExpanderFriendlyName23=ioExpanderFriendlyName23, ioExpanderFriendlyName24=ioExpanderFriendlyName24, ioExpanderFriendlyName25=ioExpanderFriendlyName25, ioExpanderFriendlyName26=ioExpanderFriendlyName26, ioExpanderFriendlyName27=ioExpanderFriendlyName27, ioExpanderFriendlyName28=ioExpanderFriendlyName28, ioExpanderFriendlyName29=ioExpanderFriendlyName29, ioExpanderFriendlyName30=ioExpanderFriendlyName30, ioExpanderFriendlyName31=ioExpanderFriendlyName31, ioExpanderFriendlyName32=ioExpanderFriendlyName32, ioExpanderIO1=ioExpanderIO1, ioExpanderIO2=ioExpanderIO2, ioExpanderIO3=ioExpanderIO3, ioExpanderIO4=ioExpanderIO4, ioExpanderIO5=ioExpanderIO5, ioExpanderIO6=ioExpanderIO6, ioExpanderIO7=ioExpanderIO7, ioExpanderIO8=ioExpanderIO8, ioExpanderIO9=ioExpanderIO9, ioExpanderIO10=ioExpanderIO10, ioExpanderIO11=ioExpanderIO11, ioExpanderIO12=ioExpanderIO12, ioExpanderIO13=ioExpanderIO13, ioExpanderIO14=ioExpanderIO14, ioExpanderIO15=ioExpanderIO15, ioExpanderIO16=ioExpanderIO16, ioExpanderIO17=ioExpanderIO17, ioExpanderIO18=ioExpanderIO18, ioExpanderIO19=ioExpanderIO19, ioExpanderIO20=ioExpanderIO20, ioExpanderIO21=ioExpanderIO21, ioExpanderIO22=ioExpanderIO22, ioExpanderIO23=ioExpanderIO23, ioExpanderIO24=ioExpanderIO24, ioExpanderIO25=ioExpanderIO25, ioExpanderIO26=ioExpanderIO26, ioExpanderIO27=ioExpanderIO27, ioExpanderIO28=ioExpanderIO28, ioExpanderIO29=ioExpanderIO29, ioExpanderIO30=ioExpanderIO30, ioExpanderIO31=ioExpanderIO31, ioExpanderIO32=ioExpanderIO32, ioExpanderRelayName1=ioExpanderRelayName1, ioExpanderRelayState1=ioExpanderRelayState1, ioExpanderRelayLatchingMode1=ioExpanderRelayLatchingMode1, ioExpanderRelayOverride1=ioExpanderRelayOverride1, ioExpanderRelayAcknowledge1=ioExpanderRelayAcknowledge1, ioExpanderRelayName2=ioExpanderRelayName2, ioExpanderRelayState2=ioExpanderRelayState2, ioExpanderRelayLatchingMode2=ioExpanderRelayLatchingMode2, ioExpanderRelayOverride2=ioExpanderRelayOverride2, ioExpanderRelayAcknowledge2=ioExpanderRelayAcknowledge2, ioExpanderRelayName3=ioExpanderRelayName3, ioExpanderRelayState3=ioExpanderRelayState3, ioExpanderRelayLatchingMode3=ioExpanderRelayLatchingMode3, ioExpanderRelayOverride3=ioExpanderRelayOverride3, ioExpanderRelayAcknowledge3=ioExpanderRelayAcknowledge3, t3hdSensorTable=t3hdSensorTable, t3hdSensorEntry=t3hdSensorEntry, t3hdSensorIndex=t3hdSensorIndex, t3hdSensorSerial=t3hdSensorSerial, t3hdSensorName=t3hdSensorName, t3hdSensorAvail=t3hdSensorAvail, t3hdSensorIntName=t3hdSensorIntName, t3hdSensorIntTempC=t3hdSensorIntTempC, t3hdSensorIntTempF=t3hdSensorIntTempF, t3hdSensorIntHumidity=t3hdSensorIntHumidity, t3hdSensorIntDewPointC=t3hdSensorIntDewPointC, t3hdSensorIntDewPointF=t3hdSensorIntDewPointF, t3hdSensorExt1Avail=t3hdSensorExt1Avail, t3hdSensorExt1Name=t3hdSensorExt1Name, t3hdSensorExt1TempC=t3hdSensorExt1TempC, t3hdSensorExt1TempF=t3hdSensorExt1TempF, t3hdSensorExt2Avail=t3hdSensorExt2Avail, t3hdSensorExt2Name=t3hdSensorExt2Name)
mibBuilder.exportSymbols("GEIST-MIB-V3", t3hdSensorExt2TempC=t3hdSensorExt2TempC, t3hdSensorExt2TempF=t3hdSensorExt2TempF, thdSensorTable=thdSensorTable, thdSensorEntry=thdSensorEntry, thdSensorIndex=thdSensorIndex, thdSensorSerial=thdSensorSerial, thdSensorName=thdSensorName, thdSensorAvail=thdSensorAvail, thdSensorTempC=thdSensorTempC, thdSensorTempF=thdSensorTempF, thdSensorHumidity=thdSensorHumidity, thdSensorDewPointC=thdSensorDewPointC, thdSensorDewPointF=thdSensorDewPointF, pos60VdcSensorTable=pos60VdcSensorTable, pos60VdcSensorEntry=pos60VdcSensorEntry, pos60VdcSensorIndex=pos60VdcSensorIndex, pos60VdcSensorSerial=pos60VdcSensorSerial, pos60VdcSensorName=pos60VdcSensorName, pos60VdcSensorAvail=pos60VdcSensorAvail, pos60VdcSensorVoltage=pos60VdcSensorVoltage, ctrl2CirTotTable=ctrl2CirTotTable, ctrl2CirTotEntry=ctrl2CirTotEntry, ctrl2CirTotIndex=ctrl2CirTotIndex, ctrl2CirTotSerial=ctrl2CirTotSerial, ctrl2CirTotName=ctrl2CirTotName, ctrl2CirTotAvail=ctrl2CirTotAvail, ctrl2CirTotkWattHrsTot=ctrl2CirTotkWattHrsTot, ctrl2CirTotVoltsTot=ctrl2CirTotVoltsTot, ctrl2CirTotVoltPeakTot=ctrl2CirTotVoltPeakTot, ctrl2CirTotDeciAmpsTot=ctrl2CirTotDeciAmpsTot, ctrl2CirTotDeciAmpsPeakTot=ctrl2CirTotDeciAmpsPeakTot, ctrl2CirTotRealPowerTot=ctrl2CirTotRealPowerTot, ctrl2CirTotApparentPowerTot=ctrl2CirTotApparentPowerTot, ctrl2CirTotPowerFactorTot=ctrl2CirTotPowerFactorTot, ctrl2CirTotkWattHrsA=ctrl2CirTotkWattHrsA, ctrl2CirTotVoltsA=ctrl2CirTotVoltsA, ctrl2CirTotVoltPeakA=ctrl2CirTotVoltPeakA, ctrl2CirTotDeciAmpsA=ctrl2CirTotDeciAmpsA, ctrl2CirTotDeciAmpsPeakA=ctrl2CirTotDeciAmpsPeakA, ctrl2CirTotRealPowerA=ctrl2CirTotRealPowerA, ctrl2CirTotApparentPowerA=ctrl2CirTotApparentPowerA, ctrl2CirTotPowerFactorA=ctrl2CirTotPowerFactorA, ctrl2CirTotkWattHrsB=ctrl2CirTotkWattHrsB, ctrl2CirTotVoltsB=ctrl2CirTotVoltsB, ctrl2CirTotVoltPeakB=ctrl2CirTotVoltPeakB, ctrl2CirTotDeciAmpsB=ctrl2CirTotDeciAmpsB, ctrl2CirTotDeciAmpsPeakB=ctrl2CirTotDeciAmpsPeakB, ctrl2CirTotRealPowerB=ctrl2CirTotRealPowerB, ctrl2CirTotApparentPowerB=ctrl2CirTotApparentPowerB, ctrl2CirTotPowerFactorB=ctrl2CirTotPowerFactorB, sc10Table=sc10Table, sc10Entry=sc10Entry, sc10Index=sc10Index, sc10Serial=sc10Serial, sc10Name=sc10Name, sc10Avail=sc10Avail, sc10ControlMode=sc10ControlMode, sc10SetpointC=sc10SetpointC, sc10SetpointF=sc10SetpointF, sc10TempC=sc10TempC, sc10TempF=sc10TempF, sc10Capacity=sc10Capacity, alarmSystem=alarmSystem, alarmCfgTable=alarmCfgTable, alarmCfgEntry=alarmCfgEntry, alarmCfgIndex=alarmCfgIndex, alarmCfgReadingID=alarmCfgReadingID, alarmCfgThreshold=alarmCfgThreshold, alarmCfgTripSelect=alarmCfgTripSelect, gstTrap=gstTrap, gstTrapPrefix=gstTrapPrefix)

# Notifications
mibBuilder.exportSymbols("GEIST-MIB-V3", gstTestNOTIFY=gstTestNOTIFY, gstClimateTempCNOTIFY=gstClimateTempCNOTIFY, gstClimateTempFNOTIFY=gstClimateTempFNOTIFY, gstClimateHumidityNOTIFY=gstClimateHumidityNOTIFY, gstClimateLightNOTIFY=gstClimateLightNOTIFY, gstClimateAirflowNOTIFY=gstClimateAirflowNOTIFY, gstClimateSoundNOTIFY=gstClimateSoundNOTIFY, gstClimateIO1NOTIFY=gstClimateIO1NOTIFY, gstClimateIO2NOTIFY=gstClimateIO2NOTIFY, gstClimateIO3NOTIFY=gstClimateIO3NOTIFY, gstClimateVoltsNOTIFY=gstClimateVoltsNOTIFY, gstClimateVoltPeakNOTIFY=gstClimateVoltPeakNOTIFY, gstClimateDeciAmpsANOTIFY=gstClimateDeciAmpsANOTIFY, gstClimateDeciAmpPeakANOTIFY=gstClimateDeciAmpPeakANOTIFY, gstClimateRealPowerANOTIFY=gstClimateRealPowerANOTIFY, gstClimateApparentPowerANOTIFY=gstClimateApparentPowerANOTIFY, gstClimatePowerFactorANOTIFY=gstClimatePowerFactorANOTIFY, gstClimateDeciAmpsBNOTIFY=gstClimateDeciAmpsBNOTIFY, gstClimateDeciAmpPeakBNOTIFY=gstClimateDeciAmpPeakBNOTIFY, gstClimateRealPowerBNOTIFY=gstClimateRealPowerBNOTIFY, gstClimateApparentPowerBNOTIFY=gstClimateApparentPowerBNOTIFY, gstClimatePowerFactorBNOTIFY=gstClimatePowerFactorBNOTIFY, gstClimateDeciAmpsCNOTIFY=gstClimateDeciAmpsCNOTIFY, gstClimateDeciAmpPeakCNOTIFY=gstClimateDeciAmpPeakCNOTIFY, gstClimateRealPowerCNOTIFY=gstClimateRealPowerCNOTIFY, gstClimateApparentPowerCNOTIFY=gstClimateApparentPowerCNOTIFY, gstClimatePowerFactorCNOTIFY=gstClimatePowerFactorCNOTIFY, gstClimateDewPointCNOTIFY=gstClimateDewPointCNOTIFY, gstClimateDewPointFNOTIFY=gstClimateDewPointFNOTIFY, gstPowMonkWattHrsNOTIFY=gstPowMonkWattHrsNOTIFY, gstPowMonVoltsNOTIFY=gstPowMonVoltsNOTIFY, gstPowMonVoltMaxNOTIFY=gstPowMonVoltMaxNOTIFY, gstPowMonVoltMinNOTIFY=gstPowMonVoltMinNOTIFY, gstPowMonVoltPeakNOTIFY=gstPowMonVoltPeakNOTIFY, gstPowMonDeciAmpsNOTIFY=gstPowMonDeciAmpsNOTIFY, gstPowMonRealPowerNOTIFY=gstPowMonRealPowerNOTIFY, gstPowMonApparentPowerNOTIFY=gstPowMonApparentPowerNOTIFY, gstPowMonPowerFactorNOTIFY=gstPowMonPowerFactorNOTIFY, gstPowMonOutlet1NOTIFY=gstPowMonOutlet1NOTIFY, gstPowMonOutlet2NOTIFY=gstPowMonOutlet2NOTIFY, gstPowMonOutlet1StatusTimeNOTIFY=gstPowMonOutlet1StatusTimeNOTIFY, gstPowMonOutlet2StatusTimeNOTIFY=gstPowMonOutlet2StatusTimeNOTIFY, gstTempSensorTempCNOTIFY=gstTempSensorTempCNOTIFY, gstTempSensorTempFNOTIFY=gstTempSensorTempFNOTIFY, gstAirFlowSensorTempCNOTIFY=gstAirFlowSensorTempCNOTIFY, gstAirFlowSensorTempFNOTIFY=gstAirFlowSensorTempFNOTIFY, gstAirFlowSensorFlowNOTIFY=gstAirFlowSensorFlowNOTIFY, gstAirFlowSensorHumidityNOTIFY=gstAirFlowSensorHumidityNOTIFY, gstAirFlowSensorDewPointCNOTIFY=gstAirFlowSensorDewPointCNOTIFY, gstAirFlowSensorDewPointFNOTIFY=gstAirFlowSensorDewPointFNOTIFY, gstCtrl3ChDELTADeciAmpsANOTIFY=gstCtrl3ChDELTADeciAmpsANOTIFY, gstCtrl3ChDELTADeciAmpsBNOTIFY=gstCtrl3ChDELTADeciAmpsBNOTIFY, gstCtrl3ChDELTADeciAmpsCNOTIFY=gstCtrl3ChDELTADeciAmpsCNOTIFY, gstCtrl3ChDELTAkWattHrsTotalNOTIFY=gstCtrl3ChDELTAkWattHrsTotalNOTIFY, gstCtrl3ChDELTARealPowerTotalNOTIFY=gstCtrl3ChDELTARealPowerTotalNOTIFY, gstCtrl3ChDELTAkWattHrsABNOTIFY=gstCtrl3ChDELTAkWattHrsABNOTIFY, gstCtrl3ChDELTAVoltsABNOTIFY=gstCtrl3ChDELTAVoltsABNOTIFY, gstCtrl3ChDELTAVoltPeakABNOTIFY=gstCtrl3ChDELTAVoltPeakABNOTIFY, gstCtrl3ChDELTARealPowerABNOTIFY=gstCtrl3ChDELTARealPowerABNOTIFY, gstCtrl3ChDELTAApparentPowerABNOTIFY=gstCtrl3ChDELTAApparentPowerABNOTIFY, gstCtrl3ChDELTAPowerFactorABNOTIFY=gstCtrl3ChDELTAPowerFactorABNOTIFY, gstCtrl3ChDELTAkWattHrsBCNOTIFY=gstCtrl3ChDELTAkWattHrsBCNOTIFY, gstCtrl3ChDELTAVoltsBCNOTIFY=gstCtrl3ChDELTAVoltsBCNOTIFY, gstCtrl3ChDELTAVoltPeakBCNOTIFY=gstCtrl3ChDELTAVoltPeakBCNOTIFY, gstCtrl3ChDELTARealPowerBCNOTIFY=gstCtrl3ChDELTARealPowerBCNOTIFY, gstCtrl3ChDELTAApparentPowerBCNOTIFY=gstCtrl3ChDELTAApparentPowerBCNOTIFY, gstCtrl3ChDELTAPowerFactorBCNOTIFY=gstCtrl3ChDELTAPowerFactorBCNOTIFY, gstCtrl3ChDELTAkWattHrsCANOTIFY=gstCtrl3ChDELTAkWattHrsCANOTIFY, gstCtrl3ChDELTAVoltsCANOTIFY=gstCtrl3ChDELTAVoltsCANOTIFY, gstCtrl3ChDELTAVoltPeakCANOTIFY=gstCtrl3ChDELTAVoltPeakCANOTIFY, gstCtrl3ChDELTARealPowerCANOTIFY=gstCtrl3ChDELTARealPowerCANOTIFY, gstCtrl3ChDELTAApparentPowerCANOTIFY=gstCtrl3ChDELTAApparentPowerCANOTIFY, gstCtrl3ChDELTAPowerFactorCANOTIFY=gstCtrl3ChDELTAPowerFactorCANOTIFY, gstDoorSensorStatusNOTIFY=gstDoorSensorStatusNOTIFY, gstWaterSensorDampnessNOTIFY=gstWaterSensorDampnessNOTIFY, gstCurrentMonitorDeciAmpsNOTIFY=gstCurrentMonitorDeciAmpsNOTIFY, gstMillivoltMonitorMVNOTIFY=gstMillivoltMonitorMVNOTIFY, gstPow3ChkWattHrsANOTIFY=gstPow3ChkWattHrsANOTIFY, gstPow3ChVoltsANOTIFY=gstPow3ChVoltsANOTIFY, gstPow3ChVoltMaxANOTIFY=gstPow3ChVoltMaxANOTIFY, gstPow3ChVoltMinANOTIFY=gstPow3ChVoltMinANOTIFY, gstPow3ChVoltPeakANOTIFY=gstPow3ChVoltPeakANOTIFY, gstPow3ChDeciAmpsANOTIFY=gstPow3ChDeciAmpsANOTIFY, gstPow3ChRealPowerANOTIFY=gstPow3ChRealPowerANOTIFY, gstPow3ChApparentPowerANOTIFY=gstPow3ChApparentPowerANOTIFY, gstPow3ChPowerFactorANOTIFY=gstPow3ChPowerFactorANOTIFY, gstPow3ChkWattHrsBNOTIFY=gstPow3ChkWattHrsBNOTIFY, gstPow3ChVoltsBNOTIFY=gstPow3ChVoltsBNOTIFY, gstPow3ChVoltMaxBNOTIFY=gstPow3ChVoltMaxBNOTIFY, gstPow3ChVoltMinBNOTIFY=gstPow3ChVoltMinBNOTIFY, gstPow3ChVoltPeakBNOTIFY=gstPow3ChVoltPeakBNOTIFY, gstPow3ChDeciAmpsBNOTIFY=gstPow3ChDeciAmpsBNOTIFY, gstPow3ChRealPowerBNOTIFY=gstPow3ChRealPowerBNOTIFY, gstPow3ChApparentPowerBNOTIFY=gstPow3ChApparentPowerBNOTIFY, gstPow3ChPowerFactorBNOTIFY=gstPow3ChPowerFactorBNOTIFY, gstPow3ChkWattHrsCNOTIFY=gstPow3ChkWattHrsCNOTIFY, gstPow3ChVoltsCNOTIFY=gstPow3ChVoltsCNOTIFY, gstPow3ChVoltMaxCNOTIFY=gstPow3ChVoltMaxCNOTIFY, gstPow3ChVoltMinCNOTIFY=gstPow3ChVoltMinCNOTIFY, gstPow3ChVoltPeakCNOTIFY=gstPow3ChVoltPeakCNOTIFY, gstPow3ChDeciAmpsCNOTIFY=gstPow3ChDeciAmpsCNOTIFY, gstPow3ChRealPowerCNOTIFY=gstPow3ChRealPowerCNOTIFY, gstPow3ChApparentPowerCNOTIFY=gstPow3ChApparentPowerCNOTIFY, gstPow3ChPowerFactorCNOTIFY=gstPow3ChPowerFactorCNOTIFY, gstPow3ChkWattHrsTotalNOTIFY=gstPow3ChkWattHrsTotalNOTIFY, gstPow3ChRealPowerTotalNOTIFY=gstPow3ChRealPowerTotalNOTIFY, gstOutlet1StatusNOTIFY=gstOutlet1StatusNOTIFY, gstOutlet2StatusNOTIFY=gstOutlet2StatusNOTIFY, gstVsfcSetPointCNOTIFY=gstVsfcSetPointCNOTIFY, gstVsfcSetPointFNOTIFY=gstVsfcSetPointFNOTIFY, gstVsfcFanSpeedNOTIFY=gstVsfcFanSpeedNOTIFY, gstVsfcIntTempCNOTIFY=gstVsfcIntTempCNOTIFY, gstVsfcIntTempFNOTIFY=gstVsfcIntTempFNOTIFY, gstVsfcExt1TempCNOTIFY=gstVsfcExt1TempCNOTIFY, gstVsfcExt1TempFNOTIFY=gstVsfcExt1TempFNOTIFY, gstVsfcExt2TempCNOTIFY=gstVsfcExt2TempCNOTIFY, gstVsfcExt2TempFNOTIFY=gstVsfcExt2TempFNOTIFY, gstVsfcExt3TempCNOTIFY=gstVsfcExt3TempCNOTIFY, gstVsfcExt3TempFNOTIFY=gstVsfcExt3TempFNOTIFY, gstVsfcExt4TempCNOTIFY=gstVsfcExt4TempCNOTIFY, gstVsfcExt4TempFNOTIFY=gstVsfcExt4TempFNOTIFY, gstCtrl3ChVoltsANOTIFY=gstCtrl3ChVoltsANOTIFY, gstCtrl3ChVoltPeakANOTIFY=gstCtrl3ChVoltPeakANOTIFY, gstCtrl3ChDeciAmpsANOTIFY=gstCtrl3ChDeciAmpsANOTIFY, gstCtrl3ChDeciAmpsPeakANOTIFY=gstCtrl3ChDeciAmpsPeakANOTIFY, gstCtrl3ChRealPowerANOTIFY=gstCtrl3ChRealPowerANOTIFY)
mibBuilder.exportSymbols("GEIST-MIB-V3", gstCtrl3ChApparentPowerANOTIFY=gstCtrl3ChApparentPowerANOTIFY, gstCtrl3ChPowerFactorANOTIFY=gstCtrl3ChPowerFactorANOTIFY, gstCtrl3ChVoltsBNOTIFY=gstCtrl3ChVoltsBNOTIFY, gstCtrl3ChVoltPeakBNOTIFY=gstCtrl3ChVoltPeakBNOTIFY, gstCtrl3ChDeciAmpsBNOTIFY=gstCtrl3ChDeciAmpsBNOTIFY, gstCtrl3ChDeciAmpsPeakBNOTIFY=gstCtrl3ChDeciAmpsPeakBNOTIFY, gstCtrl3ChRealPowerBNOTIFY=gstCtrl3ChRealPowerBNOTIFY, gstCtrl3ChApparentPowerBNOTIFY=gstCtrl3ChApparentPowerBNOTIFY, gstCtrl3ChPowerFactorBNOTIFY=gstCtrl3ChPowerFactorBNOTIFY, gstCtrl3ChVoltsCNOTIFY=gstCtrl3ChVoltsCNOTIFY, gstCtrl3ChVoltPeakCNOTIFY=gstCtrl3ChVoltPeakCNOTIFY, gstCtrl3ChDeciAmpsCNOTIFY=gstCtrl3ChDeciAmpsCNOTIFY, gstCtrl3ChDeciAmpsPeakCNOTIFY=gstCtrl3ChDeciAmpsPeakCNOTIFY, gstCtrl3ChRealPowerCNOTIFY=gstCtrl3ChRealPowerCNOTIFY, gstCtrl3ChApparentPowerCNOTIFY=gstCtrl3ChApparentPowerCNOTIFY, gstCtrl3ChPowerFactorCNOTIFY=gstCtrl3ChPowerFactorCNOTIFY, gstCtrlGrpAmpsANOTIFY=gstCtrlGrpAmpsANOTIFY, gstCtrlGrpAmpsBNOTIFY=gstCtrlGrpAmpsBNOTIFY, gstCtrlGrpAmpsCNOTIFY=gstCtrlGrpAmpsCNOTIFY, gstCtrlGrpAmpsDNOTIFY=gstCtrlGrpAmpsDNOTIFY, gstCtrlGrpAmpsENOTIFY=gstCtrlGrpAmpsENOTIFY, gstCtrlGrpAmpsFNOTIFY=gstCtrlGrpAmpsFNOTIFY, gstCtrlGrpAmpsGNOTIFY=gstCtrlGrpAmpsGNOTIFY, gstCtrlGrpAmpsHNOTIFY=gstCtrlGrpAmpsHNOTIFY, gstCtrlGrpAmpsAVoltsNOTIFY=gstCtrlGrpAmpsAVoltsNOTIFY, gstCtrlGrpAmpsBVoltsNOTIFY=gstCtrlGrpAmpsBVoltsNOTIFY, gstCtrlGrpAmpsCVoltsNOTIFY=gstCtrlGrpAmpsCVoltsNOTIFY, gstCtrlGrpAmpsDVoltsNOTIFY=gstCtrlGrpAmpsDVoltsNOTIFY, gstCtrlGrpAmpsEVoltsNOTIFY=gstCtrlGrpAmpsEVoltsNOTIFY, gstCtrlGrpAmpsFVoltsNOTIFY=gstCtrlGrpAmpsFVoltsNOTIFY, gstCtrlGrpAmpsGVoltsNOTIFY=gstCtrlGrpAmpsGVoltsNOTIFY, gstCtrlGrpAmpsHVoltsNOTIFY=gstCtrlGrpAmpsHVoltsNOTIFY, gstCtrlGrpAmpsINOTIFY=gstCtrlGrpAmpsINOTIFY, gstCtrlGrpAmpsJNOTIFY=gstCtrlGrpAmpsJNOTIFY, gstCtrlGrpAmpsKNOTIFY=gstCtrlGrpAmpsKNOTIFY, gstCtrlGrpAmpsLNOTIFY=gstCtrlGrpAmpsLNOTIFY, gstCtrlGrpAmpsMNOTIFY=gstCtrlGrpAmpsMNOTIFY, gstCtrlGrpAmpsNNOTIFY=gstCtrlGrpAmpsNNOTIFY, gstCtrlGrpAmpsONOTIFY=gstCtrlGrpAmpsONOTIFY, gstCtrlGrpAmpsPNOTIFY=gstCtrlGrpAmpsPNOTIFY, gstCtrlGrpAmpsIVoltsNOTIFY=gstCtrlGrpAmpsIVoltsNOTIFY, gstCtrlGrpAmpsJVoltsNOTIFY=gstCtrlGrpAmpsJVoltsNOTIFY, gstCtrlGrpAmpsKVoltsNOTIFY=gstCtrlGrpAmpsKVoltsNOTIFY, gstCtrlGrpAmpsLVoltsNOTIFY=gstCtrlGrpAmpsLVoltsNOTIFY, gstCtrlGrpAmpsMVoltsNOTIFY=gstCtrlGrpAmpsMVoltsNOTIFY, gstCtrlGrpAmpsNVoltsNOTIFY=gstCtrlGrpAmpsNVoltsNOTIFY, gstCtrlGrpAmpsOVoltsNOTIFY=gstCtrlGrpAmpsOVoltsNOTIFY, gstCtrlGrpAmpsPVoltsNOTIFY=gstCtrlGrpAmpsPVoltsNOTIFY, gstCtrlOutletPendingNOTIFY=gstCtrlOutletPendingNOTIFY, gstCtrlOutletDeciAmpsNOTIFY=gstCtrlOutletDeciAmpsNOTIFY, gstCtrlOutletGroupNOTIFY=gstCtrlOutletGroupNOTIFY, gstCtrlOutletUpDelayNOTIFY=gstCtrlOutletUpDelayNOTIFY, gstCtrlOutletDwnDelayNOTIFY=gstCtrlOutletDwnDelayNOTIFY, gstCtrlOutletRbtDurationNOTIFY=gstCtrlOutletRbtDurationNOTIFY, gstCtrlOutletURLNOTIFY=gstCtrlOutletURLNOTIFY, gstCtrlOutletPOAActionNOTIFY=gstCtrlOutletPOAActionNOTIFY, gstCtrlOutletPOADelayNOTIFY=gstCtrlOutletPOADelayNOTIFY, gstCtrlOutletkWattHrsNOTIFY=gstCtrlOutletkWattHrsNOTIFY, gstCtrlOutletPowerNOTIFY=gstCtrlOutletPowerNOTIFY, gstCtrlOutletRbtDelayNOTIFY=gstCtrlOutletRbtDelayNOTIFY, gstCtrlOutletStatusTimeNOTIFY=gstCtrlOutletStatusTimeNOTIFY, gstDewPointSensorTempCNOTIFY=gstDewPointSensorTempCNOTIFY, gstDewPointSensorTempFNOTIFY=gstDewPointSensorTempFNOTIFY, gstDewPointSensorHumidityNOTIFY=gstDewPointSensorHumidityNOTIFY, gstDewPointSensorDewPointCNOTIFY=gstDewPointSensorDewPointCNOTIFY, gstDewPointSensorDewPointFNOTIFY=gstDewPointSensorDewPointFNOTIFY, gstDigitalSensorDigitalNOTIFY=gstDigitalSensorDigitalNOTIFY, gstDstsVoltsANOTIFY=gstDstsVoltsANOTIFY, gstDstsDeciAmpsANOTIFY=gstDstsDeciAmpsANOTIFY, gstDstsVoltsBNOTIFY=gstDstsVoltsBNOTIFY, gstDstsDeciAmpsBNOTIFY=gstDstsDeciAmpsBNOTIFY, gstDstsSourceAActiveNOTIFY=gstDstsSourceAActiveNOTIFY, gstDstsSourceBActiveNOTIFY=gstDstsSourceBActiveNOTIFY, gstDstsPowerStatusANOTIFY=gstDstsPowerStatusANOTIFY, gstDstsPowerStatusBNOTIFY=gstDstsPowerStatusBNOTIFY, gstDstsSourceATempCNOTIFY=gstDstsSourceATempCNOTIFY, gstDstsSourceBTempCNOTIFY=gstDstsSourceBTempCNOTIFY, gstCpmSensorStatusNOTIFY=gstCpmSensorStatusNOTIFY, gstSmokeAlarmStatusNOTIFY=gstSmokeAlarmStatusNOTIFY, gstNeg48VdcSensorVoltageNOTIFY=gstNeg48VdcSensorVoltageNOTIFY, gstPos30VdcSensorVoltageNOTIFY=gstPos30VdcSensorVoltageNOTIFY, gstAnalogSensorAnalogNOTIFY=gstAnalogSensorAnalogNOTIFY, gstCtrl3ChIECkWattHrsANOTIFY=gstCtrl3ChIECkWattHrsANOTIFY, gstCtrl3ChIECVoltsANOTIFY=gstCtrl3ChIECVoltsANOTIFY, gstCtrl3ChIECVoltPeakANOTIFY=gstCtrl3ChIECVoltPeakANOTIFY, gstCtrl3ChIECDeciAmpsANOTIFY=gstCtrl3ChIECDeciAmpsANOTIFY, gstCtrl3ChIECDeciAmpsPeakANOTIFY=gstCtrl3ChIECDeciAmpsPeakANOTIFY, gstCtrl3ChIECRealPowerANOTIFY=gstCtrl3ChIECRealPowerANOTIFY, gstCtrl3ChIECApparentPowerANOTIFY=gstCtrl3ChIECApparentPowerANOTIFY, gstCtrl3ChIECPowerFactorANOTIFY=gstCtrl3ChIECPowerFactorANOTIFY, gstCtrl3ChIECkWattHrsBNOTIFY=gstCtrl3ChIECkWattHrsBNOTIFY, gstCtrl3ChIECVoltsBNOTIFY=gstCtrl3ChIECVoltsBNOTIFY, gstCtrl3ChIECVoltPeakBNOTIFY=gstCtrl3ChIECVoltPeakBNOTIFY, gstCtrl3ChIECDeciAmpsBNOTIFY=gstCtrl3ChIECDeciAmpsBNOTIFY, gstCtrl3ChIECDeciAmpsPeakBNOTIFY=gstCtrl3ChIECDeciAmpsPeakBNOTIFY, gstCtrl3ChIECRealPowerBNOTIFY=gstCtrl3ChIECRealPowerBNOTIFY, gstCtrl3ChIECApparentPowerBNOTIFY=gstCtrl3ChIECApparentPowerBNOTIFY, gstCtrl3ChIECPowerFactorBNOTIFY=gstCtrl3ChIECPowerFactorBNOTIFY, gstCtrl3ChIECkWattHrsCNOTIFY=gstCtrl3ChIECkWattHrsCNOTIFY, gstCtrl3ChIECVoltsCNOTIFY=gstCtrl3ChIECVoltsCNOTIFY, gstCtrl3ChIECVoltPeakCNOTIFY=gstCtrl3ChIECVoltPeakCNOTIFY, gstCtrl3ChIECDeciAmpsCNOTIFY=gstCtrl3ChIECDeciAmpsCNOTIFY, gstCtrl3ChIECDeciAmpsPeakCNOTIFY=gstCtrl3ChIECDeciAmpsPeakCNOTIFY, gstCtrl3ChIECRealPowerCNOTIFY=gstCtrl3ChIECRealPowerCNOTIFY, gstCtrl3ChIECApparentPowerCNOTIFY=gstCtrl3ChIECApparentPowerCNOTIFY, gstCtrl3ChIECPowerFactorCNOTIFY=gstCtrl3ChIECPowerFactorCNOTIFY, gstCtrl3ChIECkWattHrsTotalNOTIFY=gstCtrl3ChIECkWattHrsTotalNOTIFY, gstCtrl3ChIECRealPowerTotalNOTIFY=gstCtrl3ChIECRealPowerTotalNOTIFY, gstClimateRelayTempCNOTIFY=gstClimateRelayTempCNOTIFY, gstClimateRelayTempFNOTIFY=gstClimateRelayTempFNOTIFY, gstClimateRelayIO1NOTIFY=gstClimateRelayIO1NOTIFY, gstClimateRelayIO2NOTIFY=gstClimateRelayIO2NOTIFY, gstClimateRelayIO3NOTIFY=gstClimateRelayIO3NOTIFY, gstClimateRelayIO4NOTIFY=gstClimateRelayIO4NOTIFY, gstClimateRelayIO5NOTIFY=gstClimateRelayIO5NOTIFY, gstClimateRelayIO6NOTIFY=gstClimateRelayIO6NOTIFY, gstAirSpeedSwitchSensorAirSpeedNOTIFY=gstAirSpeedSwitchSensorAirSpeedNOTIFY, gstIoExpanderIO1NOTIFY=gstIoExpanderIO1NOTIFY, gstIoExpanderIO2NOTIFY=gstIoExpanderIO2NOTIFY, gstIoExpanderIO3NOTIFY=gstIoExpanderIO3NOTIFY, gstIoExpanderIO4NOTIFY=gstIoExpanderIO4NOTIFY, gstIoExpanderIO5NOTIFY=gstIoExpanderIO5NOTIFY, gstIoExpanderIO6NOTIFY=gstIoExpanderIO6NOTIFY, gstIoExpanderIO7NOTIFY=gstIoExpanderIO7NOTIFY, gstIoExpanderIO8NOTIFY=gstIoExpanderIO8NOTIFY, gstIoExpanderIO9NOTIFY=gstIoExpanderIO9NOTIFY, gstIoExpanderIO10NOTIFY=gstIoExpanderIO10NOTIFY)
mibBuilder.exportSymbols("GEIST-MIB-V3", gstIoExpanderIO11NOTIFY=gstIoExpanderIO11NOTIFY, gstIoExpanderIO12NOTIFY=gstIoExpanderIO12NOTIFY, gstIoExpanderIO13NOTIFY=gstIoExpanderIO13NOTIFY, gstIoExpanderIO14NOTIFY=gstIoExpanderIO14NOTIFY, gstIoExpanderIO15NOTIFY=gstIoExpanderIO15NOTIFY, gstIoExpanderIO16NOTIFY=gstIoExpanderIO16NOTIFY, gstIoExpanderIO17NOTIFY=gstIoExpanderIO17NOTIFY, gstIoExpanderIO18NOTIFY=gstIoExpanderIO18NOTIFY, gstIoExpanderIO19NOTIFY=gstIoExpanderIO19NOTIFY, gstIoExpanderIO20NOTIFY=gstIoExpanderIO20NOTIFY, gstIoExpanderIO21NOTIFY=gstIoExpanderIO21NOTIFY, gstIoExpanderIO22NOTIFY=gstIoExpanderIO22NOTIFY, gstIoExpanderIO23NOTIFY=gstIoExpanderIO23NOTIFY, gstIoExpanderIO24NOTIFY=gstIoExpanderIO24NOTIFY, gstIoExpanderIO25NOTIFY=gstIoExpanderIO25NOTIFY, gstIoExpanderIO26NOTIFY=gstIoExpanderIO26NOTIFY, gstIoExpanderIO27NOTIFY=gstIoExpanderIO27NOTIFY, gstIoExpanderIO28NOTIFY=gstIoExpanderIO28NOTIFY, gstIoExpanderIO29NOTIFY=gstIoExpanderIO29NOTIFY, gstIoExpanderIO30NOTIFY=gstIoExpanderIO30NOTIFY, gstIoExpanderIO31NOTIFY=gstIoExpanderIO31NOTIFY, gstIoExpanderIO32NOTIFY=gstIoExpanderIO32NOTIFY, gstT3hdSensorIntTempCNOTIFY=gstT3hdSensorIntTempCNOTIFY, gstT3hdSensorIntTempFNOTIFY=gstT3hdSensorIntTempFNOTIFY, gstT3hdSensorIntHumidityNOTIFY=gstT3hdSensorIntHumidityNOTIFY, gstT3hdSensorIntDewPointCNOTIFY=gstT3hdSensorIntDewPointCNOTIFY, gstT3hdSensorIntDewPointFNOTIFY=gstT3hdSensorIntDewPointFNOTIFY, gstT3hdSensorExt1TempCNOTIFY=gstT3hdSensorExt1TempCNOTIFY, gstT3hdSensorExt1TempFNOTIFY=gstT3hdSensorExt1TempFNOTIFY, gstT3hdSensorExt2TempCNOTIFY=gstT3hdSensorExt2TempCNOTIFY, gstT3hdSensorExt2TempFNOTIFY=gstT3hdSensorExt2TempFNOTIFY, gstThdSensorTempCNOTIFY=gstThdSensorTempCNOTIFY, gstThdSensorTempFNOTIFY=gstThdSensorTempFNOTIFY, gstThdSensorHumidityNOTIFY=gstThdSensorHumidityNOTIFY, gstThdSensorDewPointCNOTIFY=gstThdSensorDewPointCNOTIFY, gstThdSensorDewPointFNOTIFY=gstThdSensorDewPointFNOTIFY, gstPos60VdcSensorVoltageNOTIFY=gstPos60VdcSensorVoltageNOTIFY, gstCtrl2CirTotkWattHrsTotNOTIFY=gstCtrl2CirTotkWattHrsTotNOTIFY, gstCtrl2CirTotVoltsTotNOTIFY=gstCtrl2CirTotVoltsTotNOTIFY, gstCtrl2CirTotVoltPeakTotNOTIFY=gstCtrl2CirTotVoltPeakTotNOTIFY, gstCtrl2CirTotDeciAmpsTotNOTIFY=gstCtrl2CirTotDeciAmpsTotNOTIFY, gstCtrl2CirTotDeciAmpsPeakTotNOTIFY=gstCtrl2CirTotDeciAmpsPeakTotNOTIFY, gstCtrl2CirTotRealPowerTotNOTIFY=gstCtrl2CirTotRealPowerTotNOTIFY, gstCtrl2CirTotApparentPowerTotNOTIFY=gstCtrl2CirTotApparentPowerTotNOTIFY, gstCtrl2CirTotPowerFactorTotNOTIFY=gstCtrl2CirTotPowerFactorTotNOTIFY, gstCtrl2CirTotkWattHrsANOTIFY=gstCtrl2CirTotkWattHrsANOTIFY, gstCtrl2CirTotVoltsANOTIFY=gstCtrl2CirTotVoltsANOTIFY, gstCtrl2CirTotVoltPeakANOTIFY=gstCtrl2CirTotVoltPeakANOTIFY, gstCtrl2CirTotDeciAmpsANOTIFY=gstCtrl2CirTotDeciAmpsANOTIFY, gstCtrl2CirTotDeciAmpsPeakANOTIFY=gstCtrl2CirTotDeciAmpsPeakANOTIFY, gstCtrl2CirTotRealPowerANOTIFY=gstCtrl2CirTotRealPowerANOTIFY, gstCtrl2CirTotApparentPowerANOTIFY=gstCtrl2CirTotApparentPowerANOTIFY, gstCtrl2CirTotPowerFactorANOTIFY=gstCtrl2CirTotPowerFactorANOTIFY, gstCtrl2CirTotkWattHrsBNOTIFY=gstCtrl2CirTotkWattHrsBNOTIFY, gstCtrl2CirTotVoltsBNOTIFY=gstCtrl2CirTotVoltsBNOTIFY, gstCtrl2CirTotVoltPeakBNOTIFY=gstCtrl2CirTotVoltPeakBNOTIFY, gstCtrl2CirTotDeciAmpsBNOTIFY=gstCtrl2CirTotDeciAmpsBNOTIFY, gstCtrl2CirTotDeciAmpsPeakBNOTIFY=gstCtrl2CirTotDeciAmpsPeakBNOTIFY, gstCtrl2CirTotRealPowerBNOTIFY=gstCtrl2CirTotRealPowerBNOTIFY, gstCtrl2CirTotApparentPowerBNOTIFY=gstCtrl2CirTotApparentPowerBNOTIFY, gstCtrl2CirTotPowerFactorBNOTIFY=gstCtrl2CirTotPowerFactorBNOTIFY, gstSc10ControlModeNOTIFY=gstSc10ControlModeNOTIFY, gstSc10SetpointCNOTIFY=gstSc10SetpointCNOTIFY, gstSc10SetpointFNOTIFY=gstSc10SetpointFNOTIFY, gstSc10TempCNOTIFY=gstSc10TempCNOTIFY, gstSc10TempFNOTIFY=gstSc10TempFNOTIFY, gstSc10CapacityNOTIFY=gstSc10CapacityNOTIFY, gstClimateTempCCLEAR=gstClimateTempCCLEAR, gstClimateTempFCLEAR=gstClimateTempFCLEAR, gstClimateHumidityCLEAR=gstClimateHumidityCLEAR, gstClimateLightCLEAR=gstClimateLightCLEAR, gstClimateAirflowCLEAR=gstClimateAirflowCLEAR, gstClimateSoundCLEAR=gstClimateSoundCLEAR, gstClimateIO1CLEAR=gstClimateIO1CLEAR, gstClimateIO2CLEAR=gstClimateIO2CLEAR, gstClimateIO3CLEAR=gstClimateIO3CLEAR, gstClimateVoltsCLEAR=gstClimateVoltsCLEAR, gstClimateVoltPeakCLEAR=gstClimateVoltPeakCLEAR, gstClimateDeciAmpsACLEAR=gstClimateDeciAmpsACLEAR, gstClimateDeciAmpPeakACLEAR=gstClimateDeciAmpPeakACLEAR, gstClimateRealPowerACLEAR=gstClimateRealPowerACLEAR, gstClimateApparentPowerACLEAR=gstClimateApparentPowerACLEAR, gstClimatePowerFactorACLEAR=gstClimatePowerFactorACLEAR, gstClimateDeciAmpsBCLEAR=gstClimateDeciAmpsBCLEAR, gstClimateDeciAmpPeakBCLEAR=gstClimateDeciAmpPeakBCLEAR, gstClimateRealPowerBCLEAR=gstClimateRealPowerBCLEAR, gstClimateApparentPowerBCLEAR=gstClimateApparentPowerBCLEAR, gstClimatePowerFactorBCLEAR=gstClimatePowerFactorBCLEAR, gstClimateDeciAmpsCCLEAR=gstClimateDeciAmpsCCLEAR, gstClimateDeciAmpPeakCCLEAR=gstClimateDeciAmpPeakCCLEAR, gstClimateRealPowerCCLEAR=gstClimateRealPowerCCLEAR, gstClimateApparentPowerCCLEAR=gstClimateApparentPowerCCLEAR, gstClimatePowerFactorCCLEAR=gstClimatePowerFactorCCLEAR, gstClimateDewPointCCLEAR=gstClimateDewPointCCLEAR, gstClimateDewPointFCLEAR=gstClimateDewPointFCLEAR, gstPowMonkWattHrsCLEAR=gstPowMonkWattHrsCLEAR, gstPowMonVoltsCLEAR=gstPowMonVoltsCLEAR, gstPowMonVoltMaxCLEAR=gstPowMonVoltMaxCLEAR, gstPowMonVoltMinCLEAR=gstPowMonVoltMinCLEAR, gstPowMonVoltPeakCLEAR=gstPowMonVoltPeakCLEAR, gstPowMonDeciAmpsCLEAR=gstPowMonDeciAmpsCLEAR, gstPowMonRealPowerCLEAR=gstPowMonRealPowerCLEAR, gstPowMonApparentPowerCLEAR=gstPowMonApparentPowerCLEAR, gstPowMonPowerFactorCLEAR=gstPowMonPowerFactorCLEAR, gstPowMonOutlet1CLEAR=gstPowMonOutlet1CLEAR, gstPowMonOutlet2CLEAR=gstPowMonOutlet2CLEAR, gstPowMonOutlet1StatusTimeCLEAR=gstPowMonOutlet1StatusTimeCLEAR, gstPowMonOutlet2StatusTimeCLEAR=gstPowMonOutlet2StatusTimeCLEAR, gstTempSensorTempCCLEAR=gstTempSensorTempCCLEAR, gstTempSensorTempFCLEAR=gstTempSensorTempFCLEAR, gstAirFlowSensorTempCCLEAR=gstAirFlowSensorTempCCLEAR, gstAirFlowSensorTempFCLEAR=gstAirFlowSensorTempFCLEAR, gstAirFlowSensorFlowCLEAR=gstAirFlowSensorFlowCLEAR, gstAirFlowSensorHumidityCLEAR=gstAirFlowSensorHumidityCLEAR, gstAirFlowSensorDewPointCCLEAR=gstAirFlowSensorDewPointCCLEAR, gstAirFlowSensorDewPointFCLEAR=gstAirFlowSensorDewPointFCLEAR, gstCtrl3ChDELTADeciAmpsACLEAR=gstCtrl3ChDELTADeciAmpsACLEAR, gstCtrl3ChDELTADeciAmpsBCLEAR=gstCtrl3ChDELTADeciAmpsBCLEAR, gstCtrl3ChDELTADeciAmpsCCLEAR=gstCtrl3ChDELTADeciAmpsCCLEAR, gstCtrl3ChDELTAkWattHrsTotalCLEAR=gstCtrl3ChDELTAkWattHrsTotalCLEAR, gstCtrl3ChDELTARealPowerTotalCLEAR=gstCtrl3ChDELTARealPowerTotalCLEAR, gstCtrl3ChDELTAkWattHrsABCLEAR=gstCtrl3ChDELTAkWattHrsABCLEAR, gstCtrl3ChDELTAVoltsABCLEAR=gstCtrl3ChDELTAVoltsABCLEAR, gstCtrl3ChDELTAVoltPeakABCLEAR=gstCtrl3ChDELTAVoltPeakABCLEAR, gstCtrl3ChDELTARealPowerABCLEAR=gstCtrl3ChDELTARealPowerABCLEAR, gstCtrl3ChDELTAApparentPowerABCLEAR=gstCtrl3ChDELTAApparentPowerABCLEAR, gstCtrl3ChDELTAPowerFactorABCLEAR=gstCtrl3ChDELTAPowerFactorABCLEAR)
mibBuilder.exportSymbols("GEIST-MIB-V3", gstCtrl3ChDELTAkWattHrsBCCLEAR=gstCtrl3ChDELTAkWattHrsBCCLEAR, gstCtrl3ChDELTAVoltsBCCLEAR=gstCtrl3ChDELTAVoltsBCCLEAR, gstCtrl3ChDELTAVoltPeakBCCLEAR=gstCtrl3ChDELTAVoltPeakBCCLEAR, gstCtrl3ChDELTARealPowerBCCLEAR=gstCtrl3ChDELTARealPowerBCCLEAR, gstCtrl3ChDELTAApparentPowerBCCLEAR=gstCtrl3ChDELTAApparentPowerBCCLEAR, gstCtrl3ChDELTAPowerFactorBCCLEAR=gstCtrl3ChDELTAPowerFactorBCCLEAR, gstCtrl3ChDELTAkWattHrsCACLEAR=gstCtrl3ChDELTAkWattHrsCACLEAR, gstCtrl3ChDELTAVoltsCACLEAR=gstCtrl3ChDELTAVoltsCACLEAR, gstCtrl3ChDELTAVoltPeakCACLEAR=gstCtrl3ChDELTAVoltPeakCACLEAR, gstCtrl3ChDELTARealPowerCACLEAR=gstCtrl3ChDELTARealPowerCACLEAR, gstCtrl3ChDELTAApparentPowerCACLEAR=gstCtrl3ChDELTAApparentPowerCACLEAR, gstCtrl3ChDELTAPowerFactorCACLEAR=gstCtrl3ChDELTAPowerFactorCACLEAR, gstDoorSensorStatusCLEAR=gstDoorSensorStatusCLEAR, gstWaterSensorDampnessCLEAR=gstWaterSensorDampnessCLEAR, gstCurrentMonitorDeciAmpsCLEAR=gstCurrentMonitorDeciAmpsCLEAR, gstMillivoltMonitorMVCLEAR=gstMillivoltMonitorMVCLEAR, gstPow3ChkWattHrsACLEAR=gstPow3ChkWattHrsACLEAR, gstPow3ChVoltsACLEAR=gstPow3ChVoltsACLEAR, gstPow3ChVoltMaxACLEAR=gstPow3ChVoltMaxACLEAR, gstPow3ChVoltMinACLEAR=gstPow3ChVoltMinACLEAR, gstPow3ChVoltPeakACLEAR=gstPow3ChVoltPeakACLEAR, gstPow3ChDeciAmpsACLEAR=gstPow3ChDeciAmpsACLEAR, gstPow3ChRealPowerACLEAR=gstPow3ChRealPowerACLEAR, gstPow3ChApparentPowerACLEAR=gstPow3ChApparentPowerACLEAR, gstPow3ChPowerFactorACLEAR=gstPow3ChPowerFactorACLEAR, gstPow3ChkWattHrsBCLEAR=gstPow3ChkWattHrsBCLEAR, gstPow3ChVoltsBCLEAR=gstPow3ChVoltsBCLEAR, gstPow3ChVoltMaxBCLEAR=gstPow3ChVoltMaxBCLEAR, gstPow3ChVoltMinBCLEAR=gstPow3ChVoltMinBCLEAR, gstPow3ChVoltPeakBCLEAR=gstPow3ChVoltPeakBCLEAR, gstPow3ChDeciAmpsBCLEAR=gstPow3ChDeciAmpsBCLEAR, gstPow3ChRealPowerBCLEAR=gstPow3ChRealPowerBCLEAR, gstPow3ChApparentPowerBCLEAR=gstPow3ChApparentPowerBCLEAR, gstPow3ChPowerFactorBCLEAR=gstPow3ChPowerFactorBCLEAR, gstPow3ChkWattHrsCCLEAR=gstPow3ChkWattHrsCCLEAR, gstPow3ChVoltsCCLEAR=gstPow3ChVoltsCCLEAR, gstPow3ChVoltMaxCCLEAR=gstPow3ChVoltMaxCCLEAR, gstPow3ChVoltMinCCLEAR=gstPow3ChVoltMinCCLEAR, gstPow3ChVoltPeakCCLEAR=gstPow3ChVoltPeakCCLEAR, gstPow3ChDeciAmpsCCLEAR=gstPow3ChDeciAmpsCCLEAR, gstPow3ChRealPowerCCLEAR=gstPow3ChRealPowerCCLEAR, gstPow3ChApparentPowerCCLEAR=gstPow3ChApparentPowerCCLEAR, gstPow3ChPowerFactorCCLEAR=gstPow3ChPowerFactorCCLEAR, gstPow3ChkWattHrsTotalCLEAR=gstPow3ChkWattHrsTotalCLEAR, gstPow3ChRealPowerTotalCLEAR=gstPow3ChRealPowerTotalCLEAR, gstOutlet1StatusCLEAR=gstOutlet1StatusCLEAR, gstOutlet2StatusCLEAR=gstOutlet2StatusCLEAR, gstVsfcSetPointCCLEAR=gstVsfcSetPointCCLEAR, gstVsfcSetPointFCLEAR=gstVsfcSetPointFCLEAR, gstVsfcFanSpeedCLEAR=gstVsfcFanSpeedCLEAR, gstVsfcIntTempCCLEAR=gstVsfcIntTempCCLEAR, gstVsfcIntTempFCLEAR=gstVsfcIntTempFCLEAR, gstVsfcExt1TempCCLEAR=gstVsfcExt1TempCCLEAR, gstVsfcExt1TempFCLEAR=gstVsfcExt1TempFCLEAR, gstVsfcExt2TempCCLEAR=gstVsfcExt2TempCCLEAR, gstVsfcExt2TempFCLEAR=gstVsfcExt2TempFCLEAR, gstVsfcExt3TempCCLEAR=gstVsfcExt3TempCCLEAR, gstVsfcExt3TempFCLEAR=gstVsfcExt3TempFCLEAR, gstVsfcExt4TempCCLEAR=gstVsfcExt4TempCCLEAR, gstVsfcExt4TempFCLEAR=gstVsfcExt4TempFCLEAR, gstCtrl3ChVoltsACLEAR=gstCtrl3ChVoltsACLEAR, gstCtrl3ChVoltPeakACLEAR=gstCtrl3ChVoltPeakACLEAR, gstCtrl3ChDeciAmpsACLEAR=gstCtrl3ChDeciAmpsACLEAR, gstCtrl3ChDeciAmpsPeakACLEAR=gstCtrl3ChDeciAmpsPeakACLEAR, gstCtrl3ChRealPowerACLEAR=gstCtrl3ChRealPowerACLEAR, gstCtrl3ChApparentPowerACLEAR=gstCtrl3ChApparentPowerACLEAR, gstCtrl3ChPowerFactorACLEAR=gstCtrl3ChPowerFactorACLEAR, gstCtrl3ChVoltsBCLEAR=gstCtrl3ChVoltsBCLEAR, gstCtrl3ChVoltPeakBCLEAR=gstCtrl3ChVoltPeakBCLEAR, gstCtrl3ChDeciAmpsBCLEAR=gstCtrl3ChDeciAmpsBCLEAR, gstCtrl3ChDeciAmpsPeakBCLEAR=gstCtrl3ChDeciAmpsPeakBCLEAR, gstCtrl3ChRealPowerBCLEAR=gstCtrl3ChRealPowerBCLEAR, gstCtrl3ChApparentPowerBCLEAR=gstCtrl3ChApparentPowerBCLEAR, gstCtrl3ChPowerFactorBCLEAR=gstCtrl3ChPowerFactorBCLEAR, gstCtrl3ChVoltsCCLEAR=gstCtrl3ChVoltsCCLEAR, gstCtrl3ChVoltPeakCCLEAR=gstCtrl3ChVoltPeakCCLEAR, gstCtrl3ChDeciAmpsCCLEAR=gstCtrl3ChDeciAmpsCCLEAR, gstCtrl3ChDeciAmpsPeakCCLEAR=gstCtrl3ChDeciAmpsPeakCCLEAR, gstCtrl3ChRealPowerCCLEAR=gstCtrl3ChRealPowerCCLEAR, gstCtrl3ChApparentPowerCCLEAR=gstCtrl3ChApparentPowerCCLEAR, gstCtrl3ChPowerFactorCCLEAR=gstCtrl3ChPowerFactorCCLEAR, gstCtrlGrpAmpsACLEAR=gstCtrlGrpAmpsACLEAR, gstCtrlGrpAmpsBCLEAR=gstCtrlGrpAmpsBCLEAR, gstCtrlGrpAmpsCCLEAR=gstCtrlGrpAmpsCCLEAR, gstCtrlGrpAmpsDCLEAR=gstCtrlGrpAmpsDCLEAR, gstCtrlGrpAmpsECLEAR=gstCtrlGrpAmpsECLEAR, gstCtrlGrpAmpsFCLEAR=gstCtrlGrpAmpsFCLEAR, gstCtrlGrpAmpsGCLEAR=gstCtrlGrpAmpsGCLEAR, gstCtrlGrpAmpsHCLEAR=gstCtrlGrpAmpsHCLEAR, gstCtrlGrpAmpsAVoltsCLEAR=gstCtrlGrpAmpsAVoltsCLEAR, gstCtrlGrpAmpsBVoltsCLEAR=gstCtrlGrpAmpsBVoltsCLEAR, gstCtrlGrpAmpsCVoltsCLEAR=gstCtrlGrpAmpsCVoltsCLEAR, gstCtrlGrpAmpsDVoltsCLEAR=gstCtrlGrpAmpsDVoltsCLEAR, gstCtrlGrpAmpsEVoltsCLEAR=gstCtrlGrpAmpsEVoltsCLEAR, gstCtrlGrpAmpsFVoltsCLEAR=gstCtrlGrpAmpsFVoltsCLEAR, gstCtrlGrpAmpsGVoltsCLEAR=gstCtrlGrpAmpsGVoltsCLEAR, gstCtrlGrpAmpsHVoltsCLEAR=gstCtrlGrpAmpsHVoltsCLEAR, gstCtrlGrpAmpsICLEAR=gstCtrlGrpAmpsICLEAR, gstCtrlGrpAmpsJCLEAR=gstCtrlGrpAmpsJCLEAR, gstCtrlGrpAmpsKCLEAR=gstCtrlGrpAmpsKCLEAR, gstCtrlGrpAmpsLCLEAR=gstCtrlGrpAmpsLCLEAR, gstCtrlGrpAmpsMCLEAR=gstCtrlGrpAmpsMCLEAR, gstCtrlGrpAmpsNCLEAR=gstCtrlGrpAmpsNCLEAR, gstCtrlGrpAmpsOCLEAR=gstCtrlGrpAmpsOCLEAR, gstCtrlGrpAmpsPCLEAR=gstCtrlGrpAmpsPCLEAR, gstCtrlGrpAmpsIVoltsCLEAR=gstCtrlGrpAmpsIVoltsCLEAR, gstCtrlGrpAmpsJVoltsCLEAR=gstCtrlGrpAmpsJVoltsCLEAR, gstCtrlGrpAmpsKVoltsCLEAR=gstCtrlGrpAmpsKVoltsCLEAR, gstCtrlGrpAmpsLVoltsCLEAR=gstCtrlGrpAmpsLVoltsCLEAR, gstCtrlGrpAmpsMVoltsCLEAR=gstCtrlGrpAmpsMVoltsCLEAR, gstCtrlGrpAmpsNVoltsCLEAR=gstCtrlGrpAmpsNVoltsCLEAR, gstCtrlGrpAmpsOVoltsCLEAR=gstCtrlGrpAmpsOVoltsCLEAR, gstCtrlGrpAmpsPVoltsCLEAR=gstCtrlGrpAmpsPVoltsCLEAR, gstCtrlOutletPendingCLEAR=gstCtrlOutletPendingCLEAR, gstCtrlOutletDeciAmpsCLEAR=gstCtrlOutletDeciAmpsCLEAR, gstCtrlOutletGroupCLEAR=gstCtrlOutletGroupCLEAR, gstCtrlOutletUpDelayCLEAR=gstCtrlOutletUpDelayCLEAR, gstCtrlOutletDwnDelayCLEAR=gstCtrlOutletDwnDelayCLEAR, gstCtrlOutletRbtDurationCLEAR=gstCtrlOutletRbtDurationCLEAR, gstCtrlOutletURLCLEAR=gstCtrlOutletURLCLEAR, gstCtrlOutletPOAActionCLEAR=gstCtrlOutletPOAActionCLEAR, gstCtrlOutletPOADelayCLEAR=gstCtrlOutletPOADelayCLEAR, gstCtrlOutletkWattHrsCLEAR=gstCtrlOutletkWattHrsCLEAR, gstCtrlOutletPowerCLEAR=gstCtrlOutletPowerCLEAR, gstCtrlOutletRbtDelayCLEAR=gstCtrlOutletRbtDelayCLEAR, gstCtrlOutletStatusTimeCLEAR=gstCtrlOutletStatusTimeCLEAR, gstDewPointSensorTempCCLEAR=gstDewPointSensorTempCCLEAR)
mibBuilder.exportSymbols("GEIST-MIB-V3", gstDewPointSensorTempFCLEAR=gstDewPointSensorTempFCLEAR, gstDewPointSensorHumidityCLEAR=gstDewPointSensorHumidityCLEAR, gstDewPointSensorDewPointCCLEAR=gstDewPointSensorDewPointCCLEAR, gstDewPointSensorDewPointFCLEAR=gstDewPointSensorDewPointFCLEAR, gstDigitalSensorDigitalCLEAR=gstDigitalSensorDigitalCLEAR, gstDstsVoltsACLEAR=gstDstsVoltsACLEAR, gstDstsDeciAmpsACLEAR=gstDstsDeciAmpsACLEAR, gstDstsVoltsBCLEAR=gstDstsVoltsBCLEAR, gstDstsDeciAmpsBCLEAR=gstDstsDeciAmpsBCLEAR, gstDstsSourceAActiveCLEAR=gstDstsSourceAActiveCLEAR, gstDstsSourceBActiveCLEAR=gstDstsSourceBActiveCLEAR, gstDstsPowerStatusACLEAR=gstDstsPowerStatusACLEAR, gstDstsPowerStatusBCLEAR=gstDstsPowerStatusBCLEAR, gstDstsSourceATempCCLEAR=gstDstsSourceATempCCLEAR, gstDstsSourceBTempCCLEAR=gstDstsSourceBTempCCLEAR, gstCpmSensorStatusCLEAR=gstCpmSensorStatusCLEAR, gstSmokeAlarmStatusCLEAR=gstSmokeAlarmStatusCLEAR, gstNeg48VdcSensorVoltageCLEAR=gstNeg48VdcSensorVoltageCLEAR, gstPos30VdcSensorVoltageCLEAR=gstPos30VdcSensorVoltageCLEAR, gstAnalogSensorAnalogCLEAR=gstAnalogSensorAnalogCLEAR, gstCtrl3ChIECkWattHrsACLEAR=gstCtrl3ChIECkWattHrsACLEAR, gstCtrl3ChIECVoltsACLEAR=gstCtrl3ChIECVoltsACLEAR, gstCtrl3ChIECVoltPeakACLEAR=gstCtrl3ChIECVoltPeakACLEAR, gstCtrl3ChIECDeciAmpsACLEAR=gstCtrl3ChIECDeciAmpsACLEAR, gstCtrl3ChIECDeciAmpsPeakACLEAR=gstCtrl3ChIECDeciAmpsPeakACLEAR, gstCtrl3ChIECRealPowerACLEAR=gstCtrl3ChIECRealPowerACLEAR, gstCtrl3ChIECApparentPowerACLEAR=gstCtrl3ChIECApparentPowerACLEAR, gstCtrl3ChIECPowerFactorACLEAR=gstCtrl3ChIECPowerFactorACLEAR, gstCtrl3ChIECkWattHrsBCLEAR=gstCtrl3ChIECkWattHrsBCLEAR, gstCtrl3ChIECVoltsBCLEAR=gstCtrl3ChIECVoltsBCLEAR, gstCtrl3ChIECVoltPeakBCLEAR=gstCtrl3ChIECVoltPeakBCLEAR, gstCtrl3ChIECDeciAmpsBCLEAR=gstCtrl3ChIECDeciAmpsBCLEAR, gstCtrl3ChIECDeciAmpsPeakBCLEAR=gstCtrl3ChIECDeciAmpsPeakBCLEAR, gstCtrl3ChIECRealPowerBCLEAR=gstCtrl3ChIECRealPowerBCLEAR, gstCtrl3ChIECApparentPowerBCLEAR=gstCtrl3ChIECApparentPowerBCLEAR, gstCtrl3ChIECPowerFactorBCLEAR=gstCtrl3ChIECPowerFactorBCLEAR, gstCtrl3ChIECkWattHrsCCLEAR=gstCtrl3ChIECkWattHrsCCLEAR, gstCtrl3ChIECVoltsCCLEAR=gstCtrl3ChIECVoltsCCLEAR, gstCtrl3ChIECVoltPeakCCLEAR=gstCtrl3ChIECVoltPeakCCLEAR, gstCtrl3ChIECDeciAmpsCCLEAR=gstCtrl3ChIECDeciAmpsCCLEAR, gstCtrl3ChIECDeciAmpsPeakCCLEAR=gstCtrl3ChIECDeciAmpsPeakCCLEAR, gstCtrl3ChIECRealPowerCCLEAR=gstCtrl3ChIECRealPowerCCLEAR, gstCtrl3ChIECApparentPowerCCLEAR=gstCtrl3ChIECApparentPowerCCLEAR, gstCtrl3ChIECPowerFactorCCLEAR=gstCtrl3ChIECPowerFactorCCLEAR, gstCtrl3ChIECkWattHrsTotalCLEAR=gstCtrl3ChIECkWattHrsTotalCLEAR, gstCtrl3ChIECRealPowerTotalCLEAR=gstCtrl3ChIECRealPowerTotalCLEAR, gstClimateRelayTempCCLEAR=gstClimateRelayTempCCLEAR, gstClimateRelayTempFCLEAR=gstClimateRelayTempFCLEAR, gstClimateRelayIO1CLEAR=gstClimateRelayIO1CLEAR, gstClimateRelayIO2CLEAR=gstClimateRelayIO2CLEAR, gstClimateRelayIO3CLEAR=gstClimateRelayIO3CLEAR, gstClimateRelayIO4CLEAR=gstClimateRelayIO4CLEAR, gstClimateRelayIO5CLEAR=gstClimateRelayIO5CLEAR, gstClimateRelayIO6CLEAR=gstClimateRelayIO6CLEAR, gstAirSpeedSwitchSensorAirSpeedCLEAR=gstAirSpeedSwitchSensorAirSpeedCLEAR, gstIoExpanderIO1CLEAR=gstIoExpanderIO1CLEAR, gstIoExpanderIO2CLEAR=gstIoExpanderIO2CLEAR, gstIoExpanderIO3CLEAR=gstIoExpanderIO3CLEAR, gstIoExpanderIO4CLEAR=gstIoExpanderIO4CLEAR, gstIoExpanderIO5CLEAR=gstIoExpanderIO5CLEAR, gstIoExpanderIO6CLEAR=gstIoExpanderIO6CLEAR, gstIoExpanderIO7CLEAR=gstIoExpanderIO7CLEAR, gstIoExpanderIO8CLEAR=gstIoExpanderIO8CLEAR, gstIoExpanderIO9CLEAR=gstIoExpanderIO9CLEAR, gstIoExpanderIO10CLEAR=gstIoExpanderIO10CLEAR, gstIoExpanderIO11CLEAR=gstIoExpanderIO11CLEAR, gstIoExpanderIO12CLEAR=gstIoExpanderIO12CLEAR, gstIoExpanderIO13CLEAR=gstIoExpanderIO13CLEAR, gstIoExpanderIO14CLEAR=gstIoExpanderIO14CLEAR, gstIoExpanderIO15CLEAR=gstIoExpanderIO15CLEAR, gstIoExpanderIO16CLEAR=gstIoExpanderIO16CLEAR, gstIoExpanderIO17CLEAR=gstIoExpanderIO17CLEAR, gstIoExpanderIO18CLEAR=gstIoExpanderIO18CLEAR, gstIoExpanderIO19CLEAR=gstIoExpanderIO19CLEAR, gstIoExpanderIO20CLEAR=gstIoExpanderIO20CLEAR, gstIoExpanderIO21CLEAR=gstIoExpanderIO21CLEAR, gstIoExpanderIO22CLEAR=gstIoExpanderIO22CLEAR, gstIoExpanderIO23CLEAR=gstIoExpanderIO23CLEAR, gstIoExpanderIO24CLEAR=gstIoExpanderIO24CLEAR, gstIoExpanderIO25CLEAR=gstIoExpanderIO25CLEAR, gstIoExpanderIO26CLEAR=gstIoExpanderIO26CLEAR, gstIoExpanderIO27CLEAR=gstIoExpanderIO27CLEAR, gstIoExpanderIO28CLEAR=gstIoExpanderIO28CLEAR, gstIoExpanderIO29CLEAR=gstIoExpanderIO29CLEAR, gstIoExpanderIO30CLEAR=gstIoExpanderIO30CLEAR, gstIoExpanderIO31CLEAR=gstIoExpanderIO31CLEAR, gstIoExpanderIO32CLEAR=gstIoExpanderIO32CLEAR, gstT3hdSensorIntTempCCLEAR=gstT3hdSensorIntTempCCLEAR, gstT3hdSensorIntTempFCLEAR=gstT3hdSensorIntTempFCLEAR, gstT3hdSensorIntHumidityCLEAR=gstT3hdSensorIntHumidityCLEAR, gstT3hdSensorIntDewPointCCLEAR=gstT3hdSensorIntDewPointCCLEAR, gstT3hdSensorIntDewPointFCLEAR=gstT3hdSensorIntDewPointFCLEAR, gstT3hdSensorExt1TempCCLEAR=gstT3hdSensorExt1TempCCLEAR, gstT3hdSensorExt1TempFCLEAR=gstT3hdSensorExt1TempFCLEAR, gstT3hdSensorExt2TempCCLEAR=gstT3hdSensorExt2TempCCLEAR, gstT3hdSensorExt2TempFCLEAR=gstT3hdSensorExt2TempFCLEAR, gstThdSensorTempCCLEAR=gstThdSensorTempCCLEAR, gstThdSensorTempFCLEAR=gstThdSensorTempFCLEAR, gstThdSensorHumidityCLEAR=gstThdSensorHumidityCLEAR, gstThdSensorDewPointCCLEAR=gstThdSensorDewPointCCLEAR, gstThdSensorDewPointFCLEAR=gstThdSensorDewPointFCLEAR, gstPos60VdcSensorVoltageCLEAR=gstPos60VdcSensorVoltageCLEAR, gstCtrl2CirTotkWattHrsTotCLEAR=gstCtrl2CirTotkWattHrsTotCLEAR, gstCtrl2CirTotVoltsTotCLEAR=gstCtrl2CirTotVoltsTotCLEAR, gstCtrl2CirTotVoltPeakTotCLEAR=gstCtrl2CirTotVoltPeakTotCLEAR, gstCtrl2CirTotDeciAmpsTotCLEAR=gstCtrl2CirTotDeciAmpsTotCLEAR, gstCtrl2CirTotDeciAmpsPeakTotCLEAR=gstCtrl2CirTotDeciAmpsPeakTotCLEAR, gstCtrl2CirTotRealPowerTotCLEAR=gstCtrl2CirTotRealPowerTotCLEAR, gstCtrl2CirTotApparentPowerTotCLEAR=gstCtrl2CirTotApparentPowerTotCLEAR, gstCtrl2CirTotPowerFactorTotCLEAR=gstCtrl2CirTotPowerFactorTotCLEAR, gstCtrl2CirTotkWattHrsACLEAR=gstCtrl2CirTotkWattHrsACLEAR, gstCtrl2CirTotVoltsACLEAR=gstCtrl2CirTotVoltsACLEAR, gstCtrl2CirTotVoltPeakACLEAR=gstCtrl2CirTotVoltPeakACLEAR, gstCtrl2CirTotDeciAmpsACLEAR=gstCtrl2CirTotDeciAmpsACLEAR, gstCtrl2CirTotDeciAmpsPeakACLEAR=gstCtrl2CirTotDeciAmpsPeakACLEAR, gstCtrl2CirTotRealPowerACLEAR=gstCtrl2CirTotRealPowerACLEAR, gstCtrl2CirTotApparentPowerACLEAR=gstCtrl2CirTotApparentPowerACLEAR, gstCtrl2CirTotPowerFactorACLEAR=gstCtrl2CirTotPowerFactorACLEAR, gstCtrl2CirTotkWattHrsBCLEAR=gstCtrl2CirTotkWattHrsBCLEAR, gstCtrl2CirTotVoltsBCLEAR=gstCtrl2CirTotVoltsBCLEAR, gstCtrl2CirTotVoltPeakBCLEAR=gstCtrl2CirTotVoltPeakBCLEAR, gstCtrl2CirTotDeciAmpsBCLEAR=gstCtrl2CirTotDeciAmpsBCLEAR, gstCtrl2CirTotDeciAmpsPeakBCLEAR=gstCtrl2CirTotDeciAmpsPeakBCLEAR, gstCtrl2CirTotRealPowerBCLEAR=gstCtrl2CirTotRealPowerBCLEAR, gstCtrl2CirTotApparentPowerBCLEAR=gstCtrl2CirTotApparentPowerBCLEAR, gstCtrl2CirTotPowerFactorBCLEAR=gstCtrl2CirTotPowerFactorBCLEAR, gstSc10ControlModeCLEAR=gstSc10ControlModeCLEAR)
mibBuilder.exportSymbols("GEIST-MIB-V3", gstSc10SetpointCCLEAR=gstSc10SetpointCCLEAR, gstSc10SetpointFCLEAR=gstSc10SetpointFCLEAR, gstSc10TempCCLEAR=gstSc10TempCCLEAR, gstSc10TempFCLEAR=gstSc10TempFCLEAR, gstSc10CapacityCLEAR=gstSc10CapacityCLEAR, gstPowerDMDeciAmps1NOTIFY=gstPowerDMDeciAmps1NOTIFY, gstPowerDMDeciAmps2NOTIFY=gstPowerDMDeciAmps2NOTIFY, gstPowerDMDeciAmps3NOTIFY=gstPowerDMDeciAmps3NOTIFY, gstPowerDMDeciAmps4NOTIFY=gstPowerDMDeciAmps4NOTIFY, gstPowerDMDeciAmps5NOTIFY=gstPowerDMDeciAmps5NOTIFY, gstPowerDMDeciAmps6NOTIFY=gstPowerDMDeciAmps6NOTIFY, gstPowerDMDeciAmps7NOTIFY=gstPowerDMDeciAmps7NOTIFY, gstPowerDMDeciAmps8NOTIFY=gstPowerDMDeciAmps8NOTIFY, gstPowerDMDeciAmps9NOTIFY=gstPowerDMDeciAmps9NOTIFY, gstPowerDMDeciAmps10NOTIFY=gstPowerDMDeciAmps10NOTIFY, gstPowerDMDeciAmps11NOTIFY=gstPowerDMDeciAmps11NOTIFY, gstPowerDMDeciAmps12NOTIFY=gstPowerDMDeciAmps12NOTIFY, gstPowerDMDeciAmps13NOTIFY=gstPowerDMDeciAmps13NOTIFY, gstPowerDMDeciAmps14NOTIFY=gstPowerDMDeciAmps14NOTIFY, gstPowerDMDeciAmps15NOTIFY=gstPowerDMDeciAmps15NOTIFY, gstPowerDMDeciAmps16NOTIFY=gstPowerDMDeciAmps16NOTIFY, gstPowerDMDeciAmps17NOTIFY=gstPowerDMDeciAmps17NOTIFY, gstPowerDMDeciAmps18NOTIFY=gstPowerDMDeciAmps18NOTIFY, gstPowerDMDeciAmps19NOTIFY=gstPowerDMDeciAmps19NOTIFY, gstPowerDMDeciAmps20NOTIFY=gstPowerDMDeciAmps20NOTIFY, gstPowerDMDeciAmps21NOTIFY=gstPowerDMDeciAmps21NOTIFY, gstPowerDMDeciAmps22NOTIFY=gstPowerDMDeciAmps22NOTIFY, gstPowerDMDeciAmps23NOTIFY=gstPowerDMDeciAmps23NOTIFY, gstPowerDMDeciAmps24NOTIFY=gstPowerDMDeciAmps24NOTIFY, gstPowerDMDeciAmps25NOTIFY=gstPowerDMDeciAmps25NOTIFY, gstPowerDMDeciAmps26NOTIFY=gstPowerDMDeciAmps26NOTIFY, gstPowerDMDeciAmps27NOTIFY=gstPowerDMDeciAmps27NOTIFY, gstPowerDMDeciAmps28NOTIFY=gstPowerDMDeciAmps28NOTIFY, gstPowerDMDeciAmps29NOTIFY=gstPowerDMDeciAmps29NOTIFY, gstPowerDMDeciAmps30NOTIFY=gstPowerDMDeciAmps30NOTIFY, gstPowerDMDeciAmps31NOTIFY=gstPowerDMDeciAmps31NOTIFY, gstPowerDMDeciAmps32NOTIFY=gstPowerDMDeciAmps32NOTIFY, gstPowerDMDeciAmps33NOTIFY=gstPowerDMDeciAmps33NOTIFY, gstPowerDMDeciAmps34NOTIFY=gstPowerDMDeciAmps34NOTIFY, gstPowerDMDeciAmps35NOTIFY=gstPowerDMDeciAmps35NOTIFY, gstPowerDMDeciAmps36NOTIFY=gstPowerDMDeciAmps36NOTIFY, gstPowerDMDeciAmps37NOTIFY=gstPowerDMDeciAmps37NOTIFY, gstPowerDMDeciAmps38NOTIFY=gstPowerDMDeciAmps38NOTIFY, gstPowerDMDeciAmps39NOTIFY=gstPowerDMDeciAmps39NOTIFY, gstPowerDMDeciAmps40NOTIFY=gstPowerDMDeciAmps40NOTIFY, gstPowerDMDeciAmps41NOTIFY=gstPowerDMDeciAmps41NOTIFY, gstPowerDMDeciAmps42NOTIFY=gstPowerDMDeciAmps42NOTIFY, gstPowerDMDeciAmps43NOTIFY=gstPowerDMDeciAmps43NOTIFY, gstPowerDMDeciAmps44NOTIFY=gstPowerDMDeciAmps44NOTIFY, gstPowerDMDeciAmps45NOTIFY=gstPowerDMDeciAmps45NOTIFY, gstPowerDMDeciAmps46NOTIFY=gstPowerDMDeciAmps46NOTIFY, gstPowerDMDeciAmps47NOTIFY=gstPowerDMDeciAmps47NOTIFY, gstPowerDMDeciAmps48NOTIFY=gstPowerDMDeciAmps48NOTIFY, gstPowerDMDeciAmps1CLEAR=gstPowerDMDeciAmps1CLEAR, gstPowerDMDeciAmps2CLEAR=gstPowerDMDeciAmps2CLEAR, gstPowerDMDeciAmps3CLEAR=gstPowerDMDeciAmps3CLEAR, gstPowerDMDeciAmps4CLEAR=gstPowerDMDeciAmps4CLEAR, gstPowerDMDeciAmps5CLEAR=gstPowerDMDeciAmps5CLEAR, gstPowerDMDeciAmps6CLEAR=gstPowerDMDeciAmps6CLEAR, gstPowerDMDeciAmps7CLEAR=gstPowerDMDeciAmps7CLEAR, gstPowerDMDeciAmps8CLEAR=gstPowerDMDeciAmps8CLEAR, gstPowerDMDeciAmps9CLEAR=gstPowerDMDeciAmps9CLEAR, gstPowerDMDeciAmps10CLEAR=gstPowerDMDeciAmps10CLEAR, gstPowerDMDeciAmps11CLEAR=gstPowerDMDeciAmps11CLEAR, gstPowerDMDeciAmps12CLEAR=gstPowerDMDeciAmps12CLEAR, gstPowerDMDeciAmps13CLEAR=gstPowerDMDeciAmps13CLEAR, gstPowerDMDeciAmps14CLEAR=gstPowerDMDeciAmps14CLEAR, gstPowerDMDeciAmps15CLEAR=gstPowerDMDeciAmps15CLEAR, gstPowerDMDeciAmps16CLEAR=gstPowerDMDeciAmps16CLEAR, gstPowerDMDeciAmps17CLEAR=gstPowerDMDeciAmps17CLEAR, gstPowerDMDeciAmps18CLEAR=gstPowerDMDeciAmps18CLEAR, gstPowerDMDeciAmps19CLEAR=gstPowerDMDeciAmps19CLEAR, gstPowerDMDeciAmps20CLEAR=gstPowerDMDeciAmps20CLEAR, gstPowerDMDeciAmps21CLEAR=gstPowerDMDeciAmps21CLEAR, gstPowerDMDeciAmps22CLEAR=gstPowerDMDeciAmps22CLEAR, gstPowerDMDeciAmps23CLEAR=gstPowerDMDeciAmps23CLEAR, gstPowerDMDeciAmps24CLEAR=gstPowerDMDeciAmps24CLEAR, gstPowerDMDeciAmps25CLEAR=gstPowerDMDeciAmps25CLEAR, gstPowerDMDeciAmps26CLEAR=gstPowerDMDeciAmps26CLEAR, gstPowerDMDeciAmps27CLEAR=gstPowerDMDeciAmps27CLEAR, gstPowerDMDeciAmps28CLEAR=gstPowerDMDeciAmps28CLEAR, gstPowerDMDeciAmps29CLEAR=gstPowerDMDeciAmps29CLEAR, gstPowerDMDeciAmps30CLEAR=gstPowerDMDeciAmps30CLEAR, gstPowerDMDeciAmps31CLEAR=gstPowerDMDeciAmps31CLEAR, gstPowerDMDeciAmps32CLEAR=gstPowerDMDeciAmps32CLEAR, gstPowerDMDeciAmps33CLEAR=gstPowerDMDeciAmps33CLEAR, gstPowerDMDeciAmps34CLEAR=gstPowerDMDeciAmps34CLEAR, gstPowerDMDeciAmps35CLEAR=gstPowerDMDeciAmps35CLEAR, gstPowerDMDeciAmps36CLEAR=gstPowerDMDeciAmps36CLEAR, gstPowerDMDeciAmps37CLEAR=gstPowerDMDeciAmps37CLEAR, gstPowerDMDeciAmps38CLEAR=gstPowerDMDeciAmps38CLEAR, gstPowerDMDeciAmps39CLEAR=gstPowerDMDeciAmps39CLEAR, gstPowerDMDeciAmps40CLEAR=gstPowerDMDeciAmps40CLEAR, gstPowerDMDeciAmps41CLEAR=gstPowerDMDeciAmps41CLEAR, gstPowerDMDeciAmps42CLEAR=gstPowerDMDeciAmps42CLEAR, gstPowerDMDeciAmps43CLEAR=gstPowerDMDeciAmps43CLEAR, gstPowerDMDeciAmps44CLEAR=gstPowerDMDeciAmps44CLEAR, gstPowerDMDeciAmps45CLEAR=gstPowerDMDeciAmps45CLEAR, gstPowerDMDeciAmps46CLEAR=gstPowerDMDeciAmps46CLEAR, gstPowerDMDeciAmps47CLEAR=gstPowerDMDeciAmps47CLEAR, gstPowerDMDeciAmps48CLEAR=gstPowerDMDeciAmps48CLEAR)

